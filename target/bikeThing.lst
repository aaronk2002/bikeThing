
/home/aaron/Repos/bikeThing/target/bikeThing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a78  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019b34  2**0
                  CONTENTS
  3 .data         00000078  2003e168  000d9a90  0000e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000610  2003e1e0  2003e1e0  0001e1e0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d9b08  000d9b08  00019b08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d9b30  000d9b30  00019b30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0011a44f  00000000  00000000  00019b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000173a0  00000000  00000000  00133f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002ef0  00000000  00000000  0014b323  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0004016c  00000000  00000000  0014e213  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0003a85e  00000000  00000000  0018e37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0011787e  00000000  00000000  001c8bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00024025  00000000  00000000  002e045b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000055d0  00000000  00000000  00304480  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000e568  00000000  00000000  00309a50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	30 8f 0d 00                                         0...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fe6a 	bl	d8d06 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fe8a 	bl	d8d52 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e168 	.word	0x2003e168
   d4048:	000d9a90 	.word	0x000d9a90
   d404c:	2003e1e0 	.word	0x2003e1e0
   d4050:	2003e1e0 	.word	0x2003e1e0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd27 	bl	d6aac <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9a88 	.word	0x000d9a88
   d4080:	000d9a34 	.word	0x000d9a34

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bda2 	b.w	d4bcc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe49 	bl	d4d20 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bcd9 	b.w	d6a48 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 be3d 	b.w	d5d14 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 be43 	b.w	d5d24 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 be41 	b.w	d5d24 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d40b4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d40b6:	f001 fcef 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN10CloudClass7processEv+0x14>)
   d40bc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d40be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d40c2:	f001 bd99 	b.w	d5bf8 <spark_process>
   d40c6:	bf00      	nop
   d40c8:	2003e72c 	.word	0x2003e72c

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d9528 	.word	0x000d9528

000d4100 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN9TCPClientD0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff ffdc 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	211c      	movs	r1, #28
   d4118:	f004 f8bb 	bl	d8292 <_ZdlPvj>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	b12b      	cbz	r3, d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4124:	6842      	ldr	r2, [r0, #4]
   d4126:	4293      	cmp	r3, r2
   d4128:	d202      	bcs.n	d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d412a:	4618      	mov	r0, r3
   d412c:	f004 bdc6 	b.w	d8cbc <atoi>
   d4130:	2000      	movs	r0, #0
   d4132:	4770      	bx	lr

000d4134 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4134:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4136:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4138:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d413a:	b145      	cbz	r5, d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d413c:	6843      	ldr	r3, [r0, #4]
   d413e:	429d      	cmp	r5, r3
   d4140:	d205      	bcs.n	d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d4142:	4628      	mov	r0, r5
   d4144:	f004 fe48 	bl	d8dd8 <strlen>
   d4148:	3001      	adds	r0, #1
   d414a:	4405      	add	r5, r0
   d414c:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d414e:	4620      	mov	r0, r4
   d4150:	bd38      	pop	{r3, r4, r5, pc}

000d4152 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d4152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4154:	4604      	mov	r4, r0
    if (str == NULL) {
   d4156:	460f      	mov	r7, r1
   d4158:	6846      	ldr	r6, [r0, #4]
   d415a:	b921      	cbnz	r1, d4166 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d415c:	6803      	ldr	r3, [r0, #0]
   d415e:	1c72      	adds	r2, r6, #1
   d4160:	6042      	str	r2, [r0, #4]
   d4162:	5599      	strb	r1, [r3, r6]
        return;
   d4164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d4166:	4608      	mov	r0, r1
   d4168:	f004 fe36 	bl	d8dd8 <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d416c:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d416e:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d4170:	19aa      	adds	r2, r5, r6
   d4172:	429a      	cmp	r2, r3
   d4174:	d808      	bhi.n	d4188 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d4176:	6820      	ldr	r0, [r4, #0]
   d4178:	462a      	mov	r2, r5
   d417a:	4639      	mov	r1, r7
   d417c:	4430      	add	r0, r6
   d417e:	f004 fdc2 	bl	d8d06 <memcpy>
    len += l;
   d4182:	6863      	ldr	r3, [r4, #4]
   d4184:	441d      	add	r5, r3
   d4186:	6065      	str	r5, [r4, #4]
   d4188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d418c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d418c:	b570      	push	{r4, r5, r6, lr}
   d418e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4190:	6840      	ldr	r0, [r0, #4]
   d4192:	68a6      	ldr	r6, [r4, #8]
   d4194:	6825      	ldr	r5, [r4, #0]
   d4196:	4a05      	ldr	r2, [pc, #20]	; (d41ac <_ZN10BlynkParam3addEi+0x20>)
   d4198:	460b      	mov	r3, r1
   d419a:	1a31      	subs	r1, r6, r0
   d419c:	4428      	add	r0, r5
   d419e:	f001 fdd1 	bl	d5d44 <snprintf>
   d41a2:	6863      	ldr	r3, [r4, #4]
   d41a4:	3001      	adds	r0, #1
   d41a6:	4418      	add	r0, r3
   d41a8:	6060      	str	r0, [r4, #4]
   d41aa:	bd70      	pop	{r4, r5, r6, pc}
   d41ac:	000d8f97 	.word	0x000d8f97

000d41b0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41b0:	b570      	push	{r4, r5, r6, lr}
   d41b2:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41b4:	6840      	ldr	r0, [r0, #4]
   d41b6:	68a6      	ldr	r6, [r4, #8]
   d41b8:	6825      	ldr	r5, [r4, #0]
   d41ba:	4a05      	ldr	r2, [pc, #20]	; (d41d0 <_ZN10BlynkParam3addEl+0x20>)
   d41bc:	460b      	mov	r3, r1
   d41be:	1a31      	subs	r1, r6, r0
   d41c0:	4428      	add	r0, r5
   d41c2:	f001 fdbf 	bl	d5d44 <snprintf>
   d41c6:	6863      	ldr	r3, [r4, #4]
   d41c8:	3001      	adds	r0, #1
   d41ca:	4418      	add	r0, r3
   d41cc:	6060      	str	r0, [r4, #4]
   d41ce:	bd70      	pop	{r4, r5, r6, pc}
   d41d0:	000d8f9a 	.word	0x000d8f9a

000d41d4 <_ZN10BlynkParam3addEd>:
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
    }

    inline
    void BlynkParam::add(double value)
    {
   d41d4:	b513      	push	{r0, r1, r4, lr}
   d41d6:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d41d8:	6843      	ldr	r3, [r0, #4]
   d41da:	6881      	ldr	r1, [r0, #8]
   d41dc:	6800      	ldr	r0, [r0, #0]
   d41de:	4a06      	ldr	r2, [pc, #24]	; (d41f8 <_ZN10BlynkParam3addEd+0x24>)
   d41e0:	1ac9      	subs	r1, r1, r3
   d41e2:	ed8d 0b00 	vstr	d0, [sp]
   d41e6:	4418      	add	r0, r3
   d41e8:	f001 fdac 	bl	d5d44 <snprintf>
   d41ec:	6863      	ldr	r3, [r4, #4]
   d41ee:	3001      	adds	r0, #1
   d41f0:	4418      	add	r0, r3
   d41f2:	6060      	str	r0, [r4, #4]
    }
   d41f4:	b002      	add	sp, #8
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	000d8f9e 	.word	0x000d8f9e

000d41fc <_Z8parseGPSv>:
    data.appendServiceUUID(serviceUuid);
    data.appendLocalName("bikeThing");
    BLE.advertise(&data);
}

bool parseGPS() {
   d41fc:	b508      	push	{r3, lr}
  while (GPSSerial.available() > 0)
   d41fe:	f003 feb5 	bl	d7f6c <_Z22__fetch_global_Serial1v>
   d4202:	6803      	ldr	r3, [r0, #0]
   d4204:	691b      	ldr	r3, [r3, #16]
   d4206:	4798      	blx	r3
   d4208:	2800      	cmp	r0, #0
   d420a:	dd09      	ble.n	d4220 <_Z8parseGPSv+0x24>
  {
    GPS.encode(GPSSerial.read());
   d420c:	f003 feae 	bl	d7f6c <_Z22__fetch_global_Serial1v>
   d4210:	6803      	ldr	r3, [r0, #0]
   d4212:	695b      	ldr	r3, [r3, #20]
   d4214:	4798      	blx	r3
   d4216:	b2c1      	uxtb	r1, r0
   d4218:	4803      	ldr	r0, [pc, #12]	; (d4228 <_Z8parseGPSv+0x2c>)
   d421a:	f001 f9d7 	bl	d55cc <_ZN11TinyGPSPlus6encodeEc>
    data.appendLocalName("bikeThing");
    BLE.advertise(&data);
}

bool parseGPS() {
  while (GPSSerial.available() > 0)
   d421e:	e7ee      	b.n	d41fe <_Z8parseGPSv+0x2>
  {
    GPS.encode(GPSSerial.read());
  }
  return (GPS.location.isValid() ? true : false);
}
   d4220:	4b01      	ldr	r3, [pc, #4]	; (d4228 <_Z8parseGPSv+0x2c>)
   d4222:	7818      	ldrb	r0, [r3, #0]
   d4224:	bd08      	pop	{r3, pc}
   d4226:	bf00      	nop
   d4228:	2003e26c 	.word	0x2003e26c

000d422c <_Z14resetInterruptv>:

void resetInterrupt() {
   d422c:	b508      	push	{r3, lr}
  writeRegister(CTRL_REG1, 0x18);
   d422e:	2118      	movs	r1, #24
   d4230:	202a      	movs	r0, #42	; 0x2a
   d4232:	f001 fa25 	bl	d5680 <_Z13writeRegisterhh>
  setBit(CTRL_REG1, 0);
   d4236:	2100      	movs	r1, #0
   d4238:	202a      	movs	r0, #42	; 0x2a
}
   d423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (GPS.location.isValid() ? true : false);
}

void resetInterrupt() {
  writeRegister(CTRL_REG1, 0x18);
  setBit(CTRL_REG1, 0);
   d423e:	f001 ba57 	b.w	d56f0 <_Z6setBithh>

000d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4242:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4244:	2300      	movs	r3, #0
   d4246:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4248:	6800      	ldr	r0, [r0, #0]
   d424a:	f002 f84c 	bl	d62e6 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d424e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d4252:	f000 befa 	b.w	d504a <BlynkNoOpCbk>
	...

000d4258 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d425c:	188e      	adds	r6, r1, r2
   d425e:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4260:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4262:	4680      	mov	r8, r0
   d4264:	460d      	mov	r5, r1
   d4266:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4268:	9105      	str	r1, [sp, #20]
   d426a:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d426c:	f080 80ec 	bcs.w	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d4270:	880b      	ldrh	r3, [r1, #0]
   d4272:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d4276:	a805      	add	r0, sp, #20
   d4278:	f7ff ff5c 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d427c:	6803      	ldr	r3, [r0, #0]
   d427e:	429e      	cmp	r6, r3
   d4280:	f240 80e2 	bls.w	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d4284:	a805      	add	r0, sp, #20
   d4286:	f7ff ff4b 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d428a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d428e:	f247 2276 	movw	r2, #29302	; 0x7276
   d4292:	4293      	cmp	r3, r2
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d4294:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d4296:	f000 809e 	beq.w	d43d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x17e>
   d429a:	d80d      	bhi.n	d42b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d429c:	f247 2261 	movw	r2, #29281	; 0x7261
   d42a0:	4293      	cmp	r3, r2
   d42a2:	d064      	beq.n	d436e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d42a4:	f247 2264 	movw	r2, #29284	; 0x7264
   d42a8:	4293      	cmp	r3, r2
   d42aa:	d039      	beq.n	d4320 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
   d42ac:	f646 5270 	movw	r2, #28016	; 0x6d70
   d42b0:	4293      	cmp	r3, r2
   d42b2:	f040 80bb 	bne.w	d442c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d42b6:	e02f      	b.n	d4318 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
   d42b8:	f247 7264 	movw	r2, #30564	; 0x7764
   d42bc:	4293      	cmp	r3, r2
   d42be:	d041      	beq.n	d4344 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
   d42c0:	f247 7276 	movw	r2, #30582	; 0x7776
   d42c4:	4293      	cmp	r3, r2
   d42c6:	f000 8097 	beq.w	d43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a0>
   d42ca:	f247 7261 	movw	r2, #30561	; 0x7761
   d42ce:	4293      	cmp	r3, r2
   d42d0:	f040 80ac 	bne.w	d442c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d42d4:	e06c      	b.n	d43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x158>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d42d6:	a805      	add	r0, sp, #20
   d42d8:	f7ff ff22 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d42dc:	b2c5      	uxtb	r5, r0
            ++it;
   d42de:	a805      	add	r0, sp, #20
   d42e0:	f7ff ff28 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d42e4:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d42e6:	495a      	ldr	r1, [pc, #360]	; (d4450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d42e8:	4620      	mov	r0, r4
   d42ea:	f004 fd63 	bl	d8db4 <strcmp>
   d42ee:	4601      	mov	r1, r0
   d42f0:	2800      	cmp	r0, #0
   d42f2:	f000 80a5 	beq.w	d4440 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d42f6:	4957      	ldr	r1, [pc, #348]	; (d4454 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
   d42f8:	4620      	mov	r0, r4
   d42fa:	f004 fd5b 	bl	d8db4 <strcmp>
   d42fe:	2800      	cmp	r0, #0
   d4300:	f000 809d 	beq.w	d443e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
   d4304:	4954      	ldr	r1, [pc, #336]	; (d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
   d4306:	4620      	mov	r0, r4
   d4308:	f004 fd54 	bl	d8db4 <strcmp>
   d430c:	2800      	cmp	r0, #0
   d430e:	f000 8096 	beq.w	d443e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d4312:	a805      	add	r0, sp, #20
   d4314:	f7ff ff0e 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d4318:	9b05      	ldr	r3, [sp, #20]
   d431a:	429e      	cmp	r6, r3
   d431c:	d8db      	bhi.n	d42d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
   d431e:	e093      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4320:	ab0a      	add	r3, sp, #40	; 0x28
   d4322:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d4324:	a807      	add	r0, sp, #28
   d4326:	2310      	movs	r3, #16
   d4328:	2500      	movs	r5, #0
   d432a:	494c      	ldr	r1, [pc, #304]	; (d445c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
   d432c:	9309      	str	r3, [sp, #36]	; 0x24
   d432e:	9508      	str	r5, [sp, #32]
   d4330:	f7ff ff0f 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d4334:	a807      	add	r0, sp, #28
   d4336:	4621      	mov	r1, r4
   d4338:	f7ff ff28 	bl	d418c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d433c:	4620      	mov	r0, r4
   d433e:	f003 ff53 	bl	d81e8 <digitalRead>
   d4342:	e025      	b.n	d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x138>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d4344:	a805      	add	r0, sp, #20
   d4346:	f7ff fef5 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d434a:	6803      	ldr	r3, [r0, #0]
   d434c:	429e      	cmp	r6, r3
   d434e:	d97b      	bls.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d4350:	b2a4      	uxth	r4, r4
   d4352:	2101      	movs	r1, #1
   d4354:	4620      	mov	r0, r4
   d4356:	f003 ff1d 	bl	d8194 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d435a:	a805      	add	r0, sp, #20
   d435c:	f7ff fee0 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d4360:	1c01      	adds	r1, r0, #0
   d4362:	bf18      	it	ne
   d4364:	2101      	movne	r1, #1
   d4366:	4620      	mov	r0, r4
   d4368:	f003 ff25 	bl	d81b6 <digitalWrite>
    } break;
   d436c:	e06c      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
   d436e:	ab0a      	add	r3, sp, #40	; 0x28
   d4370:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d4372:	493b      	ldr	r1, [pc, #236]	; (d4460 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
   d4374:	2310      	movs	r3, #16
   d4376:	a807      	add	r0, sp, #28
   d4378:	2500      	movs	r5, #0
   d437a:	9309      	str	r3, [sp, #36]	; 0x24
   d437c:	9508      	str	r5, [sp, #32]
   d437e:	f7ff fee8 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d4382:	a807      	add	r0, sp, #28
   d4384:	4621      	mov	r1, r4
   d4386:	f7ff ff01 	bl	d418c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d438a:	4620      	mov	r0, r4
   d438c:	f003 ff3f 	bl	d820e <analogRead>
   d4390:	4601      	mov	r1, r0
   d4392:	a807      	add	r0, sp, #28
   d4394:	f7ff ff0c 	bl	d41b0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4398:	9b08      	ldr	r3, [sp, #32]
   d439a:	9502      	str	r5, [sp, #8]
   d439c:	3b01      	subs	r3, #1
   d439e:	9300      	str	r3, [sp, #0]
   d43a0:	9b07      	ldr	r3, [sp, #28]
   d43a2:	9501      	str	r5, [sp, #4]
   d43a4:	462a      	mov	r2, r5
   d43a6:	2114      	movs	r1, #20
   d43a8:	4640      	mov	r0, r8
   d43aa:	f000 fa51 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d43ae:	e04b      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d43b0:	a805      	add	r0, sp, #20
   d43b2:	f7ff febf 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d43b6:	6803      	ldr	r3, [r0, #0]
   d43b8:	429e      	cmp	r6, r3
   d43ba:	d945      	bls.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d43bc:	b2a4      	uxth	r4, r4
   d43be:	2101      	movs	r1, #1
   d43c0:	4620      	mov	r0, r4
   d43c2:	f003 fee7 	bl	d8194 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d43c6:	a805      	add	r0, sp, #20
   d43c8:	f7ff feaa 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d43cc:	4601      	mov	r1, r0
   d43ce:	4620      	mov	r0, r4
   d43d0:	f003 ff34 	bl	d823c <_Z11analogWritetm>
    } break;
   d43d4:	e038      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d43d6:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d43d8:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d43da:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d43de:	f000 fe35 	bl	d504c <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d43e2:	4603      	mov	r3, r0
            handler(req);
   d43e4:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d43e6:	b123      	cbz	r3, d43f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
   d43e8:	4a1e      	ldr	r2, [pc, #120]	; (d4464 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
   d43ea:	4293      	cmp	r3, r2
   d43ec:	d001      	beq.n	d43f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
            handler(req);
   d43ee:	4798      	blx	r3
   d43f0:	e02a      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetReadDefault(req);
   d43f2:	f000 fe28 	bl	d5046 <BlynkWidgetRead>
        }
    } break;
   d43f6:	e027      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_VW: {
        ++it;
   d43f8:	a805      	add	r0, sp, #20
   d43fa:	f7ff fe9b 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d43fe:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4400:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d4402:	1b5d      	subs	r5, r3, r5
   d4404:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4406:	4620      	mov	r0, r4
   d4408:	950b      	str	r5, [sp, #44]	; 0x2c
   d440a:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d440c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4410:	f000 fe26 	bl	d5060 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4414:	4603      	mov	r3, r0
            handler(req, param2);
   d4416:	a90a      	add	r1, sp, #40	; 0x28
   d4418:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d441a:	b123      	cbz	r3, d4426 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
   d441c:	4a12      	ldr	r2, [pc, #72]	; (d4468 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
   d441e:	4293      	cmp	r3, r2
   d4420:	d001      	beq.n	d4426 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
            handler(req, param2);
   d4422:	4798      	blx	r3
   d4424:	e010      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d4426:	f000 fe0f 	bl	d5048 <BlynkWidgetWrite>
        }
    } break;
   d442a:	e00d      	b.n	d4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d442c:	2300      	movs	r3, #0
   d442e:	2102      	movs	r1, #2
   d4430:	9100      	str	r1, [sp, #0]
   d4432:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4436:	9302      	str	r3, [sp, #8]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	4619      	mov	r1, r3
   d443c:	e7b4      	b.n	d43a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x150>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d443e:	2101      	movs	r1, #1
   d4440:	4628      	mov	r0, r5
   d4442:	f003 fea7 	bl	d8194 <pinMode>
   d4446:	e764      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d4448:	b00e      	add	sp, #56	; 0x38
   d444a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d444e:	bf00      	nop
   d4450:	000d8fa4 	.word	0x000d8fa4
   d4454:	000d8fa7 	.word	0x000d8fa7
   d4458:	000d8fab 	.word	0x000d8fab
   d445c:	000d8faf 	.word	0x000d8faf
   d4460:	000d8fb2 	.word	0x000d8fb2
   d4464:	000d5047 	.word	0x000d5047
   d4468:	000d5049 	.word	0x000d5049

000d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4470:	b08e      	sub	sp, #56	; 0x38
   d4472:	af04      	add	r7, sp, #16
   d4474:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4476:	2205      	movs	r2, #5
   d4478:	f107 010c 	add.w	r1, r7, #12
   d447c:	6800      	ldr	r0, [r0, #0]
   d447e:	f002 fbe6 	bl	d6c4e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4482:	2800      	cmp	r0, #0
   d4484:	f000 8119 	beq.w	d46ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4488:	2805      	cmp	r0, #5
   d448a:	d001      	beq.n	d4490 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d448c:	2000      	movs	r0, #0
   d448e:	e119      	b.n	d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4490:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4494:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4498:	0a13      	lsrs	r3, r2, #8
   d449a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d449e:	0a23      	lsrs	r3, r4, #8
   d44a0:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d44a4:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d44a6:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d44a8:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d44ac:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d44b0:	2a00      	cmp	r2, #0
   d44b2:	d0eb      	beq.n	d448c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d44b4:	7b3b      	ldrb	r3, [r7, #12]
   d44b6:	b9f3      	cbnz	r3, d44f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d44b8:	f000 fde0 	bl	d507c <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44bc:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d44be:	60e8      	str	r0, [r5, #12]
   d44c0:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44c4:	b99b      	cbnz	r3, d44ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d44c6:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d44ca:	2901      	cmp	r1, #1
   d44cc:	d10f      	bne.n	d44ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d44ce:	2a04      	cmp	r2, #4
   d44d0:	d001      	beq.n	d44d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d44d2:	2ac8      	cmp	r2, #200	; 0xc8
   d44d4:	d1da      	bne.n	d448c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d44d6:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d44d8:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d44da:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d44dc:	4628      	mov	r0, r5
   d44de:	f000 fa6f 	bl	d49c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d44e2:	f7ff fde7 	bl	d40b4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d44e6:	f000 fdb0 	bl	d504a <BlynkNoOpCbk>
                return true;
   d44ea:	4620      	mov	r0, r4
   d44ec:	e0ea      	b.n	d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d44ee:	1f50      	subs	r0, r2, #5
   d44f0:	bf18      	it	ne
   d44f2:	2001      	movne	r0, #1
   d44f4:	e0e6      	b.n	d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d44f6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d44fa:	d903      	bls.n	d4504 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d44fc:	4628      	mov	r0, r5
   d44fe:	f7ff fea0 	bl	d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4502:	e0da      	b.n	d46ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4504:	f104 0308 	add.w	r3, r4, #8
   d4508:	f023 0307 	bic.w	r3, r3, #7
   d450c:	46e8      	mov	r8, sp
   d450e:	ebad 0d03 	sub.w	sp, sp, r3
   d4512:	ae04      	add	r6, sp, #16
   d4514:	4622      	mov	r2, r4
   d4516:	4631      	mov	r1, r6
   d4518:	6828      	ldr	r0, [r5, #0]
   d451a:	f002 fb98 	bl	d6c4e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d451e:	4284      	cmp	r4, r0
   d4520:	f04f 0400 	mov.w	r4, #0
   d4524:	f040 80c4 	bne.w	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d4528:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d452c:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d452e:	f000 fda5 	bl	d507c <_Z11BlynkMillisv>

    switch (hdr.type)
   d4532:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d4534:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d4536:	2b11      	cmp	r3, #17
   d4538:	d072      	beq.n	d4620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d453a:	d806      	bhi.n	d454a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d453c:	2b06      	cmp	r3, #6
   d453e:	d020      	beq.n	d4582 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d4540:	2b0f      	cmp	r3, #15
   d4542:	d060      	beq.n	d4606 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d4544:	2b02      	cmp	r3, #2
   d4546:	d009      	beq.n	d455c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d4548:	e0ae      	b.n	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d454a:	2b29      	cmp	r3, #41	; 0x29
   d454c:	d025      	beq.n	d459a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d454e:	2b37      	cmp	r3, #55	; 0x37
   d4550:	f000 80b0 	beq.w	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d4554:	2b14      	cmp	r3, #20
   d4556:	f040 80a7 	bne.w	d46a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d455a:	e054      	b.n	d4606 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d455c:	7f6b      	ldrb	r3, [r5, #29]
   d455e:	b943      	cbnz	r3, d4572 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d4560:	2301      	movs	r3, #1
   d4562:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d4564:	4628      	mov	r0, r5
   d4566:	f000 fa2b 	bl	d49c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d456a:	f7ff fda3 	bl	d40b4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d456e:	f000 fd6c 	bl	d504a <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4572:	2300      	movs	r3, #0
   d4574:	21c8      	movs	r1, #200	; 0xc8
   d4576:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d457a:	9302      	str	r3, [sp, #8]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	9100      	str	r1, [sp, #0]
   d4580:	e006      	b.n	d4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4582:	23c8      	movs	r3, #200	; 0xc8
   d4584:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4588:	9300      	str	r3, [sp, #0]
   d458a:	9402      	str	r4, [sp, #8]
   d458c:	9401      	str	r4, [sp, #4]
   d458e:	4623      	mov	r3, r4
   d4590:	4619      	mov	r1, r3
   d4592:	4628      	mov	r0, r5
   d4594:	f000 f95c 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4598:	e08c      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d459a:	68ab      	ldr	r3, [r5, #8]
   d459c:	b91b      	cbnz	r3, d45a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d459e:	2020      	movs	r0, #32
   d45a0:	f001 fbb8 	bl	d5d14 <malloc>
   d45a4:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d45a6:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45aa:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d45ac:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d45ae:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45b0:	623c      	str	r4, [r7, #32]
   d45b2:	d301      	bcc.n	d45b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d45b4:	2000      	movs	r0, #0
   d45b6:	e07e      	b.n	d46b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d45b8:	2220      	movs	r2, #32
   d45ba:	4631      	mov	r1, r6
   d45bc:	68a8      	ldr	r0, [r5, #8]
   d45be:	f004 fc13 	bl	d8de8 <strncpy>
        if (++it < param.end())
   d45c2:	f107 001c 	add.w	r0, r7, #28
   d45c6:	f7ff fdb5 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d45ca:	6803      	ldr	r3, [r0, #0]
   d45cc:	42a3      	cmp	r3, r4
   d45ce:	d207      	bcs.n	d45e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d45d0:	69f8      	ldr	r0, [r7, #28]
   d45d2:	b118      	cbz	r0, d45dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d45d4:	6a3b      	ldr	r3, [r7, #32]
   d45d6:	4298      	cmp	r0, r3
   d45d8:	d371      	bcc.n	d46be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d45da:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d45dc:	b284      	uxth	r4, r0
   d45de:	e000      	b.n	d45e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d45e0:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d45e2:	6828      	ldr	r0, [r5, #0]
   d45e4:	f001 fe7f 	bl	d62e6 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d45e8:	682b      	ldr	r3, [r5, #0]
   d45ea:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d45ec:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d45ee:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d45f0:	2300      	movs	r3, #0
   d45f2:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d45f4:	f000 fd42 	bl	d507c <_Z11BlynkMillisv>
   d45f8:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d45fc:	3808      	subs	r0, #8
   d45fe:	6128      	str	r0, [r5, #16]
   d4600:	60e8      	str	r0, [r5, #12]
   d4602:	6168      	str	r0, [r5, #20]
   d4604:	e056      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d4606:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d4608:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d460c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4610:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4612:	4631      	mov	r1, r6
   d4614:	4628      	mov	r0, r5
   d4616:	f7ff fe1f 	bl	d4258 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d461a:	2300      	movs	r3, #0
   d461c:	836b      	strh	r3, [r5, #26]
   d461e:	e049      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4620:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d4624:	713c      	strb	r4, [r7, #4]
   d4626:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d4628:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d462a:	617e      	str	r6, [r7, #20]
   d462c:	61bb      	str	r3, [r7, #24]
   d462e:	d241      	bcs.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d4630:	6830      	ldr	r0, [r6, #0]
   d4632:	60b8      	str	r0, [r7, #8]

        ++it;
   d4634:	f107 0014 	add.w	r0, r7, #20
   d4638:	f7ff fd7c 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d463c:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d463e:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4642:	61fa      	str	r2, [r7, #28]
   d4644:	1b96      	subs	r6, r2, r6
   d4646:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d4648:	4a20      	ldr	r2, [pc, #128]	; (d46cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d464a:	68bb      	ldr	r3, [r7, #8]
   d464c:	623e      	str	r6, [r7, #32]
   d464e:	4293      	cmp	r3, r2
   d4650:	627e      	str	r6, [r7, #36]	; 0x24
   d4652:	d01d      	beq.n	d4690 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d4654:	d80b      	bhi.n	d466e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d4656:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d465a:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d465e:	4293      	cmp	r3, r2
   d4660:	d128      	bne.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4662:	f107 011c 	add.w	r1, r7, #28
   d4666:	1d38      	adds	r0, r7, #4
   d4668:	f000 fcee 	bl	d5048 <BlynkWidgetWrite>
   d466c:	e022      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d466e:	4a18      	ldr	r2, [pc, #96]	; (d46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d4670:	4293      	cmp	r3, r2
   d4672:	d013      	beq.n	d469c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d4674:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d4678:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d467c:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d4680:	4293      	cmp	r3, r2
   d4682:	d117      	bne.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4684:	f107 011c 	add.w	r1, r7, #28
   d4688:	1d38      	adds	r0, r7, #4
   d468a:	f000 fcdd 	bl	d5048 <BlynkWidgetWrite>
   d468e:	e011      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4690:	f107 011c 	add.w	r1, r7, #28
   d4694:	1d38      	adds	r0, r7, #4
   d4696:	f000 fcd7 	bl	d5048 <BlynkWidgetWrite>
   d469a:	e00b      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d469c:	f107 011c 	add.w	r1, r7, #28
   d46a0:	1d38      	adds	r0, r7, #4
   d46a2:	f000 fcd1 	bl	d5048 <BlynkWidgetWrite>
   d46a6:	e005      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d46a8:	4628      	mov	r0, r5
   d46aa:	f7ff fdca 	bl	d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d46ae:	e001      	b.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d46b0:	4620      	mov	r0, r4
   d46b2:	e000      	b.n	d46b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d46b4:	2001      	movs	r0, #1
   d46b6:	46c5      	mov	sp, r8
   d46b8:	e004      	b.n	d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d46ba:	2001      	movs	r0, #1
   d46bc:	e002      	b.n	d46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46be:	f004 fb01 	bl	d8cc4 <atol>
   d46c2:	e78b      	b.n	d45dc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d46c4:	3728      	adds	r7, #40	; 0x28
   d46c6:	46bd      	mov	sp, r7
   d46c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46cc:	00637472 	.word	0x00637472
   d46d0:	6e6f6361 	.word	0x6e6f6361

000d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46d8:	4604      	mov	r4, r0
   d46da:	b08a      	sub	sp, #40	; 0x28
   d46dc:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d46de:	f7ff fce9 	bl	d40b4 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d46e2:	7f63      	ldrb	r3, [r4, #29]
   d46e4:	2b02      	cmp	r3, #2
   d46e6:	f000 809d 	beq.w	d4824 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d46ea:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d46ec:	8b62      	ldrh	r2, [r4, #26]
   d46ee:	3301      	adds	r3, #1
   d46f0:	b2db      	uxtb	r3, r3
   d46f2:	7723      	strb	r3, [r4, #28]
   d46f4:	2a00      	cmp	r2, #0
   d46f6:	d141      	bne.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d46f8:	2b02      	cmp	r3, #2
   d46fa:	d83f      	bhi.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d46fc:	6820      	ldr	r0, [r4, #0]
   d46fe:	f001 fc1e 	bl	d5f3e <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d4702:	b140      	cbz	r0, d4716 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d4704:	2d00      	cmp	r5, #0
   d4706:	f040 808f 	bne.w	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d470a:	6820      	ldr	r0, [r4, #0]
   d470c:	f001 fe02 	bl	d6314 <_ZN9TCPClient9availableEv>
   d4710:	2800      	cmp	r0, #0
   d4712:	f300 8089 	bgt.w	d4828 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d4716:	f000 fcb1 	bl	d507c <_Z11BlynkMillisv>
   d471a:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d471c:	6820      	ldr	r0, [r4, #0]
   d471e:	f001 fc0e 	bl	d5f3e <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d4722:	7f67      	ldrb	r7, [r4, #29]
   d4724:	2f01      	cmp	r7, #1
   d4726:	4605      	mov	r5, r0
   d4728:	d12a      	bne.n	d4780 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d472a:	b920      	cbnz	r0, d4736 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d472c:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d472e:	4620      	mov	r0, r4
   d4730:	f7ff fd87 	bl	d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4734:	e072      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d4736:	68e3      	ldr	r3, [r4, #12]
   d4738:	f644 2238 	movw	r2, #19000	; 0x4a38
   d473c:	1af3      	subs	r3, r6, r3
   d473e:	4293      	cmp	r3, r2
   d4740:	d904      	bls.n	d474c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d4742:	4620      	mov	r0, r4
   d4744:	f7ff fd7d 	bl	d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4748:	2500      	movs	r5, #0
   d474a:	e067      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d474c:	f242 7210 	movw	r2, #10000	; 0x2710
   d4750:	4293      	cmp	r3, r2
   d4752:	d803      	bhi.n	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d4754:	6923      	ldr	r3, [r4, #16]
   d4756:	1af3      	subs	r3, r6, r3
   d4758:	4293      	cmp	r3, r2
   d475a:	d90f      	bls.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d475c:	6963      	ldr	r3, [r4, #20]
   d475e:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d4762:	1af3      	subs	r3, r6, r3
   d4764:	4293      	cmp	r3, r2
   d4766:	d909      	bls.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d4768:	2300      	movs	r3, #0
   d476a:	9302      	str	r3, [sp, #8]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	9300      	str	r3, [sp, #0]
   d4770:	461a      	mov	r2, r3
   d4772:	2106      	movs	r1, #6
   d4774:	4620      	mov	r0, r4
   d4776:	f000 f86b 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d477a:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d477c:	2501      	movs	r5, #1
   d477e:	e04d      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d4780:	2f00      	cmp	r7, #0
   d4782:	d1fb      	bne.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4784:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4786:	b150      	cbz	r0, d479e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d4788:	1ab6      	subs	r6, r6, r2
   d478a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d478e:	429e      	cmp	r6, r3
   d4790:	d9f4      	bls.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4792:	6820      	ldr	r0, [r4, #0]
   d4794:	f001 fda7 	bl	d62e6 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d4798:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d479a:	7767      	strb	r7, [r4, #29]
            return false;
   d479c:	e03e      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d479e:	1ab2      	subs	r2, r6, r2
   d47a0:	f241 3388 	movw	r3, #5000	; 0x1388
   d47a4:	429a      	cmp	r2, r3
   d47a6:	d9e9      	bls.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d47a8:	6820      	ldr	r0, [r4, #0]
   d47aa:	f001 fd9c 	bl	d62e6 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d47ae:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d47b2:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d47b6:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d47ba:	f1bc 0f00 	cmp.w	ip, #0
   d47be:	d006      	beq.n	d47ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d47c0:	462b      	mov	r3, r5
   d47c2:	4642      	mov	r2, r8
   d47c4:	4661      	mov	r1, ip
   d47c6:	4670      	mov	r0, lr
   d47c8:	f001 fbe6 	bl	d5f98 <_ZN9TCPClient7connectEPKctm>
   d47cc:	e00e      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d47ce:	4b1f      	ldr	r3, [pc, #124]	; (d484c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d47d0:	9304      	str	r3, [sp, #16]
   d47d2:	f10e 0720 	add.w	r7, lr, #32
   d47d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d47d8:	ad05      	add	r5, sp, #20
   d47da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d47dc:	683b      	ldr	r3, [r7, #0]
   d47de:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d47e0:	4642      	mov	r2, r8
   d47e2:	4663      	mov	r3, ip
   d47e4:	a904      	add	r1, sp, #16
   d47e6:	4670      	mov	r0, lr
   d47e8:	f001 fd00 	bl	d61ec <_ZN9TCPClient7connectE9IPAddresstm>
   d47ec:	1e43      	subs	r3, r0, #1
   d47ee:	425d      	negs	r5, r3
   d47f0:	415d      	adcs	r5, r3
   d47f2:	b90d      	cbnz	r5, d47f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d47f4:	6166      	str	r6, [r4, #20]
                return false;
   d47f6:	e011      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d47f8:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d47fa:	2601      	movs	r6, #1
   d47fc:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d47fe:	4638      	mov	r0, r7
   d4800:	f004 faea 	bl	d8dd8 <strlen>
   d4804:	2300      	movs	r3, #0
   d4806:	e88d 0009 	stmia.w	sp, {r0, r3}
   d480a:	9302      	str	r3, [sp, #8]
   d480c:	4632      	mov	r2, r6
   d480e:	463b      	mov	r3, r7
   d4810:	2102      	movs	r1, #2
   d4812:	4620      	mov	r0, r4
   d4814:	f000 f81c 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4818:	6923      	ldr	r3, [r4, #16]
   d481a:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d481c:	7f23      	ldrb	r3, [r4, #28]
   d481e:	3b01      	subs	r3, #1
   d4820:	7723      	strb	r3, [r4, #28]
   d4822:	e00e      	b.n	d4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d4824:	2500      	movs	r5, #0
   d4826:	e00c      	b.n	d4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d4828:	4620      	mov	r0, r4
   d482a:	f7ff fe1f 	bl	d446c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d482e:	4605      	mov	r5, r0
   d4830:	2800      	cmp	r0, #0
   d4832:	f47f af6a 	bne.w	d470a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4836:	6820      	ldr	r0, [r4, #0]
   d4838:	f001 fd55 	bl	d62e6 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d483c:	f000 fc05 	bl	d504a <BlynkNoOpCbk>
                return false;
   d4840:	e7ec      	b.n	d481c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d4842:	4628      	mov	r0, r5
   d4844:	b00a      	add	sp, #40	; 0x28
   d4846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d484a:	bf00      	nop
   d484c:	000d9628 	.word	0x000d9628

000d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4854:	b083      	sub	sp, #12
   d4856:	af00      	add	r7, sp, #0
   d4858:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d485a:	6800      	ldr	r0, [r0, #0]
   d485c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d485e:	4689      	mov	r9, r1
   d4860:	4616      	mov	r6, r2
   d4862:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4864:	46ea      	mov	sl, sp
   d4866:	f001 fb6a 	bl	d5f3e <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d486a:	2800      	cmp	r0, #0
   d486c:	d060      	beq.n	d4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d486e:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d4872:	f000 80a0 	beq.w	d49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d4876:	f1b9 0f06 	cmp.w	r9, #6
   d487a:	f000 809c 	beq.w	d49b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d487e:	7f63      	ldrb	r3, [r4, #29]
   d4880:	2b01      	cmp	r3, #1
   d4882:	d155      	bne.n	d4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d4884:	b916      	cbnz	r6, d488c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4886:	8b66      	ldrh	r6, [r4, #26]
   d4888:	2e00      	cmp	r6, #0
   d488a:	d056      	beq.n	d493a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d488c:	f1a9 030c 	sub.w	r3, r9, #12
   d4890:	2b08      	cmp	r3, #8
   d4892:	d95a      	bls.n	d494a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d4894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4896:	f1bb 0f00 	cmp.w	fp, #0
   d489a:	bf14      	ite	ne
   d489c:	46a8      	movne	r8, r5
   d489e:	f04f 0800 	moveq.w	r8, #0
   d48a2:	2a00      	cmp	r2, #0
   d48a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d48a6:	f108 0305 	add.w	r3, r8, #5
   d48aa:	bf14      	ite	ne
   d48ac:	4690      	movne	r8, r2
   d48ae:	f04f 0800 	moveq.w	r8, #0
   d48b2:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d48b4:	f108 0307 	add.w	r3, r8, #7
   d48b8:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d48bc:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d48be:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d48c2:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d48c6:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d48c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d48cc:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d48d0:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d48d4:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d48d8:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d48dc:	f1bb 0f00 	cmp.w	fp, #0
   d48e0:	d052      	beq.n	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d48e2:	2d00      	cmp	r5, #0
   d48e4:	d050      	beq.n	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d48e6:	462a      	mov	r2, r5
   d48e8:	4659      	mov	r1, fp
   d48ea:	f10d 0005 	add.w	r0, sp, #5
   d48ee:	f004 fa0a 	bl	d8d06 <memcpy>
        pos += length;
   d48f2:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d48f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d48f6:	2b00      	cmp	r3, #0
   d48f8:	d148      	bne.n	d498c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d48fa:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d48fc:	4545      	cmp	r5, r8
   d48fe:	d251      	bcs.n	d49a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4900:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d4904:	687b      	ldr	r3, [r7, #4]
   d4906:	6820      	ldr	r0, [r4, #0]
   d4908:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d490c:	bf28      	it	cs
   d490e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4912:	1959      	adds	r1, r3, r5
   d4914:	f001 fafd 	bl	d5f12 <_ZN9TCPClient5writeEPKhj>
   d4918:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d491a:	2000      	movs	r0, #0
   d491c:	f000 fbac 	bl	d5078 <_Z10BlynkDelaym>
        if (w == 0) {
   d4920:	2e00      	cmp	r6, #0
   d4922:	d13d      	bne.n	d49a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4924:	6820      	ldr	r0, [r4, #0]
   d4926:	f001 fcde 	bl	d62e6 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d492a:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d492c:	f000 fb8d 	bl	d504a <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4930:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d4932:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4934:	46bd      	mov	sp, r7
   d4936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d493a:	8b23      	ldrh	r3, [r4, #24]
   d493c:	3301      	adds	r3, #1
   d493e:	b29b      	uxth	r3, r3
   d4940:	b903      	cbnz	r3, d4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d4942:	2301      	movs	r3, #1
   d4944:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4946:	8b26      	ldrh	r6, [r4, #24]
   d4948:	e7a0      	b.n	d488c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d494a:	68e3      	ldr	r3, [r4, #12]
   d494c:	6922      	ldr	r2, [r4, #16]
   d494e:	4293      	cmp	r3, r2
   d4950:	bf38      	it	cc
   d4952:	4613      	movcc	r3, r2
   d4954:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4958:	f000 fb90 	bl	d507c <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d495c:	ebc0 0008 	rsb	r0, r0, r8
   d4960:	2800      	cmp	r0, #0
   d4962:	db0a      	blt.n	d497a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d4964:	2100      	movs	r1, #0
   d4966:	4620      	mov	r0, r4
   d4968:	f7ff feb4 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d496c:	f000 fb86 	bl	d507c <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d4970:	ebc0 0008 	rsb	r0, r0, r8
   d4974:	2800      	cmp	r0, #0
   d4976:	daf5      	bge.n	d4964 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d4978:	e78c      	b.n	d4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d497a:	7f21      	ldrb	r1, [r4, #28]
   d497c:	2900      	cmp	r1, #0
   d497e:	d189      	bne.n	d4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d4980:	4620      	mov	r0, r4
   d4982:	f7ff fea7 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4986:	e785      	b.n	d4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d4988:	2005      	movs	r0, #5
   d498a:	e7b3      	b.n	d48f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d498e:	2b00      	cmp	r3, #0
   d4990:	d0b3      	beq.n	d48fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d4992:	461a      	mov	r2, r3
   d4994:	687b      	ldr	r3, [r7, #4]
   d4996:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4998:	4418      	add	r0, r3
   d499a:	f004 f9b4 	bl	d8d06 <memcpy>
   d499e:	e7ac      	b.n	d48fa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d49a0:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d49a2:	e7ab      	b.n	d48fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d49a4:	d003      	beq.n	d49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d49a6:	4620      	mov	r0, r4
   d49a8:	f7ff fc4b 	bl	d4242 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d49ac:	e7c0      	b.n	d4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d49ae:	f000 fb65 	bl	d507c <_Z11BlynkMillisv>
   d49b2:	6120      	str	r0, [r4, #16]
   d49b4:	e7bc      	b.n	d4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d49b6:	2e00      	cmp	r6, #0
   d49b8:	f47f af6c 	bne.w	d4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d49bc:	e763      	b.n	d4886 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d49c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d49c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d49c2:	2200      	movs	r2, #0
   d49c4:	2349      	movs	r3, #73	; 0x49
   d49c6:	9300      	str	r3, [sp, #0]
   d49c8:	9202      	str	r2, [sp, #8]
   d49ca:	9201      	str	r2, [sp, #4]
   d49cc:	4b03      	ldr	r3, [pc, #12]	; (d49dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d49ce:	2111      	movs	r1, #17
   d49d0:	f7ff ff3e 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d49d4:	b005      	add	sp, #20
   d49d6:	f85d fb04 	ldr.w	pc, [sp], #4
   d49da:	bf00      	nop
   d49dc:	000d8f4c 	.word	0x000d8f4c

000d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d49e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d49e2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d49e6:	ab08      	add	r3, sp, #32
   d49e8:	2400      	movs	r4, #0
   d49ea:	4605      	mov	r5, r0
   d49ec:	460f      	mov	r7, r1
   d49ee:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d49f0:	a805      	add	r0, sp, #20
   d49f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d49f6:	490e      	ldr	r1, [pc, #56]	; (d4a30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_+0x50>)
   d49f8:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d49fa:	4616      	mov	r6, r2
   d49fc:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d49fe:	f7ff fba8 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d4a02:	4639      	mov	r1, r7
   d4a04:	a805      	add	r0, sp, #20
   d4a06:	f7ff fbc1 	bl	d418c <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d4a0a:	4631      	mov	r1, r6
   d4a0c:	a805      	add	r0, sp, #20
   d4a0e:	f7ff fba0 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4a12:	9b06      	ldr	r3, [sp, #24]
   d4a14:	9402      	str	r4, [sp, #8]
   d4a16:	3b01      	subs	r3, #1
   d4a18:	9300      	str	r3, [sp, #0]
   d4a1a:	9401      	str	r4, [sp, #4]
   d4a1c:	9b05      	ldr	r3, [sp, #20]
   d4a1e:	4622      	mov	r2, r4
   d4a20:	2114      	movs	r1, #20
   d4a22:	4628      	mov	r0, r5
   d4a24:	f7ff ff14 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4a28:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4a2e:	bf00      	nop
   d4a30:	000d8fb5 	.word	0x000d8fb5

000d4a34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA27_cEEvRKT_>:
     * Sends a push notification to the App
     *
     * @param msg Text of the message
     */
    template<typename T>
    void notify(const T& msg) {
   d4a34:	b530      	push	{r4, r5, lr}
   d4a36:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4a3a:	ab08      	add	r3, sp, #32
   d4a3c:	2400      	movs	r4, #0
   d4a3e:	4605      	mov	r5, r0
   d4a40:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   d4a42:	a805      	add	r0, sp, #20
   d4a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4a48:	9307      	str	r3, [sp, #28]
   d4a4a:	9406      	str	r4, [sp, #24]
   d4a4c:	f7ff fb81 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4a50:	9b06      	ldr	r3, [sp, #24]
   d4a52:	9402      	str	r4, [sp, #8]
   d4a54:	3b01      	subs	r3, #1
   d4a56:	9300      	str	r3, [sp, #0]
   d4a58:	9401      	str	r4, [sp, #4]
   d4a5a:	9b05      	ldr	r3, [sp, #20]
   d4a5c:	4622      	mov	r2, r4
   d4a5e:	210e      	movs	r1, #14
   d4a60:	4628      	mov	r0, r5
   d4a62:	f7ff fef5 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4a66:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4a6a:	bd30      	pop	{r4, r5, pc}

000d4a6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiddPKcEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4a70:	ed2d 8b04 	vpush	{d8-d9}
   d4a74:	eeb0 8a41 	vmov.f32	s16, s2
   d4a78:	eef0 8a61 	vmov.f32	s17, s3
   d4a7c:	eeb0 9a40 	vmov.f32	s18, s0
   d4a80:	eef0 9a60 	vmov.f32	s19, s1
   d4a84:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
   d4a88:	461e      	mov	r6, r3
   d4a8a:	ab08      	add	r3, sp, #32
   d4a8c:	2400      	movs	r4, #0
   d4a8e:	4605      	mov	r5, r0
   d4a90:	4688      	mov	r8, r1
   d4a92:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d4a94:	a805      	add	r0, sp, #20
   d4a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4a9a:	4918      	ldr	r1, [pc, #96]	; (d4afc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiddPKcEEEviDpT_+0x90>)
   d4a9c:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4a9e:	4617      	mov	r7, r2
   d4aa0:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d4aa2:	f7ff fb56 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d4aa6:	4641      	mov	r1, r8
   d4aa8:	a805      	add	r0, sp, #20
   d4aaa:	f7ff fb6f 	bl	d418c <_ZN10BlynkParam3addEi>
        add(last);
    }

    template<typename T, typename... Args>
    void add_multi(T head, Args... tail) {
        add(head);
   d4aae:	4639      	mov	r1, r7
   d4ab0:	a805      	add	r0, sp, #20
   d4ab2:	f7ff fb6b 	bl	d418c <_ZN10BlynkParam3addEi>
   d4ab6:	eeb0 0a49 	vmov.f32	s0, s18
   d4aba:	eef0 0a69 	vmov.f32	s1, s19
   d4abe:	a805      	add	r0, sp, #20
   d4ac0:	f7ff fb88 	bl	d41d4 <_ZN10BlynkParam3addEd>
   d4ac4:	eeb0 0a48 	vmov.f32	s0, s16
   d4ac8:	eef0 0a68 	vmov.f32	s1, s17
   d4acc:	a805      	add	r0, sp, #20
   d4ace:	f7ff fb81 	bl	d41d4 <_ZN10BlynkParam3addEd>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d4ad2:	4631      	mov	r1, r6
   d4ad4:	a805      	add	r0, sp, #20
   d4ad6:	f7ff fb3c 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4ada:	9b06      	ldr	r3, [sp, #24]
   d4adc:	9402      	str	r4, [sp, #8]
   d4ade:	3b01      	subs	r3, #1
   d4ae0:	9300      	str	r3, [sp, #0]
   d4ae2:	9401      	str	r4, [sp, #4]
   d4ae4:	9b05      	ldr	r3, [sp, #20]
   d4ae6:	4622      	mov	r2, r4
   d4ae8:	2114      	movs	r1, #20
   d4aea:	4628      	mov	r0, r5
   d4aec:	f7ff feb0 	bl	d4850 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4af0:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4af4:	ecbd 8b04 	vpop	{d8-d9}
   d4af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4afc:	000d8fb5 	.word	0x000d8fb5

000d4b00 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4b04:	4614      	mov	r4, r2
   d4b06:	b08c      	sub	sp, #48	; 0x30
   d4b08:	4605      	mov	r5, r0
   d4b0a:	3404      	adds	r4, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4b0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4b10:	460f      	mov	r7, r1
   d4b12:	4698      	mov	r8, r3
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4b14:	f000 fab0 	bl	d5078 <_Z10BlynkDelaym>
   d4b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4b1a:	ae01      	add	r6, sp, #4
   d4b1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4b1e:	6823      	ldr	r3, [r4, #0]
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d4b20:	606f      	str	r7, [r5, #4]
   d4b22:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4b24:	f000 faaa 	bl	d507c <_Z11BlynkMillisv>
   d4b28:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4b2c:	3808      	subs	r0, #8
   d4b2e:	af01      	add	r7, sp, #4
   d4b30:	6128      	str	r0, [r5, #16]
   d4b32:	60e8      	str	r0, [r5, #12]
   d4b34:	6168      	str	r0, [r5, #20]
   d4b36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4b38:	ae07      	add	r6, sp, #28
   d4b3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4b3c:	683b      	ldr	r3, [r7, #0]
   d4b3e:	7033      	strb	r3, [r6, #0]
   d4b40:	af07      	add	r7, sp, #28
   d4b42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    void config(const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(addr, port);
   d4b44:	682c      	ldr	r4, [r5, #0]
    BlynkTransportParticle()
        : domain(NULL), port(0)
    {}

    void begin(IPAddress a, uint16_t p) {
        domain = NULL;
   d4b46:	f04f 0e00 	mov.w	lr, #0
   d4b4a:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
        port = p;
   d4b4e:	f8a4 8038 	strh.w	r8, [r4, #56]	; 0x38
   d4b52:	3420      	adds	r4, #32
   d4b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b56:	6833      	ldr	r3, [r6, #0]
   d4b58:	7023      	strb	r3, [r4, #0]

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4b5a:	f242 3627 	movw	r6, #8999	; 0x2327

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d4b5e:	4674      	mov	r4, lr
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4b60:	6828      	ldr	r0, [r5, #0]
   d4b62:	f001 fbc0 	bl	d62e6 <_ZN9TCPClient4stopEv>
   d4b66:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
   d4b68:	f000 fa88 	bl	d507c <_Z11BlynkMillisv>
   d4b6c:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
   d4b6e:	7f6b      	ldrb	r3, [r5, #29]
   d4b70:	2b01      	cmp	r3, #1
   d4b72:	d009      	beq.n	d4b88 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
   d4b74:	f000 fa82 	bl	d507c <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4b78:	1bc0      	subs	r0, r0, r7
   d4b7a:	42b0      	cmp	r0, r6
   d4b7c:	d804      	bhi.n	d4b88 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
        {
            run();
   d4b7e:	2100      	movs	r1, #0
   d4b80:	4628      	mov	r0, r5
   d4b82:	f7ff fda7 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b86:	e7f2      	b.n	d4b6e <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4b88:	7f6b      	ldrb	r3, [r5, #29]
   d4b8a:	2b01      	cmp	r3, #1
   d4b8c:	d1e8      	bne.n	d4b60 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d4b8e:	b00c      	add	sp, #48	; 0x30
   d4b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4b94 <_Z9initBlynkv>:
      Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
    }
  }
}

void initBlynk() {
   d4b94:	b510      	push	{r4, lr}
   d4b96:	b088      	sub	sp, #32
  Blynk.begin(BLYNK_API_KEY, IPAddress(167, 99, 150, 124), 8080);
   d4b98:	237c      	movs	r3, #124	; 0x7c
   d4b9a:	4c0a      	ldr	r4, [pc, #40]	; (d4bc4 <_Z9initBlynkv+0x30>)
   d4b9c:	9300      	str	r3, [sp, #0]
   d4b9e:	2263      	movs	r2, #99	; 0x63
   d4ba0:	2396      	movs	r3, #150	; 0x96
   d4ba2:	21a7      	movs	r1, #167	; 0xa7
   d4ba4:	a802      	add	r0, sp, #8
   d4ba6:	f001 feaf 	bl	d6908 <_ZN9IPAddressC1Ehhhh>
   d4baa:	f641 7390 	movw	r3, #8080	; 0x1f90
   d4bae:	aa02      	add	r2, sp, #8
   d4bb0:	4905      	ldr	r1, [pc, #20]	; (d4bc8 <_Z9initBlynkv+0x34>)
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	f7ff ffa4 	bl	d4b00 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
   d4bb8:	7f63      	ldrb	r3, [r4, #29]
  while (!Blynk.connected()) {}
   d4bba:	2b01      	cmp	r3, #1
   d4bbc:	d1fd      	bne.n	d4bba <_Z9initBlynkv+0x26>
}
   d4bbe:	b008      	add	sp, #32
   d4bc0:	bd10      	pop	{r4, pc}
   d4bc2:	bf00      	nop
   d4bc4:	2003e1ec 	.word	0x2003e1ec
   d4bc8:	000d8fb8 	.word	0x000d8fb8

000d4bcc <setup>:

void setup() {
   d4bcc:	b500      	push	{lr}
   d4bce:	b093      	sub	sp, #76	; 0x4c
  Serial.begin(115200);
   d4bd0:	f001 fdf6 	bl	d67c0 <_Z16_fetch_usbserialv>
   d4bd4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4bd8:	f001 fde6 	bl	d67a8 <_ZN9USBSerial5beginEl>
  initCell();
   d4bdc:	f000 f9f6 	bl	d4fcc <_Z8initCellv>
  initBlynk();
   d4be0:	f7ff ffd8 	bl	d4b94 <_Z9initBlynkv>
  Blynk.virtualWrite(DISPLAY_PIN, "DISARMED");
   d4be4:	4a29      	ldr	r2, [pc, #164]	; (d4c8c <setup+0xc0>)
   d4be6:	482a      	ldr	r0, [pc, #168]	; (d4c90 <setup+0xc4>)
   d4be8:	2101      	movs	r1, #1
   d4bea:	f7ff fef9 	bl	d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>
  GPSSerial.begin(9600);
   d4bee:	f003 f9bd 	bl	d7f6c <_Z22__fetch_global_Serial1v>
   d4bf2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4bf6:	f003 f9b3 	bl	d7f60 <_ZN11USARTSerial5beginEm>
  initAccel();
   d4bfa:	f000 f9ff 	bl	d4ffc <_Z9initAccelv>
  Serial.println("Initialized");
   d4bfe:	f001 fddf 	bl	d67c0 <_Z16_fetch_usbserialv>
   d4c02:	4924      	ldr	r1, [pc, #144]	; (d4c94 <setup+0xc8>)
   d4c04:	f002 f86d 	bl	d6ce2 <_ZN5Print7printlnEPKc>
  pinMode(GPSEnable, OUTPUT);
   d4c08:	2101      	movs	r1, #1
   d4c0a:	2006      	movs	r0, #6
   d4c0c:	f003 fac2 	bl	d8194 <pinMode>
  pinMode(AccelInterrupt, INPUT);
   d4c10:	2100      	movs	r1, #0
   d4c12:	2008      	movs	r0, #8
   d4c14:	f003 fabe 	bl	d8194 <pinMode>
  RGB.control(true);
   d4c18:	2001      	movs	r0, #1
   d4c1a:	f001 ffbb 	bl	d6b94 <_ZN8RGBClass7controlEb>

    BLE.addCharacteristic(txCharacteristic);
   d4c1e:	f002 fd1d 	bl	d765c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4c22:	491d      	ldr	r1, [pc, #116]	; (d4c98 <setup+0xcc>)
   d4c24:	f003 f926 	bl	d7e74 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>
    BLE.addCharacteristic(rxCharacteristic);
   d4c28:	f002 fd18 	bl	d765c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4c2c:	491b      	ldr	r1, [pc, #108]	; (d4c9c <setup+0xd0>)
   d4c2e:	f003 f921 	bl	d7e74 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>
    BleAdvertisingData data;
   d4c32:	a809      	add	r0, sp, #36	; 0x24
   d4c34:	f002 f9ff 	bl	d7036 <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4c38:	4b19      	ldr	r3, [pc, #100]	; (d4ca0 <setup+0xd4>)
   d4c3a:	a804      	add	r0, sp, #16
   d4c3c:	6819      	ldr	r1, [r3, #0]
   d4c3e:	f002 f910 	bl	d6e62 <_ZN8particle7BleUuidC1EPKc>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4c42:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d4c46:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
   d4c4a:	d006      	beq.n	d4c5a <setup+0x8e>
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.full(), BLE_SIG_UUID_128BIT_LEN, force);
   d4c4c:	2300      	movs	r3, #0
   d4c4e:	9300      	str	r3, [sp, #0]
   d4c50:	2310      	movs	r3, #16
   d4c52:	eb0d 0203 	add.w	r2, sp, r3
   d4c56:	2107      	movs	r1, #7
   d4c58:	e007      	b.n	d4c6a <setup+0x9e>

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4c5a:	aa12      	add	r2, sp, #72	; 0x48
   d4c5c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d4c60:	f822 1d3a 	strh.w	r1, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4c64:	9300      	str	r3, [sp, #0]
   d4c66:	2103      	movs	r1, #3
   d4c68:	2302      	movs	r3, #2
   d4c6a:	a809      	add	r0, sp, #36	; 0x24
   d4c6c:	f002 f99c 	bl	d6fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    data.appendServiceUUID(serviceUuid);
    data.appendLocalName("bikeThing");
   d4c70:	490c      	ldr	r1, [pc, #48]	; (d4ca4 <setup+0xd8>)
   d4c72:	a809      	add	r0, sp, #36	; 0x24
   d4c74:	f002 f9f9 	bl	d706a <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    BLE.advertise(&data);
   d4c78:	f002 fcf0 	bl	d765c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	a909      	add	r1, sp, #36	; 0x24
   d4c80:	f002 fb0a 	bl	d7298 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d4c84:	b013      	add	sp, #76	; 0x4c
   d4c86:	f85d fb04 	ldr.w	pc, [sp], #4
   d4c8a:	bf00      	nop
   d4c8c:	000d8fd9 	.word	0x000d8fd9
   d4c90:	2003e1ec 	.word	0x2003e1ec
   d4c94:	000d8fe2 	.word	0x000d8fe2
   d4c98:	2003e264 	.word	0x2003e264
   d4c9c:	2003e344 	.word	0x2003e344
   d4ca0:	2003e168 	.word	0x2003e168
   d4ca4:	000d8fee 	.word	0x000d8fee

000d4ca8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

TinyGPSPlus GPS;

volatile uint8_t mode = 0; //0 is disarmed, 1 is armed, 2 is theft

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cac:	4606      	mov	r6, r0
   d4cae:	4688      	mov	r8, r1
  initCell();
   d4cb0:	f000 f98c 	bl	d4fcc <_Z8initCellv>
  initBlynk();
   d4cb4:	f7ff ff6e 	bl	d4b94 <_Z9initBlynkv>
  Blynk.run();
   d4cb8:	2100      	movs	r1, #0
   d4cba:	4814      	ldr	r0, [pc, #80]	; (d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
  for (uint8_t i = 0; i < len; i++) {
    if ((char)data[i] == '0')
    {
      mode = 0;
   d4cbc:	4f14      	ldr	r7, [pc, #80]	; (d4d10 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
volatile uint8_t mode = 0; //0 is disarmed, 1 is armed, 2 is theft

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
  initCell();
  initBlynk();
  Blynk.run();
   d4cbe:	f7ff fd09 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4cc2:	2500      	movs	r5, #0
   d4cc4:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < len; i++) {
   d4cc6:	45a0      	cmp	r8, r4
   d4cc8:	d91e      	bls.n	d4d08 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
    if ((char)data[i] == '0')
   d4cca:	5d33      	ldrb	r3, [r6, r4]
   d4ccc:	2b30      	cmp	r3, #48	; 0x30
   d4cce:	d106      	bne.n	d4cde <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x36>
    {
      mode = 0;
   d4cd0:	2300      	movs	r3, #0
      Blynk.virtualWrite(DISPLAY_PIN, "DISARMED");
   d4cd2:	4a10      	ldr	r2, [pc, #64]	; (d4d14 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
   d4cd4:	480d      	ldr	r0, [pc, #52]	; (d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
  initBlynk();
  Blynk.run();
  for (uint8_t i = 0; i < len; i++) {
    if ((char)data[i] == '0')
    {
      mode = 0;
   d4cd6:	703b      	strb	r3, [r7, #0]
      Blynk.virtualWrite(DISPLAY_PIN, "DISARMED");
   d4cd8:	2101      	movs	r1, #1
   d4cda:	f7ff fe81 	bl	d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>
    }
    if ((char)data[i] == '1')
   d4cde:	5d33      	ldrb	r3, [r6, r4]
   d4ce0:	2b31      	cmp	r3, #49	; 0x31
   d4ce2:	d105      	bne.n	d4cf0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
    {
      mode = 1;
   d4ce4:	2101      	movs	r1, #1
      Blynk.virtualWrite(DISPLAY_PIN, "ARMED");
   d4ce6:	4a0c      	ldr	r2, [pc, #48]	; (d4d18 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>)
   d4ce8:	4808      	ldr	r0, [pc, #32]	; (d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
      mode = 0;
      Blynk.virtualWrite(DISPLAY_PIN, "DISARMED");
    }
    if ((char)data[i] == '1')
    {
      mode = 1;
   d4cea:	7039      	strb	r1, [r7, #0]
      Blynk.virtualWrite(DISPLAY_PIN, "ARMED");
   d4cec:	f7ff fe78 	bl	d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>
    }
    if ((char)data[i] == '2')
   d4cf0:	5d33      	ldrb	r3, [r6, r4]
   d4cf2:	2b32      	cmp	r3, #50	; 0x32
   d4cf4:	d106      	bne.n	d4d04 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x5c>
    {
      mode = 2;
   d4cf6:	2302      	movs	r3, #2
      Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
   d4cf8:	4a08      	ldr	r2, [pc, #32]	; (d4d1c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d4cfa:	4804      	ldr	r0, [pc, #16]	; (d4d0c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
      mode = 1;
      Blynk.virtualWrite(DISPLAY_PIN, "ARMED");
    }
    if ((char)data[i] == '2')
    {
      mode = 2;
   d4cfc:	703b      	strb	r3, [r7, #0]
      Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
   d4cfe:	2101      	movs	r1, #1
   d4d00:	f7ff fe6e 	bl	d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>
   d4d04:	3501      	adds	r5, #1

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
  initCell();
  initBlynk();
  Blynk.run();
  for (uint8_t i = 0; i < len; i++) {
   d4d06:	e7dd      	b.n	d4cc4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>
   d4d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d0c:	2003e1ec 	.word	0x2003e1ec
   d4d10:	2003e260 	.word	0x2003e260
   d4d14:	000d8fd9 	.word	0x000d8fd9
   d4d18:	000d8fdc 	.word	0x000d8fdc
   d4d1c:	000d8ff8 	.word	0x000d8ff8

000d4d20 <loop>:
void resetInterrupt() {
  writeRegister(CTRL_REG1, 0x18);
  setBit(CTRL_REG1, 0);
}

void loop() {
   d4d20:	b570      	push	{r4, r5, r6, lr}
   d4d22:	ed2d 8b02 	vpush	{d8}
   d4d26:	b088      	sub	sp, #32
  if (BLE.connected()) { //BLE connection
   d4d28:	f002 fc98 	bl	d765c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4d2c:	f002 fad1 	bl	d72d2 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4d30:	b330      	cbz	r0, d4d80 <loop+0x60>
   d4d32:	4d54      	ldr	r5, [pc, #336]	; (d4e84 <loop+0x164>)
    while (Serial.available() && txLen < UART_TX_BUF_SIZE)
    {
      txBuf[txLen++] = Serial.read();
   d4d34:	4e54      	ldr	r6, [pc, #336]	; (d4e88 <loop+0x168>)
  setBit(CTRL_REG1, 0);
}

void loop() {
  if (BLE.connected()) { //BLE connection
    while (Serial.available() && txLen < UART_TX_BUF_SIZE)
   d4d36:	f001 fd43 	bl	d67c0 <_Z16_fetch_usbserialv>
   d4d3a:	6803      	ldr	r3, [r0, #0]
   d4d3c:	691b      	ldr	r3, [r3, #16]
   d4d3e:	4798      	blx	r3
   d4d40:	b1a0      	cbz	r0, d4d6c <loop+0x4c>
   d4d42:	682c      	ldr	r4, [r5, #0]
   d4d44:	2c13      	cmp	r4, #19
   d4d46:	d811      	bhi.n	d4d6c <loop+0x4c>
    {
      txBuf[txLen++] = Serial.read();
   d4d48:	1c63      	adds	r3, r4, #1
   d4d4a:	602b      	str	r3, [r5, #0]
   d4d4c:	f001 fd38 	bl	d67c0 <_Z16_fetch_usbserialv>
   d4d50:	6803      	ldr	r3, [r0, #0]
   d4d52:	695b      	ldr	r3, [r3, #20]
   d4d54:	4798      	blx	r3
   d4d56:	5530      	strb	r0, [r6, r4]
      Serial.write(txBuf[txLen - 1]);
   d4d58:	f001 fd32 	bl	d67c0 <_Z16_fetch_usbserialv>
   d4d5c:	682b      	ldr	r3, [r5, #0]
   d4d5e:	6802      	ldr	r2, [r0, #0]
   d4d60:	4433      	add	r3, r6
   d4d62:	6892      	ldr	r2, [r2, #8]
   d4d64:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   d4d68:	4790      	blx	r2
  setBit(CTRL_REG1, 0);
}

void loop() {
  if (BLE.connected()) { //BLE connection
    while (Serial.available() && txLen < UART_TX_BUF_SIZE)
   d4d6a:	e7e4      	b.n	d4d36 <loop+0x16>
    {
      txBuf[txLen++] = Serial.read();
      Serial.write(txBuf[txLen - 1]);
    }
    if (txLen > 0)
   d4d6c:	4b45      	ldr	r3, [pc, #276]	; (d4e84 <loop+0x164>)
   d4d6e:	681a      	ldr	r2, [r3, #0]
   d4d70:	b132      	cbz	r2, d4d80 <loop+0x60>
    {
      txCharacteristic.setValue(txBuf, txLen);
   d4d72:	4945      	ldr	r1, [pc, #276]	; (d4e88 <loop+0x168>)
   d4d74:	4845      	ldr	r0, [pc, #276]	; (d4e8c <loop+0x16c>)
   d4d76:	f002 f9c5 	bl	d7104 <_ZN8particle17BleCharacteristic8setValueEPKhj>
      txLen = 0;
   d4d7a:	4b42      	ldr	r3, [pc, #264]	; (d4e84 <loop+0x164>)
   d4d7c:	2200      	movs	r2, #0
   d4d7e:	601a      	str	r2, [r3, #0]
    }
  }
  if (mode == 2) //theft
   d4d80:	4c43      	ldr	r4, [pc, #268]	; (d4e90 <loop+0x170>)
   d4d82:	7823      	ldrb	r3, [r4, #0]
   d4d84:	2b02      	cmp	r3, #2
   d4d86:	d12b      	bne.n	d4de0 <loop+0xc0>
  {
    RGB.color(255, 0, 0);
   d4d88:	2200      	movs	r2, #0
   d4d8a:	4611      	mov	r1, r2
   d4d8c:	20ff      	movs	r0, #255	; 0xff
   d4d8e:	f001 ff11 	bl	d6bb4 <_ZN8RGBClass5colorEiii>
   d4d92:	4b40      	ldr	r3, [pc, #256]	; (d4e94 <loop+0x174>)
    if(!Blynk.connected())
   d4d94:	7f5b      	ldrb	r3, [r3, #29]
   d4d96:	2b01      	cmp	r3, #1
   d4d98:	d001      	beq.n	d4d9e <loop+0x7e>
    {
      initBlynk();
   d4d9a:	f7ff fefb 	bl	d4b94 <_Z9initBlynkv>
    }
    Blynk.run();
   d4d9e:	2100      	movs	r1, #0
   d4da0:	483c      	ldr	r0, [pc, #240]	; (d4e94 <loop+0x174>)
   d4da2:	f7ff fc97 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
    if (parseGPS())
   d4da6:	f7ff fa29 	bl	d41fc <_Z8parseGPSv>
   d4daa:	2800      	cmp	r0, #0
   d4dac:	d065      	beq.n	d4e7a <loop+0x15a>
    {
      Blynk.virtualWrite(MAP_PIN, 0, GPS.location.lat(), GPS.location.lng(), "Bike");
   d4dae:	483a      	ldr	r0, [pc, #232]	; (d4e98 <loop+0x178>)
   d4db0:	f000 fa3e 	bl	d5230 <_ZN15TinyGPSLocation3latEv>
   d4db4:	4838      	ldr	r0, [pc, #224]	; (d4e98 <loop+0x178>)
   d4db6:	eeb0 8a40 	vmov.f32	s16, s0
   d4dba:	eef0 8a60 	vmov.f32	s17, s1
   d4dbe:	f000 fa5f 	bl	d5280 <_ZN15TinyGPSLocation3lngEv>
   d4dc2:	2200      	movs	r2, #0
   d4dc4:	eeb0 1a40 	vmov.f32	s2, s0
   d4dc8:	eef0 1a60 	vmov.f32	s3, s1
   d4dcc:	4b33      	ldr	r3, [pc, #204]	; (d4e9c <loop+0x17c>)
   d4dce:	eeb0 0a48 	vmov.f32	s0, s16
   d4dd2:	eef0 0a68 	vmov.f32	s1, s17
   d4dd6:	4611      	mov	r1, r2
   d4dd8:	482e      	ldr	r0, [pc, #184]	; (d4e94 <loop+0x174>)
   d4dda:	f7ff fe47 	bl	d4a6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIiddPKcEEEviDpT_>
   d4dde:	e04c      	b.n	d4e7a <loop+0x15a>
    }
  }
  else
  {
    digitalWrite(GPSEnable, HIGH); //turn off GPS module
   d4de0:	2101      	movs	r1, #1
   d4de2:	2006      	movs	r0, #6
   d4de4:	f003 f9e7 	bl	d81b6 <digitalWrite>
   d4de8:	4b2d      	ldr	r3, [pc, #180]	; (d4ea0 <loop+0x180>)
   d4dea:	2208      	movs	r2, #8
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	f8ad 2016 	strh.w	r2, [sp, #22]
   d4df2:	2202      	movs	r2, #2
   d4df4:	f88d 2015 	strb.w	r2, [sp, #21]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
   d4df8:	9302      	str	r3, [sp, #8]
   d4dfa:	2201      	movs	r2, #1
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	e88d 000c 	stmia.w	sp, {r2, r3}
   d4e02:	f10d 0116 	add.w	r1, sp, #22
   d4e06:	f10d 0315 	add.w	r3, sp, #21
   d4e0a:	a806      	add	r0, sp, #24
   d4e0c:	f003 f8ec 	bl	d7fe8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.sleep(AccelInterrupt, FALLING);
    resetInterrupt();
   d4e10:	f7ff fa0c 	bl	d422c <_Z14resetInterruptv>
    if (mode == 0) //disarmed
   d4e14:	7823      	ldrb	r3, [r4, #0]
   d4e16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4e1a:	b93b      	cbnz	r3, d4e2c <loop+0x10c>
    {
      RGB.color(0, 255, 0);
   d4e1c:	4610      	mov	r0, r2
   d4e1e:	21ff      	movs	r1, #255	; 0xff
   d4e20:	f001 fec8 	bl	d6bb4 <_ZN8RGBClass5colorEiii>
      delay(15000);
   d4e24:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4e28:	f001 fee6 	bl	d6bf8 <delay>
    }
    if (mode == 1) //armed
   d4e2c:	7824      	ldrb	r4, [r4, #0]
   d4e2e:	4d18      	ldr	r5, [pc, #96]	; (d4e90 <loop+0x170>)
   d4e30:	b2e4      	uxtb	r4, r4
   d4e32:	2c01      	cmp	r4, #1
   d4e34:	d121      	bne.n	d4e7a <loop+0x15a>
    {
      RGB.color(0, 0, 255);
   d4e36:	2100      	movs	r1, #0
   d4e38:	4608      	mov	r0, r1
   d4e3a:	22ff      	movs	r2, #255	; 0xff
   d4e3c:	f001 feba 	bl	d6bb4 <_ZN8RGBClass5colorEiii>
      delay(15000);
   d4e40:	f643 2098 	movw	r0, #15000	; 0x3a98
   d4e44:	f001 fed8 	bl	d6bf8 <delay>
      if (mode != 0)//switch to theft mode if user hasn't disarmed
   d4e48:	782b      	ldrb	r3, [r5, #0]
   d4e4a:	b1b3      	cbz	r3, d4e7a <loop+0x15a>
      {
        mode = 2;
   d4e4c:	2302      	movs	r3, #2
        digitalWrite(GPSEnable, LOW); //enable GPS module
   d4e4e:	2100      	movs	r1, #0
   d4e50:	2006      	movs	r0, #6
    {
      RGB.color(0, 0, 255);
      delay(15000);
      if (mode != 0)//switch to theft mode if user hasn't disarmed
      {
        mode = 2;
   d4e52:	702b      	strb	r3, [r5, #0]
        digitalWrite(GPSEnable, LOW); //enable GPS module
   d4e54:	f003 f9af 	bl	d81b6 <digitalWrite>
        initCell(); //initialize all required modules
   d4e58:	f000 f8b8 	bl	d4fcc <_Z8initCellv>
        initBlynk();
   d4e5c:	f7ff fe9a 	bl	d4b94 <_Z9initBlynkv>
        Blynk.run();
   d4e60:	2100      	movs	r1, #0
   d4e62:	480c      	ldr	r0, [pc, #48]	; (d4e94 <loop+0x174>)
   d4e64:	f7ff fc36 	bl	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        Blynk.notify("Your bike is being stolen!"); //notify user of theft
   d4e68:	490e      	ldr	r1, [pc, #56]	; (d4ea4 <loop+0x184>)
   d4e6a:	480a      	ldr	r0, [pc, #40]	; (d4e94 <loop+0x174>)
   d4e6c:	f7ff fde2 	bl	d4a34 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA27_cEEvRKT_>
        Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
   d4e70:	4a0d      	ldr	r2, [pc, #52]	; (d4ea8 <loop+0x188>)
   d4e72:	4808      	ldr	r0, [pc, #32]	; (d4e94 <loop+0x174>)
   d4e74:	4621      	mov	r1, r4
   d4e76:	f7ff fdb3 	bl	d49e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIPKcEEEviDpT_>
      }
    }
  }
   d4e7a:	b008      	add	sp, #32
   d4e7c:	ecbd 8b02 	vpop	{d8}
   d4e80:	bd70      	pop	{r4, r5, r6, pc}
   d4e82:	bf00      	nop
   d4e84:	2003e34c 	.word	0x2003e34c
   d4e88:	2003e20c 	.word	0x2003e20c
   d4e8c:	2003e264 	.word	0x2003e264
   d4e90:	2003e260 	.word	0x2003e260
   d4e94:	2003e1ec 	.word	0x2003e1ec
   d4e98:	2003e26c 	.word	0x2003e26c
   d4e9c:	000d900a 	.word	0x000d900a
   d4ea0:	2003e25c 	.word	0x2003e25c
   d4ea4:	000d900f 	.word	0x000d900f
   d4ea8:	000d8ff8 	.word	0x000d8ff8

000d4eac <_GLOBAL__sub_I_Blynk>:
   d4eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4eb0:	4b36      	ldr	r3, [pc, #216]	; (d4f8c <_GLOBAL__sub_I_Blynk+0xe0>)

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4eb2:	4d37      	ldr	r5, [pc, #220]	; (d4f90 <_GLOBAL__sub_I_Blynk+0xe4>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4eb4:	4f37      	ldr	r7, [pc, #220]	; (d4f94 <_GLOBAL__sub_I_Blynk+0xe8>)

  const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
  const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
  const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";

  BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4eb6:	f8df 910c 	ldr.w	r9, [pc, #268]	; d4fc4 <_GLOBAL__sub_I_Blynk+0x118>
        Blynk.notify("Your bike is being stolen!"); //notify user of theft
        Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
      }
    }
  }
   d4eba:	b08f      	sub	sp, #60	; 0x3c
   d4ebc:	2400      	movs	r4, #0
   d4ebe:	601c      	str	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ec0:	f000 fe0a 	bl	d5ad8 <HAL_Pin_Map>
   d4ec4:	4628      	mov	r0, r5
   d4ec6:	f001 fac1 	bl	d644c <_ZN9TCPClientC1Ev>
   d4eca:	f105 001c 	add.w	r0, r5, #28
   d4ece:	f001 fcd7 	bl	d6880 <_ZN9IPAddressC1Ev>
   d4ed2:	463a      	mov	r2, r7
   d4ed4:	4930      	ldr	r1, [pc, #192]	; (d4f98 <_GLOBAL__sub_I_Blynk+0xec>)
   d4ed6:	636c      	str	r4, [r5, #52]	; 0x34
   d4ed8:	4628      	mov	r0, r5
   d4eda:	872c      	strh	r4, [r5, #56]	; 0x38
   d4edc:	f003 f9d4 	bl	d8288 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d4ee0:	4b2e      	ldr	r3, [pc, #184]	; (d4f9c <_GLOBAL__sub_I_Blynk+0xf0>)
   d4ee2:	601d      	str	r5, [r3, #0]
   d4ee4:	605c      	str	r4, [r3, #4]
   d4ee6:	609c      	str	r4, [r3, #8]
   d4ee8:	60dc      	str	r4, [r3, #12]
   d4eea:	611c      	str	r4, [r3, #16]
   d4eec:	615c      	str	r4, [r3, #20]
   d4eee:	831c      	strh	r4, [r3, #24]
   d4ef0:	835c      	strh	r4, [r3, #26]
   d4ef2:	771c      	strb	r4, [r3, #28]
   d4ef4:	775c      	strb	r4, [r3, #29]
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4ef6:	4b2a      	ldr	r3, [pc, #168]	; (d4fa0 <_GLOBAL__sub_I_Blynk+0xf4>)

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4ef8:	4d2a      	ldr	r5, [pc, #168]	; (d4fa4 <_GLOBAL__sub_I_Blynk+0xf8>)
   d4efa:	701c      	strb	r4, [r3, #0]
   d4efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4f00:	809a      	strh	r2, [r3, #4]
   d4f02:	805c      	strh	r4, [r3, #2]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f04:	2003      	movs	r0, #3
   d4f06:	f000 fed7 	bl	d5cb8 <set_system_mode>

  const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
  const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
  const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";

  BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4f0a:	4b27      	ldr	r3, [pc, #156]	; (d4fa8 <_GLOBAL__sub_I_Blynk+0xfc>)
   d4f0c:	f8d9 8000 	ldr.w	r8, [r9]
   d4f10:	6819      	ldr	r1, [r3, #0]
   d4f12:	602c      	str	r4, [r5, #0]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4f14:	ae09      	add	r6, sp, #36	; 0x24

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4f16:	606c      	str	r4, [r5, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4f18:	a804      	add	r0, sp, #16
   d4f1a:	f001 ffa2 	bl	d6e62 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4f1e:	4641      	mov	r1, r8
   d4f20:	4630      	mov	r0, r6
   d4f22:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d4fc8 <_GLOBAL__sub_I_Blynk+0x11c>
   d4f26:	f001 ff9c 	bl	d6e62 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4f2a:	ab04      	add	r3, sp, #16
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	9402      	str	r4, [sp, #8]
   d4f30:	9401      	str	r4, [sp, #4]
   d4f32:	9600      	str	r6, [sp, #0]
   d4f34:	2210      	movs	r2, #16
   d4f36:	491d      	ldr	r1, [pc, #116]	; (d4fac <_GLOBAL__sub_I_Blynk+0x100>)
   d4f38:	f002 fe7a 	bl	d7c30 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4f3c:	463a      	mov	r2, r7
   d4f3e:	4641      	mov	r1, r8
   d4f40:	4628      	mov	r0, r5
   d4f42:	f003 f9a1 	bl	d8288 <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4f46:	4d1a      	ldr	r5, [pc, #104]	; (d4fb0 <_GLOBAL__sub_I_Blynk+0x104>)
  BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, &rxCharacteristic);
   d4f48:	4b1a      	ldr	r3, [pc, #104]	; (d4fb4 <_GLOBAL__sub_I_Blynk+0x108>)
   d4f4a:	f8d9 9000 	ldr.w	r9, [r9]
   d4f4e:	6819      	ldr	r1, [r3, #0]
   d4f50:	602c      	str	r4, [r5, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4f52:	606c      	str	r4, [r5, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4f54:	a804      	add	r0, sp, #16
   d4f56:	f001 ff84 	bl	d6e62 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4f5a:	4649      	mov	r1, r9
   d4f5c:	4630      	mov	r0, r6
   d4f5e:	f001 ff80 	bl	d6e62 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4f62:	4b15      	ldr	r3, [pc, #84]	; (d4fb8 <_GLOBAL__sub_I_Blynk+0x10c>)
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	4628      	mov	r0, r5
   d4f68:	ab04      	add	r3, sp, #16
   d4f6a:	9502      	str	r5, [sp, #8]
   d4f6c:	9600      	str	r6, [sp, #0]
   d4f6e:	2204      	movs	r2, #4
   d4f70:	4912      	ldr	r1, [pc, #72]	; (d4fbc <_GLOBAL__sub_I_Blynk+0x110>)
   d4f72:	f002 fe5d 	bl	d7c30 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d4f76:	463a      	mov	r2, r7
   d4f78:	4641      	mov	r1, r8
   d4f7a:	4628      	mov	r0, r5
   d4f7c:	f003 f984 	bl	d8288 <__aeabi_atexit>

  uint8_t txBuf[UART_TX_BUF_SIZE];
  size_t txLen = 0;

TinyGPSPlus GPS;
   d4f80:	480f      	ldr	r0, [pc, #60]	; (d4fc0 <_GLOBAL__sub_I_Blynk+0x114>)
   d4f82:	f000 f881 	bl	d5088 <_ZN11TinyGPSPlusC1Ev>
        Blynk.notify("Your bike is being stolen!"); //notify user of theft
        Blynk.virtualWrite(DISPLAY_PIN, "THEFT IN PROGRESS");
      }
    }
  }
   d4f86:	b00f      	add	sp, #60	; 0x3c
   d4f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4f8c:	2003e25c 	.word	0x2003e25c
   d4f90:	2003e220 	.word	0x2003e220
   d4f94:	2003e1e0 	.word	0x2003e1e0
   d4f98:	000d4101 	.word	0x000d4101
   d4f9c:	2003e1ec 	.word	0x2003e1ec
   d4fa0:	2003e1e4 	.word	0x2003e1e4
   d4fa4:	2003e264 	.word	0x2003e264
   d4fa8:	2003e16c 	.word	0x2003e16c
   d4fac:	000d902a 	.word	0x000d902a
   d4fb0:	2003e344 	.word	0x2003e344
   d4fb4:	2003e170 	.word	0x2003e170
   d4fb8:	000d4ca9 	.word	0x000d4ca9
   d4fbc:	000d902d 	.word	0x000d902d
   d4fc0:	2003e26c 	.word	0x2003e26c
   d4fc4:	2003e168 	.word	0x2003e168
   d4fc8:	000d7331 	.word	0x000d7331

000d4fcc <_Z8initCellv>:

void initCell();
void initAccel();

void initCell()
{
   d4fcc:	b510      	push	{r4, lr}
   d4fce:	4c0a      	ldr	r4, [pc, #40]	; (d4ff8 <_Z8initCellv+0x2c>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4fd0:	2300      	movs	r3, #0
   d4fd2:	461a      	mov	r2, r3
   d4fd4:	4619      	mov	r1, r3
   d4fd6:	6860      	ldr	r0, [r4, #4]
   d4fd8:	f000 fe3e 	bl	d5c58 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fdc:	2300      	movs	r3, #0
   d4fde:	461a      	mov	r2, r3
   d4fe0:	4619      	mov	r1, r3
   d4fe2:	6860      	ldr	r0, [r4, #4]
   d4fe4:	f000 fe18 	bl	d5c18 <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	4611      	mov	r1, r2
   d4fec:	6860      	ldr	r0, [r4, #4]
   d4fee:	f000 fe2b 	bl	d5c48 <network_ready>
  Cellular.on();
  Cellular.connect();
  while(!Cellular.ready()) {}
   d4ff2:	2800      	cmp	r0, #0
   d4ff4:	d0f8      	beq.n	d4fe8 <_Z8initCellv+0x1c>
}
   d4ff6:	bd10      	pop	{r4, pc}
   d4ff8:	2003e544 	.word	0x2003e544

000d4ffc <_Z9initAccelv>:

void initAccel()
{
   d4ffc:	b508      	push	{r3, lr}
  Wire.begin();
   d4ffe:	f003 f863 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d5002:	f001 fb4d 	bl	d66a0 <_ZN7TwoWire5beginEv>
  writeRegister(CTRL_REG1, 0x18);
   d5006:	2118      	movs	r1, #24
   d5008:	202a      	movs	r0, #42	; 0x2a
   d500a:	f000 fb39 	bl	d5680 <_Z13writeRegisterhh>
  writeRegister(TRANSIENT_CFG, 0x16);
   d500e:	2116      	movs	r1, #22
   d5010:	201d      	movs	r0, #29
   d5012:	f000 fb35 	bl	d5680 <_Z13writeRegisterhh>
  writeRegister(TRANSIENT_THS, 0x0F);
   d5016:	210f      	movs	r1, #15
   d5018:	201f      	movs	r0, #31
   d501a:	f000 fb31 	bl	d5680 <_Z13writeRegisterhh>
  writeRegister(TRANSIENT_COUNT, 0x14);
   d501e:	2114      	movs	r1, #20
   d5020:	2020      	movs	r0, #32
   d5022:	f000 fb2d 	bl	d5680 <_Z13writeRegisterhh>
  writeRegister(CTRL_REG4, 0x20);
   d5026:	2120      	movs	r1, #32
   d5028:	202d      	movs	r0, #45	; 0x2d
   d502a:	f000 fb29 	bl	d5680 <_Z13writeRegisterhh>
  writeRegister(CTRL_REG5, 0x20);
   d502e:	2120      	movs	r1, #32
   d5030:	202e      	movs	r0, #46	; 0x2e
   d5032:	f000 fb25 	bl	d5680 <_Z13writeRegisterhh>
  setBit(CTRL_REG1, 0);
   d5036:	2100      	movs	r1, #0
   d5038:	202a      	movs	r0, #42	; 0x2a
   d503a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  writeRegister(TRANSIENT_CFG, 0x16);
  writeRegister(TRANSIENT_THS, 0x0F);
  writeRegister(TRANSIENT_COUNT, 0x14);
  writeRegister(CTRL_REG4, 0x20);
  writeRegister(CTRL_REG5, 0x20);
  setBit(CTRL_REG1, 0);
   d503e:	f000 bb57 	b.w	d56f0 <_Z6setBithh>

000d5042 <_GLOBAL__sub_I__Z8initCellv>:
   d5042:	f000 bd49 	b.w	d5ad8 <HAL_Pin_Map>

000d5046 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d5046:	4770      	bx	lr

000d5048 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d5048:	4770      	bx	lr

000d504a <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d504a:	4770      	bx	lr

000d504c <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d504c:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d504e:	bf9a      	itte	ls
   d5050:	4b02      	ldrls	r3, [pc, #8]	; (d505c <GetReadHandler+0x10>)
   d5052:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d5056:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d5058:	4770      	bx	lr
   d505a:	bf00      	nop
   d505c:	000d92a0 	.word	0x000d92a0

000d5060 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d5060:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d5062:	bf9a      	itte	ls
   d5064:	4b02      	ldrls	r3, [pc, #8]	; (d5070 <GetWriteHandler+0x10>)
   d5066:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d506a:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d506c:	4770      	bx	lr
   d506e:	bf00      	nop
   d5070:	000d90a0 	.word	0x000d90a0

000d5074 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d5074:	f000 bd30 	b.w	d5ad8 <HAL_Pin_Map>

000d5078 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d5078:	f001 bdbe 	b.w	d6bf8 <delay>

000d507c <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d507c:	f000 bd0c 	b.w	d5a98 <HAL_Timer_Get_Milli_Seconds>

000d5080 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d5080:	f000 bd2a 	b.w	d5ad8 <HAL_Pin_Map>

000d5084 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d5084:	f000 bd28 	b.w	d5ad8 <HAL_Pin_Map>

000d5088 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d5088:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d508a:	2102      	movs	r1, #2
   d508c:	7002      	strb	r2, [r0, #0]
   d508e:	7042      	strb	r2, [r0, #1]
{
   uint16_t deg;
   uint32_t billionths;
   bool negative;
public:
   RawDegrees() : deg(0), billionths(0), negative(false)
   d5090:	8082      	strh	r2, [r0, #4]
   d5092:	6082      	str	r2, [r0, #8]
   d5094:	7302      	strb	r2, [r0, #12]
   d5096:	8202      	strh	r2, [r0, #16]
   d5098:	6142      	str	r2, [r0, #20]
   d509a:	7602      	strb	r2, [r0, #24]
   d509c:	8382      	strh	r2, [r0, #28]
   d509e:	6202      	str	r2, [r0, #32]
   d50a0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d50a4:	8502      	strh	r2, [r0, #40]	; 0x28
   d50a6:	62c2      	str	r2, [r0, #44]	; 0x2c
   d50a8:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d50ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   d50b0:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
   d50b4:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d50b6:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
   d50ba:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
   d50be:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d50c0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
   d50c4:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
   d50c8:	6602      	str	r2, [r0, #96]	; 0x60
   d50ca:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
   d50ce:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
   d50d2:	6702      	str	r2, [r0, #112]	; 0x70
   d50d4:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
   d50d8:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
   d50dc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d50e0:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
   d50e4:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
   d50e8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d50ec:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
   d50f0:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
   d50f4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d50f8:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
   d50fc:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
   d5100:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d5104:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
   d5108:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
   d510c:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d5110:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
   d5114:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
   d5118:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   d511c:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
   d5120:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
   d5124:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
  term[0] = '\0';
   d5128:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d512c:	4770      	bx	lr

000d512e <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d512e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5132:	2b05      	cmp	r3, #5
   d5134:	d802      	bhi.n	d513c <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5136:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d513a:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d513c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5140:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5142:	bf94      	ite	ls
   d5144:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5148:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d514c:	4770      	bx	lr

000d514e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d514e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5150:	7805      	ldrb	r5, [r0, #0]
}

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5152:	4604      	mov	r4, r0
  bool negative = *term == '-';
  if (negative) ++term;
   d5154:	2d2d      	cmp	r5, #45	; 0x2d
   d5156:	bf08      	it	eq
   d5158:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d515a:	4620      	mov	r0, r4
   d515c:	f003 fdb2 	bl	d8cc4 <atol>
   d5160:	2364      	movs	r3, #100	; 0x64
   d5162:	4358      	muls	r0, r3
   d5164:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5166:	f814 3b01 	ldrb.w	r3, [r4], #1
   d516a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d516e:	2909      	cmp	r1, #9
   d5170:	d9f8      	bls.n	d5164 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5172:	2b2e      	cmp	r3, #46	; 0x2e
   d5174:	d10b      	bne.n	d518e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5176:	7853      	ldrb	r3, [r2, #1]
   d5178:	3b30      	subs	r3, #48	; 0x30
   d517a:	2b09      	cmp	r3, #9
   d517c:	d807      	bhi.n	d518e <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d517e:	210a      	movs	r1, #10
   d5180:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5184:	7893      	ldrb	r3, [r2, #2]
   d5186:	3b30      	subs	r3, #48	; 0x30
   d5188:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d518a:	bf98      	it	ls
   d518c:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d518e:	2d2d      	cmp	r5, #45	; 0x2d
   d5190:	bf08      	it	eq
   d5192:	4240      	negeq	r0, r0
}
   d5194:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5198 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5198:	b538      	push	{r3, r4, r5, lr}
   d519a:	4604      	mov	r4, r0
   d519c:	460d      	mov	r5, r1
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d519e:	f003 fd91 	bl	d8cc4 <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d51a2:	2364      	movs	r3, #100	; 0x64
   d51a4:	fbb0 f2f3 	udiv	r2, r0, r3
   d51a8:	fb03 0012 	mls	r0, r3, r2, r0
   d51ac:	4b11      	ldr	r3, [pc, #68]	; (d51f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d51ae:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
  uint32_t leftOfDecimal = (uint32_t)atol(term);
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d51b0:	4343      	muls	r3, r0
   d51b2:	4620      	mov	r0, r4

  deg.deg = (int16_t)(leftOfDecimal / 100);

  while (isdigit(*term))
   d51b4:	7802      	ldrb	r2, [r0, #0]
   d51b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   d51ba:	2909      	cmp	r1, #9
   d51bc:	4604      	mov	r4, r0
   d51be:	f100 0001 	add.w	r0, r0, #1
   d51c2:	d9f7      	bls.n	d51b4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d51c4:	2a2e      	cmp	r2, #46	; 0x2e
   d51c6:	d10b      	bne.n	d51e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
   d51c8:	490a      	ldr	r1, [pc, #40]	; (d51f4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d51ca:	200a      	movs	r0, #10

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d51cc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   d51d0:	3a30      	subs	r2, #48	; 0x30
   d51d2:	2a09      	cmp	r2, #9
   d51d4:	d804      	bhi.n	d51e0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
    {
      multiplier /= 10;
   d51d6:	fbb1 f1f0 	udiv	r1, r1, r0
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d51da:	fb01 3302 	mla	r3, r1, r2, r3

  while (isdigit(*term))
    ++term;

  if (*term == '.')
    while (isdigit(*++term))
   d51de:	e7f5      	b.n	d51cc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    {
      multiplier /= 10;
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d51e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d51e4:	3301      	adds	r3, #1
   d51e6:	2203      	movs	r2, #3
   d51e8:	fbb3 f3f2 	udiv	r3, r3, r2
   d51ec:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d51ee:	2300      	movs	r3, #0
   d51f0:	722b      	strb	r3, [r5, #8]
   d51f2:	bd38      	pop	{r3, r4, r5, pc}
   d51f4:	00989680 	.word	0x00989680

000d51f8 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d51f8:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d51fa:	4603      	mov	r3, r0
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d51fc:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d51fe:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5202:	6042      	str	r2, [r0, #4]
   d5204:	685a      	ldr	r2, [r3, #4]
   d5206:	6082      	str	r2, [r0, #8]
   d5208:	7a1b      	ldrb	r3, [r3, #8]
   d520a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d520c:	4603      	mov	r3, r0
   d520e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5212:	6102      	str	r2, [r0, #16]
   d5214:	685a      	ldr	r2, [r3, #4]
   d5216:	6142      	str	r2, [r0, #20]
   d5218:	7a1b      	ldrb	r3, [r3, #8]
   d521a:	7603      	strb	r3, [r0, #24]
   d521c:	f000 fc3c 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5220:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
   rawLatData = rawNewLatData;
   rawLngData = rawNewLngData;
   lastCommitTime = millis();
   d5222:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5224:	7063      	strb	r3, [r4, #1]
   d5226:	7023      	strb	r3, [r4, #0]
   d5228:	bd10      	pop	{r4, pc}
   d522a:	0000      	movs	r0, r0
   d522c:	0000      	movs	r0, r0
	...

000d5230 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5230:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5232:	2300      	movs	r3, #0
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5234:	4604      	mov	r4, r0
   updated = false;
   d5236:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5238:	6880      	ldr	r0, [r0, #8]
   d523a:	f003 fab7 	bl	d87ac <__aeabi_ui2d>
   d523e:	a30e      	add	r3, pc, #56	; (adr r3, d5278 <_ZN15TinyGPSLocation3latEv+0x48>)
   d5240:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5244:	f003 fc52 	bl	d8aec <__aeabi_ddiv>
   d5248:	4606      	mov	r6, r0
   d524a:	88a0      	ldrh	r0, [r4, #4]
   d524c:	460f      	mov	r7, r1
   d524e:	f003 fabd 	bl	d87cc <__aeabi_i2d>
   d5252:	460b      	mov	r3, r1
   d5254:	4602      	mov	r2, r0
   d5256:	4639      	mov	r1, r7
   d5258:	4630      	mov	r0, r6
   d525a:	f003 f96b 	bl	d8534 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d525e:	7b23      	ldrb	r3, [r4, #12]
   d5260:	b11b      	cbz	r3, d526a <_ZN15TinyGPSLocation3latEv+0x3a>
   d5262:	4602      	mov	r2, r0
   d5264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5268:	e001      	b.n	d526e <_ZN15TinyGPSLocation3latEv+0x3e>
   d526a:	4602      	mov	r2, r0
   d526c:	460b      	mov	r3, r1
}
   d526e:	ec43 2b10 	vmov	d0, r2, r3
   d5272:	bdd0      	pop	{r4, r6, r7, pc}
   d5274:	f3af 8000 	nop.w
   d5278:	00000000 	.word	0x00000000
   d527c:	41cdcd65 	.word	0x41cdcd65

000d5280 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5280:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5282:	2300      	movs	r3, #0
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   return rawLatData.negative ? -ret : ret;
}

double TinyGPSLocation::lng()
{
   d5284:	4604      	mov	r4, r0
   updated = false;
   d5286:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5288:	6940      	ldr	r0, [r0, #20]
   d528a:	f003 fa8f 	bl	d87ac <__aeabi_ui2d>
   d528e:	a30e      	add	r3, pc, #56	; (adr r3, d52c8 <_ZN15TinyGPSLocation3lngEv+0x48>)
   d5290:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5294:	f003 fc2a 	bl	d8aec <__aeabi_ddiv>
   d5298:	4606      	mov	r6, r0
   d529a:	8a20      	ldrh	r0, [r4, #16]
   d529c:	460f      	mov	r7, r1
   d529e:	f003 fa95 	bl	d87cc <__aeabi_i2d>
   d52a2:	460b      	mov	r3, r1
   d52a4:	4602      	mov	r2, r0
   d52a6:	4639      	mov	r1, r7
   d52a8:	4630      	mov	r0, r6
   d52aa:	f003 f943 	bl	d8534 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d52ae:	7e23      	ldrb	r3, [r4, #24]
   d52b0:	b11b      	cbz	r3, d52ba <_ZN15TinyGPSLocation3lngEv+0x3a>
   d52b2:	4602      	mov	r2, r0
   d52b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d52b8:	e001      	b.n	d52be <_ZN15TinyGPSLocation3lngEv+0x3e>
   d52ba:	4602      	mov	r2, r0
   d52bc:	460b      	mov	r3, r1
}
   d52be:	ec43 2b10 	vmov	d0, r2, r3
   d52c2:	bdd0      	pop	{r4, r6, r7, pc}
   d52c4:	f3af 8000 	nop.w
   d52c8:	00000000 	.word	0x00000000
   d52cc:	41cdcd65 	.word	0x41cdcd65

000d52d0 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d52d0:	b510      	push	{r4, lr}
   date = newDate;
   d52d2:	6883      	ldr	r3, [r0, #8]
   d52d4:	6043      	str	r3, [r0, #4]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
   d52d6:	4604      	mov	r4, r0
   d52d8:	f000 fbde 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   date = newDate;
   lastCommitTime = millis();
   valid = updated = true;
   d52dc:	2301      	movs	r3, #1
}

void TinyGPSDate::commit()
{
   date = newDate;
   lastCommitTime = millis();
   d52de:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d52e0:	7063      	strb	r3, [r4, #1]
   d52e2:	7023      	strb	r3, [r4, #0]
   d52e4:	bd10      	pop	{r4, pc}

000d52e6 <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
   d52e6:	b510      	push	{r4, lr}
   time = newTime;
   d52e8:	6883      	ldr	r3, [r0, #8]
   d52ea:	6043      	str	r3, [r0, #4]
   lastCommitTime = millis();
   valid = updated = true;
}

void TinyGPSTime::commit()
{
   d52ec:	4604      	mov	r4, r0
   d52ee:	f000 fbd3 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   time = newTime;
   lastCommitTime = millis();
   valid = updated = true;
   d52f2:	2301      	movs	r3, #1
}

void TinyGPSTime::commit()
{
   time = newTime;
   lastCommitTime = millis();
   d52f4:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d52f6:	7063      	strb	r3, [r4, #1]
   d52f8:	7023      	strb	r3, [r4, #0]
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term)
{
   d52fc:	b510      	push	{r4, lr}
   d52fe:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5300:	4608      	mov	r0, r1
   d5302:	f7ff ff24 	bl	d514e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5306:	60a0      	str	r0, [r4, #8]
   d5308:	bd10      	pop	{r4, pc}

000d530a <_ZN11TinyGPSDate7setDateEPKc>:
}

void TinyGPSDate::setDate(const char *term)
{
   d530a:	b510      	push	{r4, lr}
   d530c:	4604      	mov	r4, r0
   newDate = atol(term);
   d530e:	4608      	mov	r0, r1
   d5310:	f003 fcd8 	bl	d8cc4 <atol>
   d5314:	60a0      	str	r0, [r4, #8]
   d5316:	bd10      	pop	{r4, pc}

000d5318 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5318:	b510      	push	{r4, lr}
   val = newval;
   d531a:	68c3      	ldr	r3, [r0, #12]
   d531c:	6083      	str	r3, [r0, #8]
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d531e:	4604      	mov	r4, r0
   d5320:	f000 fbba 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d5324:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
   val = newval;
   lastCommitTime = millis();
   d5326:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5328:	7063      	strb	r3, [r4, #1]
   d532a:	7023      	strb	r3, [r4, #0]
   d532c:	bd10      	pop	{r4, pc}

000d532e <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term)
{
   d532e:	b510      	push	{r4, lr}
   d5330:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5332:	4608      	mov	r0, r1
   d5334:	f7ff ff0b 	bl	d514e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5338:	60e0      	str	r0, [r4, #12]
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN14TinyGPSInteger6commitEv>:
}

void TinyGPSInteger::commit()
{
   d533c:	b510      	push	{r4, lr}
   val = newval;
   d533e:	68c3      	ldr	r3, [r0, #12]
   d5340:	6083      	str	r3, [r0, #8]
{
   newval = TinyGPSPlus::parseDecimal(term);
}

void TinyGPSInteger::commit()
{
   d5342:	4604      	mov	r4, r0
   d5344:	f000 fba8 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   val = newval;
   lastCommitTime = millis();
   valid = updated = true;
   d5348:	2301      	movs	r3, #1
}

void TinyGPSInteger::commit()
{
   val = newval;
   lastCommitTime = millis();
   d534a:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d534c:	7063      	strb	r3, [r4, #1]
   d534e:	7023      	strb	r3, [r4, #0]
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term)
{
   d5352:	b510      	push	{r4, lr}
   d5354:	4604      	mov	r4, r0
   newval = atol(term);
   d5356:	4608      	mov	r0, r1
   d5358:	f003 fcb4 	bl	d8cc4 <atol>
   d535c:	60e0      	str	r0, [r4, #12]
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5360:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d5362:	4601      	mov	r1, r0
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5364:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d5366:	3010      	adds	r0, #16
   d5368:	f003 fd2e 	bl	d8dc8 <strcpy>
   d536c:	f000 fb94 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5370:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
   strcpy(this->buffer, this->stagingBuffer);
   lastCommitTime = millis();
   d5372:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d5374:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   d5378:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d537c:	bd10      	pop	{r4, pc}

000d537e <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d537e:	2210      	movs	r2, #16
   d5380:	f003 bd32 	b.w	d8de8 <strncpy>

000d5384 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d5384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d5386:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
   d538a:	4604      	mov	r4, r0
  // If it's the checksum term, and the checksum checks out, commit
  if (isChecksumTerm)
   d538c:	2d00      	cmp	r5, #0
   d538e:	d067      	beq.n	d5460 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xdc>
  {
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5390:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d5394:	f7ff fecb 	bl	d512e <_ZN11TinyGPSPlus7fromHexEc>
   d5398:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d539c:	4602      	mov	r2, r0
   d539e:	4620      	mov	r0, r4
   d53a0:	f7ff fec5 	bl	d512e <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d53a4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   d53a8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   d53ac:	b2c0      	uxtb	r0, r0
   d53ae:	4283      	cmp	r3, r0
   d53b0:	d14f      	bne.n	d5452 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xce>
    {
      passedChecksumCount++;
   d53b2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d53b6:	3301      	adds	r3, #1
   d53b8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d53bc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d53c0:	b123      	cbz	r3, d53cc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d53c2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d53c6:	3301      	adds	r3, #1
   d53c8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

      switch(curSentenceType)
   d53cc:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d53d0:	b1b3      	cbz	r3, d5400 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7c>
   d53d2:	2b01      	cmp	r3, #1
   d53d4:	d12a      	bne.n	d542c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
      {
      case GPS_SENTENCE_GPRMC:
        date.commit();
   d53d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d53da:	f7ff ff79 	bl	d52d0 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d53de:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d53e2:	f7ff ff80 	bl	d52e6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d53e6:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d53ea:	b1fb      	cbz	r3, d542c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa8>
        {
           location.commit();
   d53ec:	4620      	mov	r0, r4
   d53ee:	f7ff ff03 	bl	d51f8 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d53f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d53f6:	f7ff ff8f 	bl	d5318 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d53fa:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d53fe:	e013      	b.n	d5428 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa4>
        }
        break;
      case GPS_SENTENCE_GPGGA:
        time.commit();
   d5400:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5404:	f7ff ff6f 	bl	d52e6 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5408:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d540c:	b133      	cbz	r3, d541c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x98>
        {
          location.commit();
   d540e:	4620      	mov	r0, r4
   d5410:	f7ff fef2 	bl	d51f8 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d5414:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d5418:	f7ff ff7e 	bl	d5318 <_ZN14TinyGPSDecimal6commitEv>
        }
        satellites.commit();
   d541c:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5420:	f7ff ff8c 	bl	d533c <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d5424:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d5428:	f7ff ff76 	bl	d5318 <_ZN14TinyGPSDecimal6commitEv>
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d542c:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5430:	2e00      	cmp	r6, #0
   d5432:	f000 80c5 	beq.w	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5436:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d543a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d543c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d543e:	f003 fcb9 	bl	d8db4 <strcmp>
   d5442:	2800      	cmp	r0, #0
   d5444:	f040 80bc 	bne.w	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
         p->commit();
   d5448:	4630      	mov	r0, r6
   d544a:	f7ff ff89 	bl	d5360 <_ZN13TinyGPSCustom6commitEv>
        hdop.commit();
        break;
      }

      // Commit all custom listeners of this sentence type
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d544e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5450:	e7ee      	b.n	d5430 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
      return true;
    }

    else
    {
      ++failedChecksumCount;
   d5452:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d5456:	3301      	adds	r3, #1
   d5458:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    }

    return false;
   d545c:	2500      	movs	r5, #0
   d545e:	e0af      	b.n	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
  }

  // the first term determines the sentence type
  if (curTermNumber == 0)
   d5460:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d5464:	bb2a      	cbnz	r2, d54b2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x12e>
  {
    if (!strcmp(term, _GPRMCterm))
   d5466:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d546a:	4956      	ldr	r1, [pc, #344]	; (d55c4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d546c:	4638      	mov	r0, r7
   d546e:	f003 fca1 	bl	d8db4 <strcmp>
   d5472:	b908      	cbnz	r0, d5478 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf4>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d5474:	2301      	movs	r3, #1
   d5476:	e008      	b.n	d548a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
    else if (!strcmp(term, _GPGGAterm))
   d5478:	4953      	ldr	r1, [pc, #332]	; (d55c8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x244>)
   d547a:	4638      	mov	r0, r7
   d547c:	f003 fc9a 	bl	d8db4 <strcmp>
   d5480:	b910      	cbnz	r0, d5488 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d5482:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
   d5486:	e002      	b.n	d548e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10a>
    else
      curSentenceType = GPS_SENTENCE_OTHER;
   d5488:	2302      	movs	r3, #2
   d548a:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d548e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d5492:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d5496:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d549a:	2e00      	cmp	r6, #0
   d549c:	f000 8090 	beq.w	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d54a0:	4639      	mov	r1, r7
   d54a2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d54a4:	f003 fc86 	bl	d8db4 <strcmp>
   d54a8:	2800      	cmp	r0, #0
   d54aa:	f280 8085 	bge.w	d55b8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x234>
   d54ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d54b0:	e7ef      	b.n	d5492 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x10e>
       customCandidates = NULL;

    return false;
  }

  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d54b2:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d54b6:	2902      	cmp	r1, #2
   d54b8:	d066      	beq.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d54ba:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d54be:	2b00      	cmp	r3, #0
   d54c0:	d062      	beq.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    switch(COMBINE(curSentenceType, curTermNumber))
   d54c2:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d54c6:	3a01      	subs	r2, #1
   d54c8:	2a28      	cmp	r2, #40	; 0x28
   d54ca:	d85d      	bhi.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   d54cc:	e8df f002 	tbb	[pc, r2]
   d54d0:	2a232015 	.word	0x2a232015
   d54d4:	534d4631 	.word	0x534d4631
   d54d8:	5c5c5c57 	.word	0x5c5c5c57
   d54dc:	5c5c5c5c 	.word	0x5c5c5c5c
   d54e0:	5c5c5c5c 	.word	0x5c5c5c5c
   d54e4:	5c5c5c5c 	.word	0x5c5c5c5c
   d54e8:	5c5c5c5c 	.word	0x5c5c5c5c
   d54ec:	5c5c5c5c 	.word	0x5c5c5c5c
   d54f0:	23201b15 	.word	0x23201b15
   d54f4:	3c38312a 	.word	0x3c38312a
   d54f8:	40          	.byte	0x40
   d54f9:	00          	.byte	0x00
  {
    case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(GPS_SENTENCE_GPGGA, 1):
      time.setTime(term);
   d54fa:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d54fe:	3048      	adds	r0, #72	; 0x48
   d5500:	f7ff fefc 	bl	d52fc <_ZN11TinyGPSTime7setTimeEPKc>
      break;
   d5504:	e040      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      sentenceHasFix = term[0] == 'A';
   d5506:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d550a:	4243      	negs	r3, r0
   d550c:	4143      	adcs	r3, r0
   d550e:	e029      	b.n	d5564 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1e0>
   valid = updated = true;
}

void TinyGPSLocation::setLatitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d5510:	f100 011c 	add.w	r1, r0, #28
   d5514:	e008      	b.n	d5528 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a4>
    case COMBINE(GPS_SENTENCE_GPGGA, 2):
      location.setLatitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(GPS_SENTENCE_GPGGA, 3):
      location.rawNewLatData.negative = term[0] == 'S';
   d5516:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d551a:	424b      	negs	r3, r1
   d551c:	414b      	adcs	r3, r1
   d551e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d5522:	e031      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5524:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d5528:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d552c:	f7ff fe34 	bl	d5198 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
   d5530:	e02a      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 4):
      location.setLongitude(term);
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(GPS_SENTENCE_GPGGA, 5):
      location.rawNewLngData.negative = term[0] == 'W';
   d5532:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d5536:	4253      	negs	r3, r2
   d5538:	4153      	adcs	r3, r2
   d553a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d553e:	e023      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      speed.set(term);
   d5540:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5544:	3058      	adds	r0, #88	; 0x58
   d5546:	e01d      	b.n	d5584 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      course.set(term);
   d5548:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d554c:	3068      	adds	r0, #104	; 0x68
   d554e:	e019      	b.n	d5584 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      date.setDate(term);
   d5550:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5554:	3038      	adds	r0, #56	; 0x38
   d5556:	f7ff fed8 	bl	d530a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d555a:	e015      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      sentenceHasFix = term[0] > '0';
   d555c:	2b30      	cmp	r3, #48	; 0x30
   d555e:	bf94      	ite	ls
   d5560:	2300      	movls	r3, #0
   d5562:	2301      	movhi	r3, #1
   d5564:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d5568:	e00e      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
      satellites.set(term);
   d556a:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d556e:	3088      	adds	r0, #136	; 0x88
   d5570:	f7ff feef 	bl	d5352 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d5574:	e008      	b.n	d5588 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x204>
    case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
      hdop.set(term);
   d5576:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d557a:	3098      	adds	r0, #152	; 0x98
   d557c:	e002      	b.n	d5584 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x200>
      break;
    case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      altitude.set(term);
   d557e:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5582:	3078      	adds	r0, #120	; 0x78
   d5584:	f7ff fed3 	bl	d532e <_ZN14TinyGPSDecimal3setEPKc>
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5588:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
    if (p->termNumber == curTermNumber)
         p->set(term);
   d558c:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5590:	b1b6      	cbz	r6, d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d5592:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d5596:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5598:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d559a:	f003 fc0b 	bl	d8db4 <strcmp>
   d559e:	b978      	cbnz	r0, d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
   d55a0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d55a2:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d55a6:	429a      	cmp	r2, r3
   d55a8:	dc0a      	bgt.n	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
    if (p->termNumber == curTermNumber)
   d55aa:	d103      	bne.n	d55b4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x230>
         p->set(term);
   d55ac:	4639      	mov	r1, r7
   d55ae:	4630      	mov	r0, r6
   d55b0:	f7ff fee5 	bl	d537e <_ZN13TinyGPSCustom3setEPKc>
      altitude.set(term);
      break;
  }

  // Set custom values as needed
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d55b4:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d55b6:	e7eb      	b.n	d5590 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x20c>
    else
      curSentenceType = GPS_SENTENCE_OTHER;

    // Any custom candidates of this sentence type?
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d55b8:	d002      	beq.n	d55c0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>
       customCandidates = NULL;
   d55ba:	2300      	movs	r3, #0
   d55bc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
    if (p->termNumber == curTermNumber)
         p->set(term);

  return false;
}
   d55c0:	4628      	mov	r0, r5
   d55c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d55c4:	000d94a0 	.word	0x000d94a0
   d55c8:	000d94a6 	.word	0x000d94a6

000d55cc <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d55cc:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d55ce:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d55d2:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
  ++encodedCharCount;
   d55d4:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
   d55d8:	4604      	mov	r4, r0
   d55da:	460d      	mov	r5, r1
  ++encodedCharCount;
   d55dc:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

  switch(c)
   d55e0:	d02a      	beq.n	d5638 <_ZN11TinyGPSPlus6encodeEc+0x6c>
   d55e2:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d55e6:	d804      	bhi.n	d55f2 <_ZN11TinyGPSPlus6encodeEc+0x26>
   d55e8:	290a      	cmp	r1, #10
   d55ea:	d00c      	beq.n	d5606 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d55ec:	290d      	cmp	r1, #13
   d55ee:	d132      	bne.n	d5656 <_ZN11TinyGPSPlus6encodeEc+0x8a>
   d55f0:	e009      	b.n	d5606 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d55f2:	292a      	cmp	r1, #42	; 0x2a
   d55f4:	d007      	beq.n	d5606 <_ZN11TinyGPSPlus6encodeEc+0x3a>
   d55f6:	292c      	cmp	r1, #44	; 0x2c
   d55f8:	d12d      	bne.n	d5656 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  {
  case ',': // term terminators
    parity ^= (uint8_t)c;
   d55fa:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d55fe:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d5602:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  case '\r':
  case '\n':
  case '*':
    {
      bool isValidSentence = false;
      if (curTermOffset < sizeof(term))
   d5606:	2b0e      	cmp	r3, #14
   d5608:	f04f 0000 	mov.w	r0, #0
   d560c:	d805      	bhi.n	d561a <_ZN11TinyGPSPlus6encodeEc+0x4e>
      {
        term[curTermOffset] = 0;
   d560e:	4423      	add	r3, r4
   d5610:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d5614:	4620      	mov	r0, r4
   d5616:	f7ff feb5 	bl	d5384 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      }
      ++curTermNumber;
   d561a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d561e:	3301      	adds	r3, #1
   d5620:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d5624:	2300      	movs	r3, #0
   d5626:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d562a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d562e:	425d      	negs	r5, r3
   d5630:	415d      	adcs	r5, r3
   d5632:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
      return isValidSentence;
   d5636:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d5638:	2000      	movs	r0, #0
    parity = 0;
    curSentenceType = GPS_SENTENCE_OTHER;
   d563a:	2302      	movs	r3, #2
      return isValidSentence;
    }
    break;

  case '$': // sentence begin
    curTermNumber = curTermOffset = 0;
   d563c:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
   d5640:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
    parity = 0;
   d5644:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d5648:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    isChecksumTerm = false;
   d564c:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    sentenceHasFix = false;
   d5650:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d5654:	bd38      	pop	{r3, r4, r5, pc}

  default: // ordinary characters
    if (curTermOffset < sizeof(term) - 1)
   d5656:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d5658:	bf9f      	itttt	ls
   d565a:	1c5a      	addls	r2, r3, #1
   d565c:	191b      	addls	r3, r3, r4
   d565e:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d5662:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d5666:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d566a:	b928      	cbnz	r0, d5678 <_ZN11TinyGPSPlus6encodeEc+0xac>
      parity ^= c;
   d566c:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d5670:	404d      	eors	r5, r1
   d5672:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d5676:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d5678:	2000      	movs	r0, #0
  }

  return false;
}
   d567a:	bd38      	pop	{r3, r4, r5, pc}

000d567c <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
   d567c:	f000 ba2c 	b.w	d5ad8 <HAL_Pin_Map>

000d5680 <_Z13writeRegisterhh>:
byte readRegister(byte reg);
void setBit(byte reg, uint8_t bitNumber);
void clearBit(uint8_t reg, uint8_t bitNumber);

void writeRegister(byte reg, byte data)
{
   d5680:	b538      	push	{r3, r4, r5, lr}
   d5682:	460c      	mov	r4, r1
   d5684:	4605      	mov	r5, r0
  Wire.beginTransmission(AccelAddress);
   d5686:	f002 fd1f 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d568a:	211d      	movs	r1, #29
   d568c:	f001 f820 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d5690:	f002 fd1a 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d5694:	6803      	ldr	r3, [r0, #0]
   d5696:	4629      	mov	r1, r5
   d5698:	689b      	ldr	r3, [r3, #8]
   d569a:	4798      	blx	r3
  Wire.write(data);
   d569c:	f002 fd14 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56a0:	6803      	ldr	r3, [r0, #0]
   d56a2:	4621      	mov	r1, r4
   d56a4:	689b      	ldr	r3, [r3, #8]
   d56a6:	4798      	blx	r3
  Wire.endTransmission();
   d56a8:	f002 fd0e 	bl	d80c8 <_Z19__fetch_global_Wirev>
}
   d56ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(byte reg, byte data)
{
  Wire.beginTransmission(AccelAddress);
  Wire.write(reg);
  Wire.write(data);
  Wire.endTransmission();
   d56b0:	f001 b815 	b.w	d66de <_ZN7TwoWire15endTransmissionEv>

000d56b4 <_Z12readRegisterh>:
}

byte readRegister(byte reg)
{
   d56b4:	b510      	push	{r4, lr}
   d56b6:	4604      	mov	r4, r0
  Wire.beginTransmission(AccelAddress);
   d56b8:	f002 fd06 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56bc:	211d      	movs	r1, #29
   d56be:	f001 f807 	bl	d66d0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(reg);
   d56c2:	f002 fd01 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56c6:	6803      	ldr	r3, [r0, #0]
   d56c8:	4621      	mov	r1, r4
   d56ca:	689b      	ldr	r3, [r3, #8]
   d56cc:	4798      	blx	r3
  Wire.endTransmission();
   d56ce:	f002 fcfb 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56d2:	f001 f804 	bl	d66de <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(AccelAddress, 1);
   d56d6:	f002 fcf7 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56da:	2201      	movs	r2, #1
   d56dc:	211d      	movs	r1, #29
   d56de:	f000 ffee 	bl	d66be <_ZN7TwoWire11requestFromEii>
  return(Wire.read());
   d56e2:	f002 fcf1 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d56e6:	6803      	ldr	r3, [r0, #0]
   d56e8:	695b      	ldr	r3, [r3, #20]
   d56ea:	4798      	blx	r3
}
   d56ec:	b2c0      	uxtb	r0, r0
   d56ee:	bd10      	pop	{r4, pc}

000d56f0 <_Z6setBithh>:

void setBit(byte reg, uint8_t bitNumber)
{
   d56f0:	b538      	push	{r3, r4, r5, lr}
   d56f2:	4604      	mov	r4, r0
   d56f4:	460d      	mov	r5, r1
  uint8_t value = readRegister(reg);
   d56f6:	f7ff ffdd 	bl	d56b4 <_Z12readRegisterh>
  value |= 1 << bitNumber;
   d56fa:	2301      	movs	r3, #1
   d56fc:	fa03 f105 	lsl.w	r1, r3, r5
   d5700:	4301      	orrs	r1, r0
  writeRegister(reg, value);
   d5702:	b2c9      	uxtb	r1, r1
   d5704:	4620      	mov	r0, r4
}
   d5706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void setBit(byte reg, uint8_t bitNumber)
{
  uint8_t value = readRegister(reg);
  value |= 1 << bitNumber;
  writeRegister(reg, value);
   d570a:	f7ff bfb9 	b.w	d5680 <_Z13writeRegisterhh>

000d570e <_GLOBAL__sub_I__Z13writeRegisterhh>:
   d570e:	f000 b9e3 	b.w	d5ad8 <HAL_Pin_Map>
	...

000d5714 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_USB_USART_Init+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	681b      	ldr	r3, [r3, #0]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003024c 	.word	0x0003024c

000d5724 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_USB_USART_Begin+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	685b      	ldr	r3, [r3, #4]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003024c 	.word	0x0003024c

000d5734 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_USB_USART_Available_Data+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	691b      	ldr	r3, [r3, #16]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003024c 	.word	0x0003024c

000d5744 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	695b      	ldr	r3, [r3, #20]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003024c 	.word	0x0003024c

000d5754 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_USB_USART_Receive_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	699b      	ldr	r3, [r3, #24]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003024c 	.word	0x0003024c

000d5764 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_USB_USART_Send_Data+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	69db      	ldr	r3, [r3, #28]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003024c 	.word	0x0003024c

000d5774 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_USB_USART_Flush_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6a1b      	ldr	r3, [r3, #32]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003024c 	.word	0x0003024c

000d5784 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <sock_setsockopt+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	699b      	ldr	r3, [r3, #24]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030238 	.word	0x00030238

000d5794 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <sock_close+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	69db      	ldr	r3, [r3, #28]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030238 	.word	0x00030238

000d57a4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <sock_connect+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6a1b      	ldr	r3, [r3, #32]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030238 	.word	0x00030238

000d57b4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <sock_recv+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030238 	.word	0x00030238

000d57c4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <sock_send+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030238 	.word	0x00030238

000d57d4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <sock_socket+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030238 	.word	0x00030238

000d57e4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <HAL_I2C_Begin+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	68db      	ldr	r3, [r3, #12]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030228 	.word	0x00030228

000d57f4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <HAL_I2C_Request_Data+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	695b      	ldr	r3, [r3, #20]
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030228 	.word	0x00030228

000d5804 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <HAL_I2C_Begin_Transmission+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	699b      	ldr	r3, [r3, #24]
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030228 	.word	0x00030228

000d5814 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <HAL_I2C_End_Transmission+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	69db      	ldr	r3, [r3, #28]
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030228 	.word	0x00030228

000d5824 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <HAL_I2C_Write_Data+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6a1b      	ldr	r3, [r3, #32]
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030228 	.word	0x00030228

000d5834 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b02      	ldr	r3, [pc, #8]	; (d5840 <HAL_I2C_Available_Data+0xc>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	bd08      	pop	{r3, pc}
   d5840:	00030228 	.word	0x00030228

000d5844 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5844:	b508      	push	{r3, lr}
   d5846:	4b02      	ldr	r3, [pc, #8]	; (d5850 <HAL_I2C_Read_Data+0xc>)
   d5848:	681b      	ldr	r3, [r3, #0]
   d584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d584c:	9301      	str	r3, [sp, #4]
   d584e:	bd08      	pop	{r3, pc}
   d5850:	00030228 	.word	0x00030228

000d5854 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5854:	b508      	push	{r3, lr}
   d5856:	4b02      	ldr	r3, [pc, #8]	; (d5860 <HAL_I2C_Peek_Data+0xc>)
   d5858:	681b      	ldr	r3, [r3, #0]
   d585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	bd08      	pop	{r3, pc}
   d5860:	00030228 	.word	0x00030228

000d5864 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5864:	b508      	push	{r3, lr}
   d5866:	4b02      	ldr	r3, [pc, #8]	; (d5870 <HAL_I2C_Flush_Data+0xc>)
   d5868:	681b      	ldr	r3, [r3, #0]
   d586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d586c:	9301      	str	r3, [sp, #4]
   d586e:	bd08      	pop	{r3, pc}
   d5870:	00030228 	.word	0x00030228

000d5874 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5874:	b508      	push	{r3, lr}
   d5876:	4b02      	ldr	r3, [pc, #8]	; (d5880 <HAL_I2C_Is_Enabled+0xc>)
   d5878:	681b      	ldr	r3, [r3, #0]
   d587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d587c:	9301      	str	r3, [sp, #4]
   d587e:	bd08      	pop	{r3, pc}
   d5880:	00030228 	.word	0x00030228

000d5884 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <HAL_I2C_Init+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030228 	.word	0x00030228

000d5894 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <HAL_USART_Init+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	681b      	ldr	r3, [r3, #0]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	0003023c 	.word	0x0003023c

000d58a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <HAL_USART_Write_Data+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	68db      	ldr	r3, [r3, #12]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	0003023c 	.word	0x0003023c

000d58b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <HAL_USART_Available_Data+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	691b      	ldr	r3, [r3, #16]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	0003023c 	.word	0x0003023c

000d58c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <HAL_USART_Read_Data+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	695b      	ldr	r3, [r3, #20]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	0003023c 	.word	0x0003023c

000d58d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <HAL_USART_Peek_Data+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	699b      	ldr	r3, [r3, #24]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	0003023c 	.word	0x0003023c

000d58e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <HAL_USART_Flush_Data+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	69db      	ldr	r3, [r3, #28]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	0003023c 	.word	0x0003023c

000d58f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <HAL_USART_Is_Enabled+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	6a1b      	ldr	r3, [r3, #32]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	0003023c 	.word	0x0003023c

000d5904 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_USART_Available_Data_For_Write+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003023c 	.word	0x0003023c

000d5914 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_USART_BeginConfig+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003023c 	.word	0x0003023c

000d5924 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <inet_inet_ntop+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	695b      	ldr	r3, [r3, #20]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030264 	.word	0x00030264

000d5934 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <inet_htonl+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6a1b      	ldr	r3, [r3, #32]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030264 	.word	0x00030264

000d5944 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <inet_htons+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030264 	.word	0x00030264

000d5954 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <os_thread_is_current+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	689b      	ldr	r3, [r3, #8]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030248 	.word	0x00030248

000d5964 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <os_thread_join+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	691b      	ldr	r3, [r3, #16]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030248 	.word	0x00030248

000d5974 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <os_thread_cleanup+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	695b      	ldr	r3, [r3, #20]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030248 	.word	0x00030248

000d5984 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <os_mutex_create+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030248 	.word	0x00030248

000d5994 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <os_mutex_recursive_create+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030248 	.word	0x00030248

000d59a4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <os_mutex_recursive_lock+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030248 	.word	0x00030248

000d59b4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <os_mutex_recursive_unlock+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030248 	.word	0x00030248

000d59c4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <hal_ble_stack_init+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	689b      	ldr	r3, [r3, #8]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030278 	.word	0x00030278

000d59d4 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <hal_ble_set_callback_on_events+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	695b      	ldr	r3, [r3, #20]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030278 	.word	0x00030278

000d59e4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <hal_ble_gap_set_advertising_data+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030278 	.word	0x00030278

000d59f4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <hal_ble_gap_set_scan_response_data+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030278 	.word	0x00030278

000d5a04 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <hal_ble_gap_start_advertising+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030278 	.word	0x00030278

000d5a14 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b03      	ldr	r3, [pc, #12]	; (d5a24 <hal_ble_gatt_server_add_service+0x10>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5a1e:	9301      	str	r3, [sp, #4]
   d5a20:	bd08      	pop	{r3, pc}
   d5a22:	0000      	.short	0x0000
   d5a24:	00030278 	.word	0x00030278

000d5a28 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b03      	ldr	r3, [pc, #12]	; (d5a38 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d5a32:	9301      	str	r3, [sp, #4]
   d5a34:	bd08      	pop	{r3, pc}
   d5a36:	0000      	.short	0x0000
   d5a38:	00030278 	.word	0x00030278

000d5a3c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b03      	ldr	r3, [pc, #12]	; (d5a4c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d5a46:	9301      	str	r3, [sp, #4]
   d5a48:	bd08      	pop	{r3, pc}
   d5a4a:	0000      	.short	0x0000
   d5a4c:	00030278 	.word	0x00030278

000d5a50 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b03      	ldr	r3, [pc, #12]	; (d5a60 <hal_ble_gatt_client_write_with_response+0x10>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5a5a:	9301      	str	r3, [sp, #4]
   d5a5c:	bd08      	pop	{r3, pc}
   d5a5e:	0000      	.short	0x0000
   d5a60:	00030278 	.word	0x00030278

000d5a64 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b03      	ldr	r3, [pc, #12]	; (d5a74 <hal_ble_gatt_client_write_without_response+0x10>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5a6e:	9301      	str	r3, [sp, #4]
   d5a70:	bd08      	pop	{r3, pc}
   d5a72:	0000      	.short	0x0000
   d5a74:	00030278 	.word	0x00030278

000d5a78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <HAL_RNG_GetRandomNumber+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	685b      	ldr	r3, [r3, #4]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030218 	.word	0x00030218

000d5a88 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <HAL_Delay_Microseconds+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	68db      	ldr	r3, [r3, #12]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030218 	.word	0x00030218

000d5a98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	695b      	ldr	r3, [r3, #20]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030218 	.word	0x00030218

000d5aa8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <if_index_to_name+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	695b      	ldr	r3, [r3, #20]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	0003026c 	.word	0x0003026c

000d5ab8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <HAL_SPI_Init+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	69db      	ldr	r3, [r3, #28]
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030230 	.word	0x00030230

000d5ac8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <HAL_SPI_Is_Enabled+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	6a1b      	ldr	r3, [r3, #32]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030230 	.word	0x00030230

000d5ad8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <HAL_Pin_Map+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	681b      	ldr	r3, [r3, #0]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	0003022c 	.word	0x0003022c

000d5ae8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <HAL_Validate_Pin_Function+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	685b      	ldr	r3, [r3, #4]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	0003022c 	.word	0x0003022c

000d5af8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <HAL_Pin_Mode+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	689b      	ldr	r3, [r3, #8]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	0003022c 	.word	0x0003022c

000d5b08 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <HAL_Get_Pin_Mode+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	68db      	ldr	r3, [r3, #12]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003022c 	.word	0x0003022c

000d5b18 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <HAL_GPIO_Write+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	691b      	ldr	r3, [r3, #16]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003022c 	.word	0x0003022c

000d5b28 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <HAL_GPIO_Read+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	695b      	ldr	r3, [r3, #20]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	0003022c 	.word	0x0003022c

000d5b38 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <HAL_DAC_Write+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	0003022c 	.word	0x0003022c

000d5b48 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <HAL_ADC_Read+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	0003022c 	.word	0x0003022c

000d5b58 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <HAL_PWM_Write_Ext+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	0003022c 	.word	0x0003022c

000d5b68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <netdb_freeaddrinfo+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	689b      	ldr	r3, [r3, #8]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030268 	.word	0x00030268

000d5b78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <netdb_getaddrinfo+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	68db      	ldr	r3, [r3, #12]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030268 	.word	0x00030268

000d5b88 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <LED_SetSignalingColor+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	685b      	ldr	r3, [r3, #4]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030260 	.word	0x00030260

000d5b98 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <LED_Signaling_Start+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	689b      	ldr	r3, [r3, #8]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030260 	.word	0x00030260

000d5ba8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <LED_Signaling_Stop+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	68db      	ldr	r3, [r3, #12]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030260 	.word	0x00030260

000d5bb8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <LED_RGB_IsOverRidden+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	699b      	ldr	r3, [r3, #24]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030260 	.word	0x00030260

000d5bc8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <LED_On+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	69db      	ldr	r3, [r3, #28]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030260 	.word	0x00030260

000d5bd8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <panic_+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030260 	.word	0x00030260

000d5be8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <log_message+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030260 	.word	0x00030260

000d5bf8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <spark_process+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	689b      	ldr	r3, [r3, #8]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030244 	.word	0x00030244

000d5c08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030244 	.word	0x00030244

000d5c18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <network_connect+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	685b      	ldr	r3, [r3, #4]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030240 	.word	0x00030240

000d5c28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <network_connecting+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	689b      	ldr	r3, [r3, #8]
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030240 	.word	0x00030240

000d5c38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <network_disconnect+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	68db      	ldr	r3, [r3, #12]
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030240 	.word	0x00030240

000d5c48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <network_ready+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	691b      	ldr	r3, [r3, #16]
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030240 	.word	0x00030240

000d5c58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <network_on+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	695b      	ldr	r3, [r3, #20]
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030240 	.word	0x00030240

000d5c68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <network_off+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	699b      	ldr	r3, [r3, #24]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030240 	.word	0x00030240

000d5c78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <network_listen+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	69db      	ldr	r3, [r3, #28]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030240 	.word	0x00030240

000d5c88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <network_listening+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	6a1b      	ldr	r3, [r3, #32]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030240 	.word	0x00030240

000d5c98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <network_set_listen_timeout+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	00030240 	.word	0x00030240

000d5ca8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <network_get_listen_timeout+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	00030240 	.word	0x00030240

000d5cb8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <set_system_mode+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	685b      	ldr	r3, [r3, #4]
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	00030220 	.word	0x00030220

000d5cc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <system_delay_ms+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	695b      	ldr	r3, [r3, #20]
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030220 	.word	0x00030220

000d5cd8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b03      	ldr	r3, [pc, #12]	; (d5ce8 <system_ctrl_set_app_request_handler+0x10>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ce2:	9301      	str	r3, [sp, #4]
   d5ce4:	bd08      	pop	{r3, pc}
   d5ce6:	0000      	.short	0x0000
   d5ce8:	00030220 	.word	0x00030220

000d5cec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b03      	ldr	r3, [pc, #12]	; (d5cfc <system_ctrl_set_result+0x10>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5cf6:	9301      	str	r3, [sp, #4]
   d5cf8:	bd08      	pop	{r3, pc}
   d5cfa:	0000      	.short	0x0000
   d5cfc:	00030220 	.word	0x00030220

000d5d00 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b03      	ldr	r3, [pc, #12]	; (d5d10 <system_sleep_pins+0x10>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d5d0a:	9301      	str	r3, [sp, #4]
   d5d0c:	bd08      	pop	{r3, pc}
   d5d0e:	0000      	.short	0x0000
   d5d10:	00030220 	.word	0x00030220

000d5d14 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <malloc+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	681b      	ldr	r3, [r3, #0]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	0003021c 	.word	0x0003021c

000d5d24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <free+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	685b      	ldr	r3, [r3, #4]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	0003021c 	.word	0x0003021c

000d5d34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <realloc+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	689b      	ldr	r3, [r3, #8]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	0003021c 	.word	0x0003021c

000d5d44 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <snprintf+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	69db      	ldr	r3, [r3, #28]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	0003021c 	.word	0x0003021c

000d5d54 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <__errno+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	0003021c 	.word	0x0003021c

000d5d64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d64:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5d66:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5d68:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5d6a:	689b      	ldr	r3, [r3, #8]
   d5d6c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5d6e:	68a3      	ldr	r3, [r4, #8]
   d5d70:	3b01      	subs	r3, #1
   d5d72:	60a3      	str	r3, [r4, #8]
   d5d74:	b92b      	cbnz	r3, d5d82 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
   d5d76:	6823      	ldr	r3, [r4, #0]
   d5d78:	4620      	mov	r0, r4
   d5d7a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5d80:	4718      	bx	r3
   d5d82:	bd10      	pop	{r4, pc}

000d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5d84:	b510      	push	{r4, lr}
   d5d86:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5d88:	6800      	ldr	r0, [r0, #0]
   d5d8a:	b128      	cbz	r0, d5d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5d8c:	6843      	ldr	r3, [r0, #4]
   d5d8e:	3b01      	subs	r3, #1
   d5d90:	6043      	str	r3, [r0, #4]
   d5d92:	b90b      	cbnz	r3, d5d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5d94:	f7ff ffe6 	bl	d5d64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5d98:	4620      	mov	r0, r4
   d5d9a:	bd10      	pop	{r4, pc}

000d5d9c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d9c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d9e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5da0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5da2:	b113      	cbz	r3, d5daa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5da4:	2203      	movs	r2, #3
   d5da6:	4601      	mov	r1, r0
   d5da8:	4798      	blx	r3
    }
   d5daa:	4620      	mov	r0, r4
   d5dac:	bd10      	pop	{r4, pc}

000d5dae <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5dae:	2300      	movs	r3, #0
   d5db0:	461a      	mov	r2, r3
   d5db2:	6840      	ldr	r0, [r0, #4]
   d5db4:	f7ff bf30 	b.w	d5c18 <network_connect>

000d5db8 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5db8:	2200      	movs	r2, #0
   d5dba:	2102      	movs	r1, #2
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	f7ff bf3b 	b.w	d5c38 <network_disconnect>

000d5dc2 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5dc2:	2200      	movs	r2, #0
   d5dc4:	4611      	mov	r1, r2
   d5dc6:	6840      	ldr	r0, [r0, #4]
   d5dc8:	f7ff bf2e 	b.w	d5c28 <network_connecting>

000d5dcc <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5dcc:	2200      	movs	r2, #0
   d5dce:	4611      	mov	r1, r2
   d5dd0:	6840      	ldr	r0, [r0, #4]
   d5dd2:	f7ff bf39 	b.w	d5c48 <network_ready>

000d5dd6 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5dd6:	2300      	movs	r3, #0
   d5dd8:	461a      	mov	r2, r3
   d5dda:	4619      	mov	r1, r3
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7ff bf3b 	b.w	d5c58 <network_on>

000d5de2 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5de2:	2300      	movs	r3, #0
   d5de4:	461a      	mov	r2, r3
   d5de6:	4619      	mov	r1, r3
   d5de8:	6840      	ldr	r0, [r0, #4]
   d5dea:	f7ff bf3d 	b.w	d5c68 <network_off>

000d5dee <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5dee:	2200      	movs	r2, #0
   d5df0:	f081 0101 	eor.w	r1, r1, #1
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7ff bf3f 	b.w	d5c78 <network_listen>

000d5dfa <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	6840      	ldr	r0, [r0, #4]
   d5dfe:	f7ff bf4b 	b.w	d5c98 <network_set_listen_timeout>

000d5e02 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e02:	2200      	movs	r2, #0
   d5e04:	4611      	mov	r1, r2
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	f7ff bf4e 	b.w	d5ca8 <network_get_listen_timeout>

000d5e0c <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e0c:	2200      	movs	r2, #0
   d5e0e:	4611      	mov	r1, r2
   d5e10:	6840      	ldr	r0, [r0, #4]
   d5e12:	f7ff bf39 	b.w	d5c88 <network_listening>

000d5e16 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e1a:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e1c:	b095      	sub	sp, #84	; 0x54
   d5e1e:	4616      	mov	r6, r2
   d5e20:	460d      	mov	r5, r1
   d5e22:	4607      	mov	r7, r0
    IPAddress addr;
   d5e24:	f000 fd2c 	bl	d6880 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e28:	4621      	mov	r1, r4
   d5e2a:	2220      	movs	r2, #32
   d5e2c:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e2e:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e30:	f002 ff8f 	bl	d8d52 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e34:	2340      	movs	r3, #64	; 0x40
   d5e36:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e38:	4621      	mov	r1, r4
   d5e3a:	466b      	mov	r3, sp
   d5e3c:	aa0c      	add	r2, sp, #48	; 0x30
   d5e3e:	4630      	mov	r0, r6
   d5e40:	f7ff fe9a 	bl	d5b78 <netdb_getaddrinfo>
    if (!r) {
   d5e44:	4604      	mov	r4, r0
   d5e46:	2800      	cmp	r0, #0
   d5e48:	d144      	bne.n	d5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e4a:	4602      	mov	r2, r0
   d5e4c:	2101      	movs	r1, #1
   d5e4e:	6868      	ldr	r0, [r5, #4]
   d5e50:	f7ff fefa 	bl	d5c48 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e54:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e58:	4622      	mov	r2, r4
   d5e5a:	6868      	ldr	r0, [r5, #4]
   d5e5c:	f7ff fef4 	bl	d5c48 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e60:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e62:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e64:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e66:	2e00      	cmp	r6, #0
   d5e68:	d034      	beq.n	d5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e6a:	2900      	cmp	r1, #0
   d5e6c:	d132      	bne.n	d5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e6e:	6873      	ldr	r3, [r6, #4]
   d5e70:	2b02      	cmp	r3, #2
   d5e72:	d002      	beq.n	d5e7a <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e74:	2b0a      	cmp	r3, #10
   d5e76:	d009      	beq.n	d5e8c <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5e78:	e02a      	b.n	d5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5e7a:	f1b8 0f00 	cmp.w	r8, #0
   d5e7e:	d027      	beq.n	d5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e80:	6971      	ldr	r1, [r6, #20]
   d5e82:	4638      	mov	r0, r7
   d5e84:	3104      	adds	r1, #4
   d5e86:	f000 fd4b 	bl	d6920 <_ZN9IPAddressaSEPKh>
   d5e8a:	e020      	b.n	d5ece <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e8c:	f1b9 0f00 	cmp.w	r9, #0
   d5e90:	d01e      	beq.n	d5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e92:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e94:	2211      	movs	r2, #17
   d5e96:	a801      	add	r0, sp, #4
   d5e98:	f002 ff5b 	bl	d8d52 <memset>
                    a.v = 6;
   d5e9c:	2306      	movs	r3, #6
   d5e9e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ea2:	ad01      	add	r5, sp, #4
   d5ea4:	f104 0308 	add.w	r3, r4, #8
   d5ea8:	3418      	adds	r4, #24
   d5eaa:	6818      	ldr	r0, [r3, #0]
   d5eac:	6859      	ldr	r1, [r3, #4]
   d5eae:	462a      	mov	r2, r5
   d5eb0:	c203      	stmia	r2!, {r0, r1}
   d5eb2:	3308      	adds	r3, #8
   d5eb4:	42a3      	cmp	r3, r4
   d5eb6:	4615      	mov	r5, r2
   d5eb8:	d1f7      	bne.n	d5eaa <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5eba:	a901      	add	r1, sp, #4
   d5ebc:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ebe:	ad07      	add	r5, sp, #28
   d5ec0:	f000 fcec 	bl	d689c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ec6:	1d3c      	adds	r4, r7, #4
   d5ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eca:	682b      	ldr	r3, [r5, #0]
   d5ecc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ece:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ed0:	69f6      	ldr	r6, [r6, #28]
   d5ed2:	e7c8      	b.n	d5e66 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ed4:	9800      	ldr	r0, [sp, #0]
   d5ed6:	f7ff fe47 	bl	d5b68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5eda:	4638      	mov	r0, r7
   d5edc:	b015      	add	sp, #84	; 0x54
   d5ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ee4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ee4:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ee6:	4a03      	ldr	r2, [pc, #12]	; (d5ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ee8:	601a      	str	r2, [r3, #0]
   d5eea:	2200      	movs	r2, #0
   d5eec:	605a      	str	r2, [r3, #4]
   d5eee:	4770      	bx	lr
   d5ef0:	2003e350 	.word	0x2003e350
   d5ef4:	000d94d8 	.word	0x000d94d8

000d5ef8 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5efa:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5efc:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5efe:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5f02:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5f04:	2201      	movs	r2, #1
   d5f06:	f04f 33ff 	mov.w	r3, #4294967295
   d5f0a:	4621      	mov	r1, r4
   d5f0c:	47a8      	blx	r5
}
   d5f0e:	b003      	add	sp, #12
   d5f10:	bd30      	pop	{r4, r5, pc}

000d5f12 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5f12:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5f14:	6803      	ldr	r3, [r0, #0]
   d5f16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5f18:	f04f 33ff 	mov.w	r3, #4294967295
   d5f1c:	46a4      	mov	ip, r4
}
   d5f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5f22:	4760      	bx	ip

000d5f24 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f26:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5f28:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5f2a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5f2e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5f30:	4621      	mov	r1, r4
   d5f32:	4613      	mov	r3, r2
   d5f34:	2201      	movs	r2, #1
   d5f36:	47a8      	blx	r5
}
   d5f38:	b003      	add	sp, #12
   d5f3a:	bd30      	pop	{r4, r5, pc}

000d5f3c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5f3c:	4770      	bx	lr

000d5f3e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5f3e:	b538      	push	{r3, r4, r5, lr}
   d5f40:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5f46:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5f48:	da05      	bge.n	d5f56 <_ZN9TCPClient9connectedEv+0x18>
   d5f4a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5f4e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5f52:	429a      	cmp	r2, r3
   d5f54:	d001      	beq.n	d5f5a <_ZN9TCPClient9connectedEv+0x1c>
   d5f56:	2501      	movs	r5, #1
   d5f58:	e00b      	b.n	d5f72 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5f5a:	6803      	ldr	r3, [r0, #0]
   d5f5c:	691b      	ldr	r3, [r3, #16]
   d5f5e:	4798      	blx	r3
   d5f60:	2800      	cmp	r0, #0
   d5f62:	bf14      	ite	ne
   d5f64:	2501      	movne	r5, #1
   d5f66:	2500      	moveq	r5, #0
        if (!rv) {
   d5f68:	d103      	bne.n	d5f72 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5f6a:	6823      	ldr	r3, [r4, #0]
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f70:	4798      	blx	r3
        }
    }
    return rv;
}
   d5f72:	4628      	mov	r0, r5
   d5f74:	bd38      	pop	{r3, r4, r5, pc}

000d5f76 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5f76:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5f78:	6818      	ldr	r0, [r3, #0]
}
   d5f7a:	43c0      	mvns	r0, r0
   d5f7c:	0fc0      	lsrs	r0, r0, #31
   d5f7e:	4770      	bx	lr

000d5f80 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5f80:	4770      	bx	lr

000d5f82 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5f82:	2000      	movs	r0, #0
   d5f84:	4770      	bx	lr

000d5f86 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5f86:	b510      	push	{r4, lr}
   d5f88:	2114      	movs	r1, #20
   d5f8a:	4604      	mov	r4, r0
   d5f8c:	f002 f981 	bl	d8292 <_ZdlPvj>
   d5f90:	4620      	mov	r0, r4
   d5f92:	bd10      	pop	{r4, pc}

000d5f94 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5f94:	f7fe b881 	b.w	d409a <_ZdlPv>

000d5f98 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f9c:	4698      	mov	r8, r3
    stop();
   d5f9e:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5fa0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5fa4:	460c      	mov	r4, r1
   d5fa6:	4606      	mov	r6, r0
   d5fa8:	4617      	mov	r7, r2
    stop();
   d5faa:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5fac:	ab12      	add	r3, sp, #72	; 0x48
   d5fae:	2500      	movs	r5, #0
   d5fb0:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5fb4:	462a      	mov	r2, r5
   d5fb6:	4629      	mov	r1, r5
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f7ff fddd 	bl	d5b78 <netdb_getaddrinfo>
   d5fbe:	2800      	cmp	r0, #0
   d5fc0:	db3a      	blt.n	d6038 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5fc2:	9b00      	ldr	r3, [sp, #0]
   d5fc4:	2b00      	cmp	r3, #0
   d5fc6:	d039      	beq.n	d603c <_ZN9TCPClient7connectEPKctm+0xa4>
   d5fc8:	695b      	ldr	r3, [r3, #20]
   d5fca:	2b00      	cmp	r3, #0
   d5fcc:	d036      	beq.n	d603c <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d5fce:	a806      	add	r0, sp, #24
   d5fd0:	f000 fc56 	bl	d6880 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5fd4:	9b00      	ldr	r3, [sp, #0]
   d5fd6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5fd8:	7863      	ldrb	r3, [r4, #1]
   d5fda:	2b02      	cmp	r3, #2
   d5fdc:	d101      	bne.n	d5fe2 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5fde:	1d21      	adds	r1, r4, #4
   d5fe0:	e013      	b.n	d600a <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5fe2:	2b0a      	cmp	r3, #10
   d5fe4:	d114      	bne.n	d6010 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5fe6:	2211      	movs	r2, #17
   d5fe8:	4629      	mov	r1, r5
   d5fea:	a801      	add	r0, sp, #4
   d5fec:	f002 feb1 	bl	d8d52 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5ff0:	68a3      	ldr	r3, [r4, #8]
   d5ff2:	bb33      	cbnz	r3, d6042 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5ff4:	68e3      	ldr	r3, [r4, #12]
   d5ff6:	bb23      	cbnz	r3, d6042 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5ffc:	6925      	ldr	r5, [r4, #16]
   d5ffe:	f7ff fc99 	bl	d5934 <inet_htonl>
   d6002:	4285      	cmp	r5, r0
   d6004:	d11d      	bne.n	d6042 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6006:	f104 0114 	add.w	r1, r4, #20
   d600a:	a806      	add	r0, sp, #24
   d600c:	f000 fc88 	bl	d6920 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6010:	a806      	add	r0, sp, #24
   d6012:	f000 fc55 	bl	d68c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6016:	b188      	cbz	r0, d603c <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d6018:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d601a:	ad07      	add	r5, sp, #28
   d601c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6020:	4b18      	ldr	r3, [pc, #96]	; (d6084 <_ZN9TCPClient7connectEPKctm+0xec>)
   d6022:	930c      	str	r3, [sp, #48]	; 0x30
   d6024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6026:	ac0d      	add	r4, sp, #52	; 0x34
   d6028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d602a:	682b      	ldr	r3, [r5, #0]
   d602c:	7023      	strb	r3, [r4, #0]
   d602e:	463a      	mov	r2, r7
   d6030:	4643      	mov	r3, r8
   d6032:	a90c      	add	r1, sp, #48	; 0x30
   d6034:	4630      	mov	r0, r6
   d6036:	47c8      	blx	r9
   d6038:	4604      	mov	r4, r0
   d603a:	e01c      	b.n	d6076 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d603c:	f04f 34ff 	mov.w	r4, #4294967295
   d6040:	e019      	b.n	d6076 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6042:	f104 0308 	add.w	r3, r4, #8
   d6046:	ad01      	add	r5, sp, #4
   d6048:	3418      	adds	r4, #24
   d604a:	6818      	ldr	r0, [r3, #0]
   d604c:	6859      	ldr	r1, [r3, #4]
   d604e:	462a      	mov	r2, r5
   d6050:	c203      	stmia	r2!, {r0, r1}
   d6052:	3308      	adds	r3, #8
   d6054:	42a3      	cmp	r3, r4
   d6056:	4615      	mov	r5, r2
   d6058:	d1f7      	bne.n	d604a <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d605a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d605c:	a901      	add	r1, sp, #4
   d605e:	a80c      	add	r0, sp, #48	; 0x30
   d6060:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6062:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6066:	f000 fc19 	bl	d689c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d606c:	ac07      	add	r4, sp, #28
   d606e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6070:	682b      	ldr	r3, [r5, #0]
   d6072:	7023      	strb	r3, [r4, #0]
   d6074:	e7cc      	b.n	d6010 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6076:	9800      	ldr	r0, [sp, #0]
   d6078:	f7ff fd76 	bl	d5b68 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d607c:	4620      	mov	r0, r4
   d607e:	b013      	add	sp, #76	; 0x4c
   d6080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6084:	000d9628 	.word	0x000d9628

000d6088 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d608a:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d608c:	2200      	movs	r2, #0
   d608e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6090:	9202      	str	r2, [sp, #8]
   d6092:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6094:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6096:	4604      	mov	r4, r0
   d6098:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d609a:	d008      	beq.n	d60ae <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d609c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d60a0:	fbb3 f1f2 	udiv	r1, r3, r2
   d60a4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d60a6:	fb02 3111 	mls	r1, r2, r1, r3
   d60aa:	434a      	muls	r2, r1
   d60ac:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d60ae:	6960      	ldr	r0, [r4, #20]
   d60b0:	2308      	movs	r3, #8
   d60b2:	9300      	str	r3, [sp, #0]
   d60b4:	f241 0205 	movw	r2, #4101	; 0x1005
   d60b8:	446b      	add	r3, sp
   d60ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d60be:	6800      	ldr	r0, [r0, #0]
   d60c0:	f7ff fb60 	bl	d5784 <sock_setsockopt>
    if (ret < 0) {
   d60c4:	2800      	cmp	r0, #0
   d60c6:	db08      	blt.n	d60da <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d60c8:	6960      	ldr	r0, [r4, #20]
   d60ca:	2300      	movs	r3, #0
   d60cc:	4632      	mov	r2, r6
   d60ce:	4629      	mov	r1, r5
   d60d0:	6800      	ldr	r0, [r0, #0]
   d60d2:	f7ff fb77 	bl	d57c4 <sock_send>
    if (ret < 0) {
   d60d6:	2800      	cmp	r0, #0
   d60d8:	da04      	bge.n	d60e4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d60da:	f7ff fe3b 	bl	d5d54 <__errno>
   d60de:	6803      	ldr	r3, [r0, #0]
   d60e0:	6063      	str	r3, [r4, #4]
   d60e2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d60e4:	b004      	add	sp, #16
   d60e6:	bd70      	pop	{r4, r5, r6, pc}

000d60e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60e8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60ea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60ec:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d60ee:	689b      	ldr	r3, [r3, #8]
   d60f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60f2:	68a3      	ldr	r3, [r4, #8]
   d60f4:	3b01      	subs	r3, #1
   d60f6:	60a3      	str	r3, [r4, #8]
   d60f8:	b92b      	cbnz	r3, d6106 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d60fa:	6823      	ldr	r3, [r4, #0]
   d60fc:	4620      	mov	r0, r4
   d60fe:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6104:	4718      	bx	r3
   d6106:	bd10      	pop	{r4, pc}

000d6108 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6108:	b570      	push	{r4, r5, r6, lr}
   d610a:	4604      	mov	r4, r0
   d610c:	694d      	ldr	r5, [r1, #20]
   d610e:	4b05      	ldr	r3, [pc, #20]	; (d6124 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6110:	f844 3b04 	str.w	r3, [r4], #4
   d6114:	358c      	adds	r5, #140	; 0x8c
   d6116:	4606      	mov	r6, r0
   d6118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d611c:	682b      	ldr	r3, [r5, #0]
   d611e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6120:	4630      	mov	r0, r6
   d6122:	bd70      	pop	{r4, r5, r6, pc}
   d6124:	000d9628 	.word	0x000d9628

000d6128 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6128:	b510      	push	{r4, lr}
   d612a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d612c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6130:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6134:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6136:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6138:	d005      	beq.n	d6146 <_ZN9TCPClient4peekEv+0x1e>
   d613a:	6962      	ldr	r2, [r4, #20]
   d613c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6140:	4413      	add	r3, r2
   d6142:	7918      	ldrb	r0, [r3, #4]
   d6144:	bd10      	pop	{r4, pc}
   d6146:	6803      	ldr	r3, [r0, #0]
   d6148:	691b      	ldr	r3, [r3, #16]
   d614a:	4798      	blx	r3
   d614c:	2800      	cmp	r0, #0
   d614e:	d1f4      	bne.n	d613a <_ZN9TCPClient4peekEv+0x12>
   d6150:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6154:	bd10      	pop	{r4, pc}

000d6156 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6156:	b510      	push	{r4, lr}
   d6158:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d615a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d615e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6162:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6164:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6166:	d008      	beq.n	d617a <_ZN9TCPClient4readEv+0x24>
   d6168:	6962      	ldr	r2, [r4, #20]
   d616a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d616e:	1c59      	adds	r1, r3, #1
   d6170:	4413      	add	r3, r2
   d6172:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6176:	7918      	ldrb	r0, [r3, #4]
   d6178:	bd10      	pop	{r4, pc}
   d617a:	6803      	ldr	r3, [r0, #0]
   d617c:	691b      	ldr	r3, [r3, #16]
   d617e:	4798      	blx	r3
   d6180:	2800      	cmp	r0, #0
   d6182:	d1f1      	bne.n	d6168 <_ZN9TCPClient4readEv+0x12>
   d6184:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6188:	bd10      	pop	{r4, pc}

000d618a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d618a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d618c:	6943      	ldr	r3, [r0, #20]
   d618e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6190:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6194:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6198:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d619a:	4605      	mov	r5, r0
   d619c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d619e:	d106      	bne.n	d61ae <_ZN9TCPClient4readEPhj+0x24>
   d61a0:	6803      	ldr	r3, [r0, #0]
   d61a2:	691b      	ldr	r3, [r3, #16]
   d61a4:	4798      	blx	r3
   d61a6:	b910      	cbnz	r0, d61ae <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d61a8:	f04f 34ff 	mov.w	r4, #4294967295
   d61ac:	e014      	b.n	d61d8 <_ZN9TCPClient4readEPhj+0x4e>
   d61ae:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d61b0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d61b4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d61b8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d61ba:	42bc      	cmp	r4, r7
   d61bc:	bf28      	it	cs
   d61be:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d61c0:	4419      	add	r1, r3
   d61c2:	4622      	mov	r2, r4
   d61c4:	3104      	adds	r1, #4
   d61c6:	4630      	mov	r0, r6
   d61c8:	f002 fd9d 	bl	d8d06 <memcpy>
   d61cc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d61ce:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d61d2:	4423      	add	r3, r4
   d61d4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d61d8:	4620      	mov	r0, r4
   d61da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61dc <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d61dc:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d61de:	2300      	movs	r3, #0
   d61e0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d61e4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d61e6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d61ea:	4770      	bx	lr

000d61ec <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d61ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d61f0:	4698      	mov	r8, r3
    stop();
   d61f2:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d61f4:	460d      	mov	r5, r1
   d61f6:	b08a      	sub	sp, #40	; 0x28
    stop();
   d61f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d61fa:	4606      	mov	r6, r0
   d61fc:	4617      	mov	r7, r2
    stop();
   d61fe:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6200:	7d2b      	ldrb	r3, [r5, #20]
   d6202:	6974      	ldr	r4, [r6, #20]
   d6204:	2b04      	cmp	r3, #4
   d6206:	bf0c      	ite	eq
   d6208:	2002      	moveq	r0, #2
   d620a:	200a      	movne	r0, #10
   d620c:	2206      	movs	r2, #6
   d620e:	2101      	movs	r1, #1
   d6210:	f7ff fae0 	bl	d57d4 <sock_socket>
   d6214:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d6216:	6973      	ldr	r3, [r6, #20]
   d6218:	681c      	ldr	r4, [r3, #0]
   d621a:	2c00      	cmp	r4, #0
   d621c:	db5b      	blt.n	d62d6 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d621e:	4630      	mov	r0, r6
   d6220:	f7ff ffdc 	bl	d61dc <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6224:	f1b8 0f00 	cmp.w	r8, #0
   d6228:	d017      	beq.n	d625a <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d622a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d622c:	a903      	add	r1, sp, #12
   d622e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6232:	9303      	str	r3, [sp, #12]
   d6234:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6238:	f7ff fc36 	bl	d5aa8 <if_index_to_name>
   d623c:	2800      	cmp	r0, #0
   d623e:	db49      	blt.n	d62d4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d6240:	6970      	ldr	r0, [r6, #20]
   d6242:	2306      	movs	r3, #6
   d6244:	9300      	str	r3, [sp, #0]
   d6246:	f241 020b 	movw	r2, #4107	; 0x100b
   d624a:	ab03      	add	r3, sp, #12
   d624c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6250:	6800      	ldr	r0, [r0, #0]
   d6252:	f7ff fa97 	bl	d5784 <sock_setsockopt>
   d6256:	2800      	cmp	r0, #0
   d6258:	db3c      	blt.n	d62d4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d625a:	241c      	movs	r4, #28
   d625c:	4622      	mov	r2, r4
   d625e:	2100      	movs	r1, #0
   d6260:	a803      	add	r0, sp, #12
   d6262:	f002 fd76 	bl	d8d52 <memset>
    if (ip.version() == 4) {
   d6266:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6268:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d626c:	2b04      	cmp	r3, #4
   d626e:	d10c      	bne.n	d628a <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6270:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6272:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6274:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6278:	f7ff fb64 	bl	d5944 <inet_htons>
   d627c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6280:	6868      	ldr	r0, [r5, #4]
   d6282:	f7ff fb57 	bl	d5934 <inet_htonl>
   d6286:	9004      	str	r0, [sp, #16]
   d6288:	e013      	b.n	d62b2 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d628a:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d628c:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d628e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6292:	f7ff fb57 	bl	d5944 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6296:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6298:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d629c:	1d2b      	adds	r3, r5, #4
   d629e:	f105 0714 	add.w	r7, r5, #20
   d62a2:	6818      	ldr	r0, [r3, #0]
   d62a4:	6859      	ldr	r1, [r3, #4]
   d62a6:	4622      	mov	r2, r4
   d62a8:	c203      	stmia	r2!, {r0, r1}
   d62aa:	3308      	adds	r3, #8
   d62ac:	42bb      	cmp	r3, r7
   d62ae:	4614      	mov	r4, r2
   d62b0:	d1f7      	bne.n	d62a2 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d62b2:	6973      	ldr	r3, [r6, #20]
   d62b4:	221c      	movs	r2, #28
   d62b6:	a903      	add	r1, sp, #12
   d62b8:	6818      	ldr	r0, [r3, #0]
   d62ba:	f7ff fa73 	bl	d57a4 <sock_connect>
   d62be:	2800      	cmp	r0, #0
   d62c0:	db08      	blt.n	d62d4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d62c2:	1d2c      	adds	r4, r5, #4
   d62c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d62c6:	6976      	ldr	r6, [r6, #20]
   d62c8:	368c      	adds	r6, #140	; 0x8c
   d62ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d62cc:	6823      	ldr	r3, [r4, #0]
   d62ce:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d62d0:	2401      	movs	r4, #1
   d62d2:	e004      	b.n	d62de <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d62d4:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d62d6:	6833      	ldr	r3, [r6, #0]
   d62d8:	4630      	mov	r0, r6
   d62da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62dc:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d62de:	4620      	mov	r0, r4
   d62e0:	b00a      	add	sp, #40	; 0x28
   d62e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d62e6 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d62e6:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d62e8:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d62ea:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d62ec:	6818      	ldr	r0, [r3, #0]
   d62ee:	2800      	cmp	r0, #0
   d62f0:	db01      	blt.n	d62f6 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d62f2:	f7ff fa4f 	bl	d5794 <sock_close>
   d62f6:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d62f8:	f04f 32ff 	mov.w	r2, #4294967295
   d62fc:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d62fe:	6960      	ldr	r0, [r4, #20]
   d6300:	2211      	movs	r2, #17
   d6302:	2100      	movs	r1, #0
   d6304:	308c      	adds	r0, #140	; 0x8c
   d6306:	f002 fd24 	bl	d8d52 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d630a:	4620      	mov	r0, r4
}
   d630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6310:	f7ff bf64 	b.w	d61dc <_ZN9TCPClient12flush_bufferEv>

000d6314 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6314:	b530      	push	{r4, r5, lr}
   d6316:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6318:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d631c:	b08b      	sub	sp, #44	; 0x2c
   d631e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6320:	b11b      	cbz	r3, d632a <_ZN9TCPClient9availableEv+0x16>
   d6322:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6326:	429a      	cmp	r2, r3
   d6328:	d040      	beq.n	d63ac <_ZN9TCPClient9availableEv+0x98>
   d632a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d632c:	6818      	ldr	r0, [r3, #0]
   d632e:	2800      	cmp	r0, #0
   d6330:	db3f      	blt.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6332:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6336:	2d7f      	cmp	r5, #127	; 0x7f
   d6338:	d83b      	bhi.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d633a:	1d19      	adds	r1, r3, #4
   d633c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6340:	2308      	movs	r3, #8
   d6342:	4429      	add	r1, r5
   d6344:	f7ff fa36 	bl	d57b4 <sock_recv>
            if (ret > 0) {
   d6348:	2800      	cmp	r0, #0
   d634a:	dd0c      	ble.n	d6366 <_ZN9TCPClient9availableEv+0x52>
   d634c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d634e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6352:	b90a      	cbnz	r2, d6358 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6354:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6358:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d635a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d635e:	4418      	add	r0, r3
   d6360:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6364:	e025      	b.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6366:	f7ff fcf5 	bl	d5d54 <__errno>
   d636a:	6803      	ldr	r3, [r0, #0]
   d636c:	2b0b      	cmp	r3, #11
   d636e:	d020      	beq.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
   d6370:	f7ff fcf0 	bl	d5d54 <__errno>
   d6374:	6803      	ldr	r3, [r0, #0]
   d6376:	2b0b      	cmp	r3, #11
   d6378:	d01b      	beq.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d637a:	2320      	movs	r3, #32
   d637c:	2500      	movs	r5, #0
   d637e:	9302      	str	r3, [sp, #8]
   d6380:	9503      	str	r5, [sp, #12]
   d6382:	f7ff fce7 	bl	d5d54 <__errno>
   d6386:	6803      	ldr	r3, [r0, #0]
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	4b0e      	ldr	r3, [pc, #56]	; (d63c4 <_ZN9TCPClient9availableEv+0xb0>)
   d638c:	9300      	str	r3, [sp, #0]
   d638e:	aa02      	add	r2, sp, #8
   d6390:	462b      	mov	r3, r5
   d6392:	490d      	ldr	r1, [pc, #52]	; (d63c8 <_ZN9TCPClient9availableEv+0xb4>)
   d6394:	2032      	movs	r0, #50	; 0x32
   d6396:	f7ff fc27 	bl	d5be8 <log_message>
                    sock_close(d_->sock);
   d639a:	6963      	ldr	r3, [r4, #20]
   d639c:	6818      	ldr	r0, [r3, #0]
   d639e:	f7ff f9f9 	bl	d5794 <sock_close>
   d63a2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d63a4:	f04f 32ff 	mov.w	r2, #4294967295
   d63a8:	601a      	str	r2, [r3, #0]
   d63aa:	e002      	b.n	d63b2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d63ac:	f7ff ff16 	bl	d61dc <_ZN9TCPClient12flush_bufferEv>
   d63b0:	e7bb      	b.n	d632a <_ZN9TCPClient9availableEv+0x16>
   d63b2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d63b4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d63b8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d63bc:	1a18      	subs	r0, r3, r0
}
   d63be:	b00b      	add	sp, #44	; 0x2c
   d63c0:	bd30      	pop	{r4, r5, pc}
   d63c2:	bf00      	nop
   d63c4:	000d9573 	.word	0x000d9573
   d63c8:	000d956c 	.word	0x000d956c

000d63cc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d63cc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d63ce:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d63d0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d63d2:	6001      	str	r1, [r0, #0]
   d63d4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d63d8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d63dc:	3088      	adds	r0, #136	; 0x88
   d63de:	f000 fa4f 	bl	d6880 <_ZN9IPAddressC1Ev>
}
   d63e2:	4620      	mov	r0, r4
   d63e4:	bd10      	pop	{r4, pc}
	...

000d63e8 <_ZN9TCPClientC1Ei>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d63ec:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d63ee:	2300      	movs	r3, #0
   d63f0:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d63f2:	4a14      	ldr	r2, [pc, #80]	; (d6444 <_ZN9TCPClientC1Ei+0x5c>)
   d63f4:	6043      	str	r3, [r0, #4]
   d63f6:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d63f8:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d63fa:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d63fc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d63fe:	20a0      	movs	r0, #160	; 0xa0
   d6400:	460e      	mov	r6, r1
   d6402:	f7fd fe48 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6406:	4605      	mov	r5, r0
   d6408:	b110      	cbz	r0, d6410 <_ZN9TCPClientC1Ei+0x28>
   d640a:	4631      	mov	r1, r6
   d640c:	f7ff ffde 	bl	d63cc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6410:	2014      	movs	r0, #20
   d6412:	f7fd fe40 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6416:	4603      	mov	r3, r0
   d6418:	b128      	cbz	r0, d6426 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d641a:	2201      	movs	r2, #1
   d641c:	6042      	str	r2, [r0, #4]
   d641e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6420:	4a09      	ldr	r2, [pc, #36]	; (d6448 <_ZN9TCPClientC1Ei+0x60>)
   d6422:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6424:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6426:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6428:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d642a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d642c:	b128      	cbz	r0, d643a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d642e:	6843      	ldr	r3, [r0, #4]
   d6430:	3b01      	subs	r3, #1
   d6432:	6043      	str	r3, [r0, #4]
   d6434:	b90b      	cbnz	r3, d643a <_ZN9TCPClientC1Ei+0x52>
   d6436:	f7ff fe57 	bl	d60e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d643a:	4620      	mov	r0, r4
   d643c:	f7ff fece 	bl	d61dc <_ZN9TCPClient12flush_bufferEv>
}
   d6440:	4620      	mov	r0, r4
   d6442:	bd70      	pop	{r4, r5, r6, pc}
   d6444:	000d9528 	.word	0x000d9528
   d6448:	000d950c 	.word	0x000d950c

000d644c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d644c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d644e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6452:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6454:	f7ff ffc8 	bl	d63e8 <_ZN9TCPClientC1Ei>
}
   d6458:	4620      	mov	r0, r4
   d645a:	bd10      	pop	{r4, pc}

000d645c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d645c:	b510      	push	{r4, lr}
   d645e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6460:	6800      	ldr	r0, [r0, #0]
   d6462:	2800      	cmp	r0, #0
   d6464:	db01      	blt.n	d646a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6466:	f7ff f995 	bl	d5794 <sock_close>
    }
}
   d646a:	4620      	mov	r0, r4
   d646c:	bd10      	pop	{r4, pc}

000d646e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d646e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6470:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6472:	4620      	mov	r0, r4
   d6474:	f7ff fff2 	bl	d645c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6478:	b124      	cbz	r4, d6484 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d647a:	4620      	mov	r0, r4
   d647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6480:	f7fd be0b 	b.w	d409a <_ZdlPv>
   d6484:	bd10      	pop	{r4, pc}

000d6486 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6486:	2200      	movs	r2, #0
   d6488:	4611      	mov	r1, r2
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7ff bbfc 	b.w	d5c88 <network_listening>

000d6490 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6490:	2200      	movs	r2, #0
   d6492:	4611      	mov	r1, r2
   d6494:	6840      	ldr	r0, [r0, #4]
   d6496:	f7ff bc07 	b.w	d5ca8 <network_get_listen_timeout>

000d649a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d649a:	2200      	movs	r2, #0
   d649c:	6840      	ldr	r0, [r0, #4]
   d649e:	f7ff bbfb 	b.w	d5c98 <network_set_listen_timeout>

000d64a2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d64a2:	2200      	movs	r2, #0
   d64a4:	f081 0101 	eor.w	r1, r1, #1
   d64a8:	6840      	ldr	r0, [r0, #4]
   d64aa:	f7ff bbe5 	b.w	d5c78 <network_listen>

000d64ae <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d64ae:	2300      	movs	r3, #0
   d64b0:	461a      	mov	r2, r3
   d64b2:	4619      	mov	r1, r3
   d64b4:	6840      	ldr	r0, [r0, #4]
   d64b6:	f7ff bbd7 	b.w	d5c68 <network_off>

000d64ba <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d64ba:	2300      	movs	r3, #0
   d64bc:	461a      	mov	r2, r3
   d64be:	4619      	mov	r1, r3
   d64c0:	6840      	ldr	r0, [r0, #4]
   d64c2:	f7ff bbc9 	b.w	d5c58 <network_on>

000d64c6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64c6:	2200      	movs	r2, #0
   d64c8:	4611      	mov	r1, r2
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	f7ff bbbc 	b.w	d5c48 <network_ready>

000d64d0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64d0:	2200      	movs	r2, #0
   d64d2:	4611      	mov	r1, r2
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	f7ff bba7 	b.w	d5c28 <network_connecting>

000d64da <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64da:	2200      	movs	r2, #0
   d64dc:	2102      	movs	r1, #2
   d64de:	6840      	ldr	r0, [r0, #4]
   d64e0:	f7ff bbaa 	b.w	d5c38 <network_disconnect>

000d64e4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64e4:	2300      	movs	r3, #0
   d64e6:	461a      	mov	r2, r3
   d64e8:	6840      	ldr	r0, [r0, #4]
   d64ea:	f7ff bb95 	b.w	d5c18 <network_connect>

000d64ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d64ee:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d64f0:	4605      	mov	r5, r0
   d64f2:	b188      	cbz	r0, d6518 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64f4:	6804      	ldr	r4, [r0, #0]
   d64f6:	b14c      	cbz	r4, d650c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d64f8:	68a3      	ldr	r3, [r4, #8]
   d64fa:	b11b      	cbz	r3, d6504 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64fc:	2203      	movs	r2, #3
   d64fe:	4621      	mov	r1, r4
   d6500:	4620      	mov	r0, r4
   d6502:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6504:	2110      	movs	r1, #16
   d6506:	4620      	mov	r0, r4
   d6508:	f001 fec3 	bl	d8292 <_ZdlPvj>
   d650c:	4628      	mov	r0, r5
   d650e:	2114      	movs	r1, #20
      }
   d6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6514:	f001 bebd 	b.w	d8292 <_ZdlPvj>
   d6518:	bd38      	pop	{r3, r4, r5, pc}

000d651a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d651a:	b110      	cbz	r0, d6522 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d651c:	6803      	ldr	r3, [r0, #0]
   d651e:	685b      	ldr	r3, [r3, #4]
   d6520:	4718      	bx	r3
   d6522:	4770      	bx	lr

000d6524 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6524:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6526:	6803      	ldr	r3, [r0, #0]
   d6528:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d652a:	b1bb      	cbz	r3, d655c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d652c:	6858      	ldr	r0, [r3, #4]
   d652e:	f7ff fa11 	bl	d5954 <os_thread_is_current>
   d6532:	b978      	cbnz	r0, d6554 <_ZN6ThreadD1Ev+0x30>
   d6534:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6536:	7c5a      	ldrb	r2, [r3, #17]
   d6538:	b912      	cbnz	r2, d6540 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d653a:	6858      	ldr	r0, [r3, #4]
   d653c:	f7ff fa12 	bl	d5964 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6540:	6823      	ldr	r3, [r4, #0]
   d6542:	6858      	ldr	r0, [r3, #4]
   d6544:	f7ff fa16 	bl	d5974 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6548:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d654a:	2300      	movs	r3, #0
   d654c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d654e:	b128      	cbz	r0, d655c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6550:	f7ff ffcd 	bl	d64ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6554:	6820      	ldr	r0, [r4, #0]
   d6556:	b108      	cbz	r0, d655c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6558:	f7ff ffc9 	bl	d64ee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d655c:	4620      	mov	r0, r4
   d655e:	bd10      	pop	{r4, pc}

000d6560 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6560:	b538      	push	{r3, r4, r5, lr}
   d6562:	4b0c      	ldr	r3, [pc, #48]	; (d6594 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6564:	6003      	str	r3, [r0, #0]
   d6566:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6568:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d656c:	b108      	cbz	r0, d6572 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d656e:	f7fd fd96 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6572:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6576:	b135      	cbz	r5, d6586 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6578:	4628      	mov	r0, r5
   d657a:	f7ff ffd3 	bl	d6524 <_ZN6ThreadD1Ev>
   d657e:	2104      	movs	r1, #4
   d6580:	4628      	mov	r0, r5
   d6582:	f001 fe86 	bl	d8292 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6586:	68a0      	ldr	r0, [r4, #8]
   d6588:	b108      	cbz	r0, d658e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d658a:	f7ff ffc6 	bl	d651a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d658e:	4620      	mov	r0, r4
   d6590:	bd38      	pop	{r3, r4, r5, pc}
   d6592:	bf00      	nop
   d6594:	000d958c 	.word	0x000d958c

000d6598 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6598:	b538      	push	{r3, r4, r5, lr}
   d659a:	4c0d      	ldr	r4, [pc, #52]	; (d65d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d659c:	4b0d      	ldr	r3, [pc, #52]	; (d65d4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d659e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d65a0:	2500      	movs	r5, #0
   d65a2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d65a4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d65a8:	6063      	str	r3, [r4, #4]
   d65aa:	60a5      	str	r5, [r4, #8]
   d65ac:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d65b0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d65b4:	f7ff f9ee 	bl	d5994 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d65b8:	4b07      	ldr	r3, [pc, #28]	; (d65d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d65ba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d65be:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d65c0:	4620      	mov	r0, r4
   d65c2:	4a06      	ldr	r2, [pc, #24]	; (d65dc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d65c4:	4906      	ldr	r1, [pc, #24]	; (d65e0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d65c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d65ca:	f001 be5d 	b.w	d8288 <__aeabi_atexit>
   d65ce:	bf00      	nop
   d65d0:	2003e358 	.word	0x2003e358
   d65d4:	000d94d8 	.word	0x000d94d8
   d65d8:	000d958c 	.word	0x000d958c
   d65dc:	2003e1e0 	.word	0x2003e1e0
   d65e0:	000d6561 	.word	0x000d6561

000d65e4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d65e4:	4770      	bx	lr

000d65e6 <_ZN8SPIClassD0Ev>:
   d65e6:	b510      	push	{r4, lr}
   d65e8:	2110      	movs	r1, #16
   d65ea:	4604      	mov	r4, r0
   d65ec:	f001 fe51 	bl	d8292 <_ZdlPvj>
   d65f0:	4620      	mov	r0, r4
   d65f2:	bd10      	pop	{r4, pc}

000d65f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d65f4:	b570      	push	{r4, r5, r6, lr}
   d65f6:	4b08      	ldr	r3, [pc, #32]	; (d6618 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d65f8:	6003      	str	r3, [r0, #0]
   d65fa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d65fc:	2500      	movs	r5, #0
   d65fe:	460e      	mov	r6, r1
   d6600:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6604:	f7ff f9be 	bl	d5984 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6608:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d660a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d660c:	f7ff fa54 	bl	d5ab8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6610:	60a5      	str	r5, [r4, #8]
}
   d6612:	4620      	mov	r0, r4
   d6614:	bd70      	pop	{r4, r5, r6, pc}
   d6616:	bf00      	nop
   d6618:	000d95c0 	.word	0x000d95c0

000d661c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d661c:	7900      	ldrb	r0, [r0, #4]
   d661e:	f7ff ba53 	b.w	d5ac8 <HAL_SPI_Is_Enabled>

000d6622 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6622:	4770      	bx	lr

000d6624 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6626:	4606      	mov	r6, r0
   d6628:	4615      	mov	r5, r2
   d662a:	460c      	mov	r4, r1
   d662c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d662e:	42bc      	cmp	r4, r7
   d6630:	d006      	beq.n	d6640 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6632:	6833      	ldr	r3, [r6, #0]
   d6634:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6638:	689b      	ldr	r3, [r3, #8]
   d663a:	4630      	mov	r0, r6
   d663c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d663e:	e7f6      	b.n	d662e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6640:	4628      	mov	r0, r5
   d6642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6644 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6644:	2200      	movs	r2, #0
   d6646:	7c00      	ldrb	r0, [r0, #16]
   d6648:	f7ff b8ec 	b.w	d5824 <HAL_I2C_Write_Data>

000d664c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d664c:	2100      	movs	r1, #0
   d664e:	7c00      	ldrb	r0, [r0, #16]
   d6650:	f7ff b8f0 	b.w	d5834 <HAL_I2C_Available_Data>

000d6654 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6654:	2100      	movs	r1, #0
   d6656:	7c00      	ldrb	r0, [r0, #16]
   d6658:	f7ff b8f4 	b.w	d5844 <HAL_I2C_Read_Data>

000d665c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d665c:	2100      	movs	r1, #0
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7ff b8f8 	b.w	d5854 <HAL_I2C_Peek_Data>

000d6664 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6664:	2100      	movs	r1, #0
   d6666:	7c00      	ldrb	r0, [r0, #16]
   d6668:	f7ff b8fc 	b.w	d5864 <HAL_I2C_Flush_Data>

000d666c <_ZN7TwoWireD0Ev>:
   d666c:	b510      	push	{r4, lr}
   d666e:	2114      	movs	r1, #20
   d6670:	4604      	mov	r4, r0
   d6672:	f001 fe0e 	bl	d8292 <_ZdlPvj>
   d6676:	4620      	mov	r0, r4
   d6678:	bd10      	pop	{r4, pc}
	...

000d667c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d667c:	b510      	push	{r4, lr}
   d667e:	4604      	mov	r4, r0
   d6680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6684:	4608      	mov	r0, r1
   d6686:	60a3      	str	r3, [r4, #8]
   d6688:	2100      	movs	r1, #0
   d668a:	4b04      	ldr	r3, [pc, #16]	; (d669c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d668c:	7420      	strb	r0, [r4, #16]
   d668e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6690:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6692:	f7ff f8f7 	bl	d5884 <HAL_I2C_Init>

}
   d6696:	4620      	mov	r0, r4
   d6698:	bd10      	pop	{r4, pc}
   d669a:	bf00      	nop
   d669c:	000d95d0 	.word	0x000d95d0

000d66a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d66a0:	2300      	movs	r3, #0
   d66a2:	461a      	mov	r2, r3
   d66a4:	4619      	mov	r1, r3
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7ff b89c 	b.w	d57e4 <HAL_I2C_Begin>

000d66ac <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d66ac:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d66ae:	2400      	movs	r4, #0
   d66b0:	7c00      	ldrb	r0, [r0, #16]
   d66b2:	9400      	str	r4, [sp, #0]
   d66b4:	f7ff f89e 	bl	d57f4 <HAL_I2C_Request_Data>
  return result;
}
   d66b8:	b2c0      	uxtb	r0, r0
   d66ba:	b002      	add	sp, #8
   d66bc:	bd10      	pop	{r4, pc}

000d66be <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d66be:	2301      	movs	r3, #1
   d66c0:	b2d2      	uxtb	r2, r2
   d66c2:	b2c9      	uxtb	r1, r1
   d66c4:	f7ff bff2 	b.w	d66ac <_ZN7TwoWire11requestFromEhhh>

000d66c8 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d66c8:	2200      	movs	r2, #0
   d66ca:	7c00      	ldrb	r0, [r0, #16]
   d66cc:	f7ff b89a 	b.w	d5804 <HAL_I2C_Begin_Transmission>

000d66d0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d66d0:	b2c9      	uxtb	r1, r1
   d66d2:	f7ff bff9 	b.w	d66c8 <_ZN7TwoWire17beginTransmissionEh>

000d66d6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d66d6:	2200      	movs	r2, #0
   d66d8:	7c00      	ldrb	r0, [r0, #16]
   d66da:	f7ff b89b 	b.w	d5814 <HAL_I2C_End_Transmission>

000d66de <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d66de:	2101      	movs	r1, #1
   d66e0:	f7ff bff9 	b.w	d66d6 <_ZN7TwoWire15endTransmissionEh>

000d66e4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d66e4:	2100      	movs	r1, #0
   d66e6:	7c00      	ldrb	r0, [r0, #16]
   d66e8:	f7ff b8c4 	b.w	d5874 <HAL_I2C_Is_Enabled>

000d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d66ec:	680b      	ldr	r3, [r1, #0]
   d66ee:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d66f0:	b113      	cbz	r3, d66f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d66f2:	685a      	ldr	r2, [r3, #4]
   d66f4:	3201      	adds	r2, #1
   d66f6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d66f8:	4770      	bx	lr

000d66fa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66fa:	7441      	strb	r1, [r0, #17]
   d66fc:	4770      	bx	lr

000d66fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d66fe:	4770      	bx	lr

000d6700 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6700:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6702:	2100      	movs	r1, #0
   d6704:	7c00      	ldrb	r0, [r0, #16]
   d6706:	f7ff f825 	bl	d5754 <HAL_USB_USART_Receive_Data>
}
   d670a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d670e:	bf28      	it	cs
   d6710:	f04f 30ff 	movcs.w	r0, #4294967295
   d6714:	bd08      	pop	{r3, pc}

000d6716 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6716:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6718:	2101      	movs	r1, #1
   d671a:	7c00      	ldrb	r0, [r0, #16]
   d671c:	f7ff f81a 	bl	d5754 <HAL_USB_USART_Receive_Data>
}
   d6720:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6724:	bf28      	it	cs
   d6726:	f04f 30ff 	movcs.w	r0, #4294967295
   d672a:	bd08      	pop	{r3, pc}

000d672c <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d672c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d672e:	7c00      	ldrb	r0, [r0, #16]
   d6730:	f7ff f808 	bl	d5744 <HAL_USB_USART_Available_Data_For_Write>
}
   d6734:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6738:	bd08      	pop	{r3, pc}

000d673a <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d673a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d673c:	7c00      	ldrb	r0, [r0, #16]
   d673e:	f7fe fff9 	bl	d5734 <HAL_USB_USART_Available_Data>
}
   d6742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6746:	bd08      	pop	{r3, pc}

000d6748 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6748:	7c00      	ldrb	r0, [r0, #16]
   d674a:	f7ff b813 	b.w	d5774 <HAL_USB_USART_Flush_Data>

000d674e <_ZN9USBSerialD0Ev>:
   d674e:	b510      	push	{r4, lr}
   d6750:	2114      	movs	r1, #20
   d6752:	4604      	mov	r4, r0
   d6754:	f001 fd9d 	bl	d8292 <_ZdlPvj>
   d6758:	4620      	mov	r0, r4
   d675a:	bd10      	pop	{r4, pc}

000d675c <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d675c:	b538      	push	{r3, r4, r5, lr}
   d675e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6760:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6762:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6764:	f7fe ffee 	bl	d5744 <HAL_USB_USART_Available_Data_For_Write>
   d6768:	2800      	cmp	r0, #0
   d676a:	dc01      	bgt.n	d6770 <_ZN9USBSerial5writeEh+0x14>
   d676c:	7c60      	ldrb	r0, [r4, #17]
   d676e:	b128      	cbz	r0, d677c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6770:	4629      	mov	r1, r5
   d6772:	7c20      	ldrb	r0, [r4, #16]
   d6774:	f7fe fff6 	bl	d5764 <HAL_USB_USART_Send_Data>
   d6778:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d677c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6780:	b510      	push	{r4, lr}
   d6782:	4604      	mov	r4, r0
   d6784:	2300      	movs	r3, #0
   d6786:	6063      	str	r3, [r4, #4]
   d6788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d678c:	60a3      	str	r3, [r4, #8]
   d678e:	4b05      	ldr	r3, [pc, #20]	; (d67a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6790:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6792:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6794:	4608      	mov	r0, r1
{
  _serial = serial;
   d6796:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6798:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d679a:	4611      	mov	r1, r2
   d679c:	f7fe ffba 	bl	d5714 <HAL_USB_USART_Init>
}
   d67a0:	4620      	mov	r0, r4
   d67a2:	bd10      	pop	{r4, pc}
   d67a4:	000d95f8 	.word	0x000d95f8

000d67a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d67a8:	2200      	movs	r2, #0
   d67aa:	7c00      	ldrb	r0, [r0, #16]
   d67ac:	f7fe bfba 	b.w	d5724 <HAL_USB_USART_Begin>

000d67b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d67b2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d67b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d67b6:	2100      	movs	r1, #0
   d67b8:	f002 facb 	bl	d8d52 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d67bc:	4620      	mov	r0, r4
   d67be:	bd10      	pop	{r4, pc}

000d67c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d67c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67c2:	4d0e      	ldr	r5, [pc, #56]	; (d67fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d67c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d67c6:	a801      	add	r0, sp, #4
   d67c8:	f7ff fff2 	bl	d67b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d67cc:	6829      	ldr	r1, [r5, #0]
   d67ce:	f011 0401 	ands.w	r4, r1, #1
   d67d2:	d110      	bne.n	d67f6 <_Z16_fetch_usbserialv+0x36>
   d67d4:	4628      	mov	r0, r5
   d67d6:	f7fd fc64 	bl	d40a2 <__cxa_guard_acquire>
   d67da:	b160      	cbz	r0, d67f6 <_Z16_fetch_usbserialv+0x36>
   d67dc:	aa01      	add	r2, sp, #4
   d67de:	4621      	mov	r1, r4
   d67e0:	4807      	ldr	r0, [pc, #28]	; (d6800 <_Z16_fetch_usbserialv+0x40>)
   d67e2:	f7ff ffcd 	bl	d6780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d67e6:	4628      	mov	r0, r5
   d67e8:	f7fd fc60 	bl	d40ac <__cxa_guard_release>
   d67ec:	4a05      	ldr	r2, [pc, #20]	; (d6804 <_Z16_fetch_usbserialv+0x44>)
   d67ee:	4906      	ldr	r1, [pc, #24]	; (d6808 <_Z16_fetch_usbserialv+0x48>)
   d67f0:	4803      	ldr	r0, [pc, #12]	; (d6800 <_Z16_fetch_usbserialv+0x40>)
   d67f2:	f001 fd49 	bl	d8288 <__aeabi_atexit>
	return _usbserial;
}
   d67f6:	4802      	ldr	r0, [pc, #8]	; (d6800 <_Z16_fetch_usbserialv+0x40>)
   d67f8:	b007      	add	sp, #28
   d67fa:	bd30      	pop	{r4, r5, pc}
   d67fc:	2003e528 	.word	0x2003e528
   d6800:	2003e52c 	.word	0x2003e52c
   d6804:	2003e1e0 	.word	0x2003e1e0
   d6808:	000d66ff 	.word	0x000d66ff

000d680c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d680c:	4770      	bx	lr

000d680e <_ZN9IPAddressD0Ev>:
   d680e:	b510      	push	{r4, lr}
   d6810:	2118      	movs	r1, #24
   d6812:	4604      	mov	r4, r0
   d6814:	f001 fd3d 	bl	d8292 <_ZdlPvj>
   d6818:	4620      	mov	r0, r4
   d681a:	bd10      	pop	{r4, pc}

000d681c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d681c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d681e:	7d03      	ldrb	r3, [r0, #20]
   d6820:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6822:	b08d      	sub	sp, #52	; 0x34
   d6824:	460e      	mov	r6, r1
   d6826:	f100 0704 	add.w	r7, r0, #4
   d682a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d682e:	d002      	beq.n	d6836 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6830:	f100 0508 	add.w	r5, r0, #8
   d6834:	e018      	b.n	d6868 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6836:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6838:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d683a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d683e:	232f      	movs	r3, #47	; 0x2f
   d6840:	462a      	mov	r2, r5
   d6842:	200a      	movs	r0, #10
   d6844:	f7ff f86e 	bl	d5924 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6848:	4628      	mov	r0, r5
   d684a:	f002 fac5 	bl	d8dd8 <strlen>
   d684e:	6833      	ldr	r3, [r6, #0]
   d6850:	4602      	mov	r2, r0
   d6852:	68db      	ldr	r3, [r3, #12]
   d6854:	4629      	mov	r1, r5
   d6856:	4630      	mov	r0, r6
   d6858:	4798      	blx	r3
   d685a:	e00f      	b.n	d687c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d685c:	b124      	cbz	r4, d6868 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d685e:	212e      	movs	r1, #46	; 0x2e
   d6860:	4630      	mov	r0, r6
   d6862:	f000 fa2f 	bl	d6cc4 <_ZN5Print5printEc>
   d6866:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6868:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d686c:	220a      	movs	r2, #10
   d686e:	4630      	mov	r0, r6
   d6870:	f000 fa6e 	bl	d6d50 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6874:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6876:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6878:	d1f0      	bne.n	d685c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d687a:	4620      	mov	r0, r4
    }
    return n;
}
   d687c:	b00d      	add	sp, #52	; 0x34
   d687e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6880 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6880:	b510      	push	{r4, lr}
   d6882:	4b05      	ldr	r3, [pc, #20]	; (d6898 <_ZN9IPAddressC1Ev+0x18>)
   d6884:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6886:	2211      	movs	r2, #17
   d6888:	f840 3b04 	str.w	r3, [r0], #4
   d688c:	2100      	movs	r1, #0
   d688e:	f002 fa60 	bl	d8d52 <memset>
{
    clear();
}
   d6892:	4620      	mov	r0, r4
   d6894:	bd10      	pop	{r4, pc}
   d6896:	bf00      	nop
   d6898:	000d9628 	.word	0x000d9628

000d689c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d689c:	4603      	mov	r3, r0
   d689e:	4a07      	ldr	r2, [pc, #28]	; (d68bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d68a0:	b510      	push	{r4, lr}
   d68a2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d68a6:	f101 0210 	add.w	r2, r1, #16
   d68aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d68ae:	f843 4b04 	str.w	r4, [r3], #4
   d68b2:	4291      	cmp	r1, r2
   d68b4:	d1f9      	bne.n	d68aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d68b6:	780a      	ldrb	r2, [r1, #0]
   d68b8:	701a      	strb	r2, [r3, #0]
}
   d68ba:	bd10      	pop	{r4, pc}
   d68bc:	000d9628 	.word	0x000d9628

000d68c0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d68c0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d68c2:	2b04      	cmp	r3, #4
   d68c4:	d101      	bne.n	d68ca <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d68c6:	6840      	ldr	r0, [r0, #4]
   d68c8:	e008      	b.n	d68dc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d68ca:	2b06      	cmp	r3, #6
   d68cc:	d10a      	bne.n	d68e4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d68ce:	6843      	ldr	r3, [r0, #4]
   d68d0:	b153      	cbz	r3, d68e8 <_ZNK9IPAddresscvbEv+0x28>
   d68d2:	6883      	ldr	r3, [r0, #8]
   d68d4:	b143      	cbz	r3, d68e8 <_ZNK9IPAddresscvbEv+0x28>
   d68d6:	68c3      	ldr	r3, [r0, #12]
   d68d8:	b133      	cbz	r3, d68e8 <_ZNK9IPAddresscvbEv+0x28>
   d68da:	6900      	ldr	r0, [r0, #16]
   d68dc:	3000      	adds	r0, #0
   d68de:	bf18      	it	ne
   d68e0:	2001      	movne	r0, #1
   d68e2:	4770      	bx	lr
   d68e4:	2000      	movs	r0, #0
   d68e6:	4770      	bx	lr
   d68e8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d68ea:	4770      	bx	lr

000d68ec <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d68ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d68ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d68f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d68f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d68fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d68fe:	2304      	movs	r3, #4
   d6900:	6041      	str	r1, [r0, #4]
   d6902:	7503      	strb	r3, [r0, #20]
   d6904:	bd10      	pop	{r4, pc}
	...

000d6908 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6908:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d690a:	4d04      	ldr	r5, [pc, #16]	; (d691c <_ZN9IPAddressC1Ehhhh+0x14>)
   d690c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d690e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d6912:	9500      	str	r5, [sp, #0]
   d6914:	f7ff ffea 	bl	d68ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6918:	b003      	add	sp, #12
   d691a:	bd30      	pop	{r4, r5, pc}
   d691c:	000d9628 	.word	0x000d9628

000d6920 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6920:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6922:	780d      	ldrb	r5, [r1, #0]
   d6924:	788b      	ldrb	r3, [r1, #2]
   d6926:	784a      	ldrb	r2, [r1, #1]
   d6928:	78c9      	ldrb	r1, [r1, #3]
   d692a:	9100      	str	r1, [sp, #0]
   d692c:	4629      	mov	r1, r5
   d692e:	f7ff ffdd 	bl	d68ec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6932:	b003      	add	sp, #12
   d6934:	bd30      	pop	{r4, r5, pc}

000d6936 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6936:	b510      	push	{r4, lr}
   d6938:	4604      	mov	r4, r0
{
	free(buffer);
   d693a:	6800      	ldr	r0, [r0, #0]
   d693c:	f7ff f9f2 	bl	d5d24 <free>
}
   d6940:	4620      	mov	r0, r4
   d6942:	bd10      	pop	{r4, pc}

000d6944 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6944:	b510      	push	{r4, lr}
   d6946:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6948:	6800      	ldr	r0, [r0, #0]
   d694a:	b108      	cbz	r0, d6950 <_ZN6String10invalidateEv+0xc>
   d694c:	f7ff f9ea 	bl	d5d24 <free>
	buffer = NULL;
   d6950:	2300      	movs	r3, #0
   d6952:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6954:	60a3      	str	r3, [r4, #8]
   d6956:	6063      	str	r3, [r4, #4]
   d6958:	bd10      	pop	{r4, pc}

000d695a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d695a:	b538      	push	{r3, r4, r5, lr}
   d695c:	4604      	mov	r4, r0
   d695e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6960:	6800      	ldr	r0, [r0, #0]
   d6962:	3101      	adds	r1, #1
   d6964:	f7ff f9e6 	bl	d5d34 <realloc>
	if (newbuffer) {
   d6968:	b110      	cbz	r0, d6970 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d696a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d696e:	2001      	movs	r0, #1
	}
	return 0;
}
   d6970:	bd38      	pop	{r3, r4, r5, pc}

000d6972 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6972:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6974:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6976:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6978:	b113      	cbz	r3, d6980 <_ZN6String7reserveEj+0xe>
   d697a:	6843      	ldr	r3, [r0, #4]
   d697c:	428b      	cmp	r3, r1
   d697e:	d207      	bcs.n	d6990 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6980:	4620      	mov	r0, r4
   d6982:	f7ff ffea 	bl	d695a <_ZN6String12changeBufferEj>
   d6986:	b120      	cbz	r0, d6992 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6988:	68a3      	ldr	r3, [r4, #8]
   d698a:	b90b      	cbnz	r3, d6990 <_ZN6String7reserveEj+0x1e>
   d698c:	6822      	ldr	r2, [r4, #0]
   d698e:	7013      	strb	r3, [r2, #0]
   d6990:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6992:	bd10      	pop	{r4, pc}

000d6994 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6994:	b570      	push	{r4, r5, r6, lr}
   d6996:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6998:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d699a:	4604      	mov	r4, r0
   d699c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d699e:	f7ff ffe8 	bl	d6972 <_ZN6String7reserveEj>
   d69a2:	b918      	cbnz	r0, d69ac <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d69a4:	4620      	mov	r0, r4
   d69a6:	f7ff ffcd 	bl	d6944 <_ZN6String10invalidateEv>
		return *this;
   d69aa:	e009      	b.n	d69c0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d69ac:	462a      	mov	r2, r5
   d69ae:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d69b0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d69b2:	6820      	ldr	r0, [r4, #0]
   d69b4:	f002 f9a7 	bl	d8d06 <memcpy>
	buffer[len] = 0;
   d69b8:	6822      	ldr	r2, [r4, #0]
   d69ba:	68a3      	ldr	r3, [r4, #8]
   d69bc:	2100      	movs	r1, #0
   d69be:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd70      	pop	{r4, r5, r6, pc}

000d69c4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d69c4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69c6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d69c8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69ca:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d69cc:	6043      	str	r3, [r0, #4]
	len = 0;
   d69ce:	6083      	str	r3, [r0, #8]
	flags = 0;
   d69d0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d69d2:	460d      	mov	r5, r1
   d69d4:	b139      	cbz	r1, d69e6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d69d6:	4608      	mov	r0, r1
   d69d8:	f002 f9fe 	bl	d8dd8 <strlen>
   d69dc:	4629      	mov	r1, r5
   d69de:	4602      	mov	r2, r0
   d69e0:	4620      	mov	r0, r4
   d69e2:	f7ff ffd7 	bl	d6994 <_ZN6String4copyEPKcj>
}
   d69e6:	4620      	mov	r0, r4
   d69e8:	bd38      	pop	{r3, r4, r5, pc}

000d69ea <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d69ea:	b538      	push	{r3, r4, r5, lr}
   d69ec:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d69ee:	460c      	mov	r4, r1
   d69f0:	b141      	cbz	r1, d6a04 <_ZN6StringaSEPKc+0x1a>
   d69f2:	4608      	mov	r0, r1
   d69f4:	f002 f9f0 	bl	d8dd8 <strlen>
   d69f8:	4621      	mov	r1, r4
   d69fa:	4602      	mov	r2, r0
   d69fc:	4628      	mov	r0, r5
   d69fe:	f7ff ffc9 	bl	d6994 <_ZN6String4copyEPKcj>
   d6a02:	e001      	b.n	d6a08 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6a04:	f7ff ff9e 	bl	d6944 <_ZN6String10invalidateEv>

	return *this;
}
   d6a08:	4628      	mov	r0, r5
   d6a0a:	bd38      	pop	{r3, r4, r5, pc}

000d6a0c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a0e:	4b0c      	ldr	r3, [pc, #48]	; (d6a40 <serialEventRun+0x34>)
   d6a10:	b133      	cbz	r3, d6a20 <serialEventRun+0x14>
   d6a12:	f7ff fed5 	bl	d67c0 <_Z16_fetch_usbserialv>
   d6a16:	6803      	ldr	r3, [r0, #0]
   d6a18:	691b      	ldr	r3, [r3, #16]
   d6a1a:	4798      	blx	r3
   d6a1c:	2800      	cmp	r0, #0
   d6a1e:	dc09      	bgt.n	d6a34 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a20:	4b08      	ldr	r3, [pc, #32]	; (d6a44 <serialEventRun+0x38>)
   d6a22:	b163      	cbz	r3, d6a3e <serialEventRun+0x32>
   d6a24:	f001 faa2 	bl	d7f6c <_Z22__fetch_global_Serial1v>
   d6a28:	6803      	ldr	r3, [r0, #0]
   d6a2a:	691b      	ldr	r3, [r3, #16]
   d6a2c:	4798      	blx	r3
   d6a2e:	2800      	cmp	r0, #0
   d6a30:	dc03      	bgt.n	d6a3a <serialEventRun+0x2e>
   d6a32:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a34:	f3af 8000 	nop.w
   d6a38:	e7f2      	b.n	d6a20 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a3a:	f3af 8000 	nop.w
   d6a3e:	bd08      	pop	{r3, pc}
	...

000d6a48 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a48:	b508      	push	{r3, lr}
	serialEventRun();
   d6a4a:	f7ff ffdf 	bl	d6a0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a4e:	f7ff f823 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6a52:	4b01      	ldr	r3, [pc, #4]	; (d6a58 <_post_loop+0x10>)
   d6a54:	6018      	str	r0, [r3, #0]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	2003e72c 	.word	0x2003e72c

000d6a5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6a5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6a5e:	2300      	movs	r3, #0
   d6a60:	9300      	str	r3, [sp, #0]
   d6a62:	461a      	mov	r2, r3
   d6a64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6a68:	f7ff f940 	bl	d5cec <system_ctrl_set_result>
}
   d6a6c:	b003      	add	sp, #12
   d6a6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6a74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6a74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6a76:	8843      	ldrh	r3, [r0, #2]
   d6a78:	2b0a      	cmp	r3, #10
   d6a7a:	d008      	beq.n	d6a8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6a7c:	2b50      	cmp	r3, #80	; 0x50
   d6a7e:	d109      	bne.n	d6a94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6a80:	4b09      	ldr	r3, [pc, #36]	; (d6aa8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6a82:	681b      	ldr	r3, [r3, #0]
   d6a84:	b13b      	cbz	r3, d6a96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6a86:	b003      	add	sp, #12
   d6a88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6a8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6a8e:	f7ff ffe5 	bl	d6a5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6a92:	e006      	b.n	d6aa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6a94:	2300      	movs	r3, #0
   d6a96:	9300      	str	r3, [sp, #0]
   d6a98:	461a      	mov	r2, r3
   d6a9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6a9e:	f7ff f925 	bl	d5cec <system_ctrl_set_result>
        break;
    }
}
   d6aa2:	b003      	add	sp, #12
   d6aa4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6aa8:	2003e540 	.word	0x2003e540

000d6aac <module_user_init_hook>:

void module_user_init_hook()
{
   d6aac:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6aae:	f7fe ffe3 	bl	d5a78 <HAL_RNG_GetRandomNumber>
   d6ab2:	4604      	mov	r4, r0
    srand(seed);
   d6ab4:	f002 f956 	bl	d8d64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ab8:	4b07      	ldr	r3, [pc, #28]	; (d6ad8 <module_user_init_hook+0x2c>)
   d6aba:	b113      	cbz	r3, d6ac2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6abc:	4620      	mov	r0, r4
   d6abe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6ac2:	2100      	movs	r1, #0
   d6ac4:	4804      	ldr	r0, [pc, #16]	; (d6ad8 <module_user_init_hook+0x2c>)
   d6ac6:	f7ff f89f 	bl	d5c08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6aca:	2100      	movs	r1, #0
   d6acc:	4803      	ldr	r0, [pc, #12]	; (d6adc <module_user_init_hook+0x30>)
}
   d6ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ad2:	f7ff b901 	b.w	d5cd8 <system_ctrl_set_app_request_handler>
   d6ad6:	bf00      	nop
   d6ad8:	00000000 	.word	0x00000000
   d6adc:	000d6a75 	.word	0x000d6a75

000d6ae0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7ff b8af 	b.w	d5c48 <network_ready>

000d6aea <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6aea:	2200      	movs	r2, #0
   d6aec:	4611      	mov	r1, r2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7ff b8ca 	b.w	d5c88 <network_listening>

000d6af4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6af4:	2200      	movs	r2, #0
   d6af6:	4611      	mov	r1, r2
   d6af8:	6840      	ldr	r0, [r0, #4]
   d6afa:	f7ff b8d5 	b.w	d5ca8 <network_get_listen_timeout>

000d6afe <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6afe:	2200      	movs	r2, #0
   d6b00:	6840      	ldr	r0, [r0, #4]
   d6b02:	f7ff b8c9 	b.w	d5c98 <network_set_listen_timeout>

000d6b06 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b06:	2200      	movs	r2, #0
   d6b08:	f081 0101 	eor.w	r1, r1, #1
   d6b0c:	6840      	ldr	r0, [r0, #4]
   d6b0e:	f7ff b8b3 	b.w	d5c78 <network_listen>

000d6b12 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6b12:	2300      	movs	r3, #0
   d6b14:	461a      	mov	r2, r3
   d6b16:	4619      	mov	r1, r3
   d6b18:	6840      	ldr	r0, [r0, #4]
   d6b1a:	f7ff b8a5 	b.w	d5c68 <network_off>

000d6b1e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6b1e:	2300      	movs	r3, #0
   d6b20:	461a      	mov	r2, r3
   d6b22:	4619      	mov	r1, r3
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7ff b897 	b.w	d5c58 <network_on>

000d6b2a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7ff b87a 	b.w	d5c28 <network_connecting>

000d6b34 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b34:	2200      	movs	r2, #0
   d6b36:	2102      	movs	r1, #2
   d6b38:	6840      	ldr	r0, [r0, #4]
   d6b3a:	f7ff b87d 	b.w	d5c38 <network_disconnect>

000d6b3e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b3e:	2300      	movs	r3, #0
   d6b40:	461a      	mov	r2, r3
   d6b42:	6840      	ldr	r0, [r0, #4]
   d6b44:	f7ff b868 	b.w	d5c18 <network_connect>

000d6b48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6b48:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6b4a:	4c0c      	ldr	r4, [pc, #48]	; (d6b7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d6b4c:	2528      	movs	r5, #40	; 0x28
   d6b4e:	462a      	mov	r2, r5
   d6b50:	2100      	movs	r1, #0
   d6b52:	4620      	mov	r0, r4
   d6b54:	f002 f8fd 	bl	d8d52 <memset>
        cid = -1;
   d6b58:	f04f 33ff 	mov.w	r3, #4294967295
   d6b5c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
   d6b5e:	8025      	strh	r5, [r4, #0]
   d6b60:	4c07      	ldr	r4, [pc, #28]	; (d6b80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d6b62:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6b64:	4620      	mov	r0, r4
   d6b66:	6063      	str	r3, [r4, #4]
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d6b68:	252c      	movs	r5, #44	; 0x2c
   d6b6a:	4b06      	ldr	r3, [pc, #24]	; (d6b84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d6b6c:	f840 3b08 	str.w	r3, [r0], #8
   d6b70:	462a      	mov	r2, r5
   d6b72:	2100      	movs	r1, #0
   d6b74:	f002 f8ed 	bl	d8d52 <memset>
        size = sizeof(*this);
   d6b78:	8125      	strh	r5, [r4, #8]
   d6b7a:	bd38      	pop	{r3, r4, r5, pc}
   d6b7c:	2003e578 	.word	0x2003e578
   d6b80:	2003e544 	.word	0x2003e544
   d6b84:	000d963c 	.word	0x000d963c

000d6b88 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6b88:	b510      	push	{r4, lr}
   d6b8a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b8c:	f7ff f906 	bl	d5d9c <_ZNSt14_Function_baseD1Ev>
   d6b90:	4620      	mov	r0, r4
   d6b92:	bd10      	pop	{r4, pc}

000d6b94 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d6b94:	b510      	push	{r4, lr}
   d6b96:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6b98:	f7ff f80e 	bl	d5bb8 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d6b9c:	4284      	cmp	r4, r0
   d6b9e:	d008      	beq.n	d6bb2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d6ba0:	b11c      	cbz	r4, d6baa <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d6ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d6ba6:	f7fe bff7 	b.w	d5b98 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d6baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d6bae:	f7fe bffb 	b.w	d5ba8 <LED_Signaling_Stop>
   d6bb2:	bd10      	pop	{r4, pc}

000d6bb4 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d6bb4:	b570      	push	{r4, r5, r6, lr}
   d6bb6:	4605      	mov	r5, r0
   d6bb8:	460e      	mov	r6, r1
   d6bba:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d6bbc:	f7fe fffc 	bl	d5bb8 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d6bc0:	b150      	cbz	r0, d6bd8 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d6bc2:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d6bc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d6bca:	f7fe ffdd 	bl	d5b88 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d6bce:	20e7      	movs	r0, #231	; 0xe7
}
   d6bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d6bd4:	f7fe bff8 	b.w	d5bc8 <LED_On>
   d6bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6bdc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6bdc:	4803      	ldr	r0, [pc, #12]	; (d6bec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6bde:	4a04      	ldr	r2, [pc, #16]	; (d6bf0 <_GLOBAL__sub_I_RGB+0x14>)
   d6be0:	4904      	ldr	r1, [pc, #16]	; (d6bf4 <_GLOBAL__sub_I_RGB+0x18>)
   d6be2:	2300      	movs	r3, #0
   d6be4:	6083      	str	r3, [r0, #8]
   d6be6:	f001 bb4f 	b.w	d8288 <__aeabi_atexit>
   d6bea:	bf00      	nop
   d6bec:	2003e5a0 	.word	0x2003e5a0
   d6bf0:	2003e1e0 	.word	0x2003e1e0
   d6bf4:	000d6b89 	.word	0x000d6b89

000d6bf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6bf8:	2100      	movs	r1, #0
   d6bfa:	f7ff b865 	b.w	d5cc8 <system_delay_ms>
	...

000d6c00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c00:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c02:	681a      	ldr	r2, [r3, #0]
   d6c04:	4b02      	ldr	r3, [pc, #8]	; (d6c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6c06:	601a      	str	r2, [r3, #0]
   d6c08:	4770      	bx	lr
   d6c0a:	bf00      	nop
   d6c0c:	2003e174 	.word	0x2003e174
   d6c10:	2003e5b0 	.word	0x2003e5b0

000d6c14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6c14:	4b01      	ldr	r3, [pc, #4]	; (d6c1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6c16:	4a02      	ldr	r2, [pc, #8]	; (d6c20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6c18:	601a      	str	r2, [r3, #0]
   d6c1a:	4770      	bx	lr
   d6c1c:	2003e5b4 	.word	0x2003e5b4
   d6c20:	000d9741 	.word	0x000d9741

000d6c24 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6c24:	b510      	push	{r4, lr}
   d6c26:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6c28:	f7fe ff36 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6c2c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6c2e:	6823      	ldr	r3, [r4, #0]
   d6c30:	4620      	mov	r0, r4
   d6c32:	695b      	ldr	r3, [r3, #20]
   d6c34:	4798      	blx	r3
    if (c >= 0) return c;
   d6c36:	2800      	cmp	r0, #0
   d6c38:	da08      	bge.n	d6c4c <_ZN6Stream9timedReadEv+0x28>
   d6c3a:	f7fe ff2d 	bl	d5a98 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d6c3e:	68e3      	ldr	r3, [r4, #12]
   d6c40:	1ac0      	subs	r0, r0, r3
   d6c42:	68a3      	ldr	r3, [r4, #8]
   d6c44:	4298      	cmp	r0, r3
   d6c46:	d3f2      	bcc.n	d6c2e <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6c48:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6c4c:	bd10      	pop	{r4, pc}

000d6c4e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d6c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c52:	4680      	mov	r8, r0
   d6c54:	460d      	mov	r5, r1
   d6c56:	188f      	adds	r7, r1, r2
   d6c58:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d6c5a:	42bc      	cmp	r4, r7
   d6c5c:	eba4 0605 	sub.w	r6, r4, r5
   d6c60:	d007      	beq.n	d6c72 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d6c62:	4640      	mov	r0, r8
   d6c64:	f7ff ffde 	bl	d6c24 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d6c68:	2800      	cmp	r0, #0
   d6c6a:	db02      	blt.n	d6c72 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d6c6c:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d6c70:	e7f3      	b.n	d6c5a <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d6c72:	4630      	mov	r0, r6
   d6c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6c78 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c7a:	4606      	mov	r6, r0
   d6c7c:	460d      	mov	r5, r1
   d6c7e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6c80:	2400      	movs	r4, #0
  while (size--) {
   d6c82:	42bd      	cmp	r5, r7
   d6c84:	d00c      	beq.n	d6ca0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6c86:	6833      	ldr	r3, [r6, #0]
   d6c88:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6c8c:	689b      	ldr	r3, [r3, #8]
   d6c8e:	4630      	mov	r0, r6
   d6c90:	4798      	blx	r3
     if (chunk>=0)
   d6c92:	2800      	cmp	r0, #0
   d6c94:	db01      	blt.n	d6c9a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6c96:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6c98:	e7f3      	b.n	d6c82 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6c9a:	2c00      	cmp	r4, #0
   d6c9c:	bf08      	it	eq
   d6c9e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6ca0:	4620      	mov	r0, r4
   d6ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ca4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6ca4:	b570      	push	{r4, r5, r6, lr}
   d6ca6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6ca8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6caa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6cac:	b149      	cbz	r1, d6cc2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6cae:	f002 f893 	bl	d8dd8 <strlen>
   d6cb2:	682b      	ldr	r3, [r5, #0]
   d6cb4:	4602      	mov	r2, r0
   d6cb6:	4621      	mov	r1, r4
   d6cb8:	4628      	mov	r0, r5
   d6cba:	68db      	ldr	r3, [r3, #12]
    }
   d6cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6cc0:	4718      	bx	r3
    }
   d6cc2:	bd70      	pop	{r4, r5, r6, pc}

000d6cc4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6cc4:	6803      	ldr	r3, [r0, #0]
   d6cc6:	689b      	ldr	r3, [r3, #8]
   d6cc8:	4718      	bx	r3

000d6cca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6cca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6ccc:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6cce:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6cd0:	f7ff fff8 	bl	d6cc4 <_ZN5Print5printEc>
  n += print('\n');
   d6cd4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6cd6:	4604      	mov	r4, r0
  n += print('\n');
   d6cd8:	4628      	mov	r0, r5
   d6cda:	f7ff fff3 	bl	d6cc4 <_ZN5Print5printEc>
  return n;
}
   d6cde:	4420      	add	r0, r4
   d6ce0:	bd38      	pop	{r3, r4, r5, pc}

000d6ce2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6ce2:	b538      	push	{r3, r4, r5, lr}
   d6ce4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6ce6:	f7ff ffdd 	bl	d6ca4 <_ZN5Print5writeEPKc>
   d6cea:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6cec:	4628      	mov	r0, r5
   d6cee:	f7ff ffec 	bl	d6cca <_ZN5Print7printlnEv>
  return n;
}
   d6cf2:	4420      	add	r0, r4
   d6cf4:	bd38      	pop	{r3, r4, r5, pc}

000d6cf6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6cf6:	b530      	push	{r4, r5, lr}
   d6cf8:	b08b      	sub	sp, #44	; 0x2c
   d6cfa:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6cfc:	2100      	movs	r1, #0
   d6cfe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d02:	2a01      	cmp	r2, #1
   d6d04:	bf98      	it	ls
   d6d06:	220a      	movls	r2, #10
   d6d08:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6d0c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6d10:	fb05 3312 	mls	r3, r5, r2, r3
   d6d14:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d18:	2b09      	cmp	r3, #9
   d6d1a:	bf94      	ite	ls
   d6d1c:	3330      	addls	r3, #48	; 0x30
   d6d1e:	3337      	addhi	r3, #55	; 0x37
   d6d20:	b2db      	uxtb	r3, r3
   d6d22:	4621      	mov	r1, r4
   d6d24:	f804 3901 	strb.w	r3, [r4], #-1
   d6d28:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6d2a:	2d00      	cmp	r5, #0
   d6d2c:	d1ee      	bne.n	d6d0c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6d2e:	f7ff ffb9 	bl	d6ca4 <_ZN5Print5writeEPKc>
}
   d6d32:	b00b      	add	sp, #44	; 0x2c
   d6d34:	bd30      	pop	{r4, r5, pc}

000d6d36 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6d36:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6d38:	b92a      	cbnz	r2, d6d46 <_ZN5Print5printEmi+0x10>
   d6d3a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6d40:	689b      	ldr	r3, [r3, #8]
   d6d42:	b2c9      	uxtb	r1, r1
   d6d44:	4718      	bx	r3
  else return printNumber(n, base);
   d6d46:	b2d2      	uxtb	r2, r2
}
   d6d48:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6d4c:	f7ff bfd3 	b.w	d6cf6 <_ZN5Print11printNumberEmh>

000d6d50 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6d50:	f7ff bff1 	b.w	d6d36 <_ZN5Print5printEmi>

000d6d54 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d54:	4770      	bx	lr

000d6d56 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d56:	2000      	movs	r0, #0
   d6d58:	4770      	bx	lr

000d6d5a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d5a:	4770      	bx	lr

000d6d5c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d5c:	2000      	movs	r0, #0
   d6d5e:	4770      	bx	lr

000d6d60 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d60:	4770      	bx	lr

000d6d62 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6d62:	2000      	movs	r0, #0
   d6d64:	4770      	bx	lr

000d6d66 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6d66:	b510      	push	{r4, lr}
   d6d68:	2114      	movs	r1, #20
   d6d6a:	4604      	mov	r4, r0
   d6d6c:	f001 fa91 	bl	d8292 <_ZdlPvj>
   d6d70:	4620      	mov	r0, r4
   d6d72:	bd10      	pop	{r4, pc}

000d6d74 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6d74:	b510      	push	{r4, lr}
   d6d76:	2114      	movs	r1, #20
   d6d78:	4604      	mov	r4, r0
   d6d7a:	f001 fa8a 	bl	d8292 <_ZdlPvj>
   d6d7e:	4620      	mov	r0, r4
   d6d80:	bd10      	pop	{r4, pc}

000d6d82 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6d82:	b510      	push	{r4, lr}
   d6d84:	2114      	movs	r1, #20
   d6d86:	4604      	mov	r4, r0
   d6d88:	f001 fa83 	bl	d8292 <_ZdlPvj>
   d6d8c:	4620      	mov	r0, r4
   d6d8e:	bd10      	pop	{r4, pc}

000d6d90 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6d90:	f7fd b983 	b.w	d409a <_ZdlPv>

000d6d94 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6d94:	f7fd b981 	b.w	d409a <_ZdlPv>

000d6d98 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6d98:	f7fd b97f 	b.w	d409a <_ZdlPv>

000d6d9c <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d6d9c:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d6d9e:	7982      	ldrb	r2, [r0, #6]
   d6da0:	798b      	ldrb	r3, [r1, #6]
   d6da2:	429a      	cmp	r2, r3
   d6da4:	d106      	bne.n	d6db4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6da6:	2206      	movs	r2, #6
   d6da8:	f001 ff9e 	bl	d8ce8 <memcmp>
   d6dac:	fab0 f080 	clz	r0, r0
   d6db0:	0940      	lsrs	r0, r0, #5
   d6db2:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d6db4:	2000      	movs	r0, #0
    }
   d6db6:	bd08      	pop	{r3, pc}

000d6db8 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d6db8:	b510      	push	{r4, lr}
            : uuid_() {
   d6dba:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d6dbc:	4604      	mov	r4, r0
            : uuid_() {
   d6dbe:	2100      	movs	r1, #0
   d6dc0:	f001 ffc7 	bl	d8d52 <memset>
    }
   d6dc4:	4620      	mov	r0, r4
   d6dc6:	bd10      	pop	{r4, pc}

000d6dc8 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6dc8:	b510      	push	{r4, lr}
            locked_(false) {
   d6dca:	2300      	movs	r3, #0
   d6dcc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6dce:	4b04      	ldr	r3, [pc, #16]	; (d6de0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6dd0:	4604      	mov	r4, r0
   d6dd2:	6818      	ldr	r0, [r3, #0]
   d6dd4:	f7fe fde6 	bl	d59a4 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6dd8:	2301      	movs	r3, #1
   d6dda:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6ddc:	4620      	mov	r0, r4
   d6dde:	bd10      	pop	{r4, pc}
   d6de0:	2003e5e0 	.word	0x2003e5e0

000d6de4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6de4:	b510      	push	{r4, lr}
        if (locked_) {
   d6de6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6de8:	4604      	mov	r4, r0
        if (locked_) {
   d6dea:	b11b      	cbz	r3, d6df4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6dec:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6dee:	6818      	ldr	r0, [r3, #0]
   d6df0:	f7fe fde0 	bl	d59b4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6df4:	4620      	mov	r0, r4
   d6df6:	bd10      	pop	{r4, pc}
   d6df8:	2003e5e0 	.word	0x2003e5e0

000d6dfc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
 */
BleUuid::BleUuid(const BleUuid& uuid)
        : uuid_(uuid.uuid_) {
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d6dfc:	b570      	push	{r4, r5, r6, lr}
   d6dfe:	460c      	mov	r4, r1
   d6e00:	4605      	mov	r5, r0
   d6e02:	4616      	mov	r6, r2
        : BleUuid() {
   d6e04:	f7ff ffd8 	bl	d6db8 <_ZN8particle7BleUuidC1Ev>
    if (uuid128 == nullptr) {
   d6e08:	b92c      	cbnz	r4, d6e16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6e0a:	2210      	movs	r2, #16
   d6e0c:	4621      	mov	r1, r4
   d6e0e:	4628      	mov	r0, r5
   d6e10:	f001 ff9f 	bl	d8d52 <memset>
   d6e14:	e016      	b.n	d6e44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d6e16:	2e01      	cmp	r6, #1
   d6e18:	d109      	bne.n	d6e2e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6e1a:	462b      	mov	r3, r5
   d6e1c:	f104 0210 	add.w	r2, r4, #16
   d6e20:	f854 1b04 	ldr.w	r1, [r4], #4
   d6e24:	f843 1b04 	str.w	r1, [r3], #4
   d6e28:	4294      	cmp	r4, r2
   d6e2a:	d1f9      	bne.n	d6e20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d6e2c:	e008      	b.n	d6e40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d6e2e:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (uuid128 == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d6e30:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d6e32:	5ce1      	ldrb	r1, [r4, r3]
   d6e34:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6e38:	3b01      	subs	r3, #1
   d6e3a:	b2db      	uxtb	r3, r3
   d6e3c:	2bff      	cmp	r3, #255	; 0xff
   d6e3e:	d1f8      	bne.n	d6e32 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d6e40:	2301      	movs	r3, #1
   d6e42:	742b      	strb	r3, [r5, #16]
    }
}
   d6e44:	4628      	mov	r0, r5
   d6e46:	bd70      	pop	{r4, r5, r6, pc}

000d6e48 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6e48:	b538      	push	{r3, r4, r5, lr}
   d6e4a:	4604      	mov	r4, r0
   d6e4c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6e4e:	461a      	mov	r2, r3
   d6e50:	f7ff ffd4 	bl	d6dfc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d6e54:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6e56:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6e58:	0a2d      	lsrs	r5, r5, #8
   d6e5a:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6e5c:	7423      	strb	r3, [r4, #16]
}
   d6e5e:	4620      	mov	r0, r4
   d6e60:	bd38      	pop	{r3, r4, r5, pc}

000d6e62 <_ZN8particle7BleUuidC1EPKc>:

BleUuid::BleUuid(const char* uuid)
   d6e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e66:	4688      	mov	r8, r1
   d6e68:	4607      	mov	r7, r0
        : BleUuid() {
   d6e6a:	f7ff ffa5 	bl	d6db8 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d6e6e:	f1b8 0f00 	cmp.w	r8, #0
   d6e72:	d002      	beq.n	d6e7a <_ZN8particle7BleUuidC1EPKc+0x18>
   d6e74:	2600      	movs	r6, #0
   d6e76:	2510      	movs	r5, #16
   d6e78:	e00f      	b.n	d6e9a <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6e7a:	2210      	movs	r2, #16
   d6e7c:	4641      	mov	r1, r8
   d6e7e:	4638      	mov	r0, r7
   d6e80:	f001 ff67 	bl	d8d52 <memset>
   d6e84:	e04a      	b.n	d6f1c <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d6e86:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6e8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d6e8e:	b2d1      	uxtb	r1, r2
   d6e90:	2909      	cmp	r1, #9
   d6e92:	d808      	bhi.n	d6ea6 <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d6e94:	1c53      	adds	r3, r2, #1
   d6e96:	d114      	bne.n	d6ec2 <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d6e98:	3601      	adds	r6, #1
   d6e9a:	4640      	mov	r0, r8
   d6e9c:	f001 ff9c 	bl	d8dd8 <strlen>
   d6ea0:	4286      	cmp	r6, r0
   d6ea2:	d3f0      	bcc.n	d6e86 <_ZN8particle7BleUuidC1EPKc+0x24>
   d6ea4:	e033      	b.n	d6f0e <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d6ea6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d6eaa:	2a05      	cmp	r2, #5
   d6eac:	d802      	bhi.n	d6eb4 <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d6eae:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d6eb2:	e7ef      	b.n	d6e94 <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d6eb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d6eb8:	2a05      	cmp	r2, #5
   d6eba:	d8ed      	bhi.n	d6e98 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d6ebc:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d6ec0:	e7e8      	b.n	d6e94 <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d6ec2:	0112      	lsls	r2, r2, #4
   d6ec4:	3d01      	subs	r5, #1
   d6ec6:	b2d4      	uxtb	r4, r2
   d6ec8:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d6eca:	4640      	mov	r0, r8
   d6ecc:	f001 ff84 	bl	d8dd8 <strlen>
   d6ed0:	3601      	adds	r6, #1
   d6ed2:	4286      	cmp	r6, r0
   d6ed4:	d2e0      	bcs.n	d6e98 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d6ed6:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6eda:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d6ede:	b2d9      	uxtb	r1, r3
   d6ee0:	2909      	cmp	r1, #9
   d6ee2:	d90e      	bls.n	d6f02 <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d6ee4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d6ee8:	2b05      	cmp	r3, #5
   d6eea:	d802      	bhi.n	d6ef2 <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d6eec:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d6ef0:	e007      	b.n	d6f02 <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d6ef2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d6ef6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6ef8:	bf94      	ite	ls
   d6efa:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d6efe:	f04f 33ff 	movhi.w	r3, #4294967295
   d6f02:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d6f04:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d6f06:	bf1c      	itt	ne
   d6f08:	4314      	orrne	r4, r2
   d6f0a:	557c      	strbne	r4, [r7, r5]
   d6f0c:	e7c4      	b.n	d6e98 <_ZN8particle7BleUuidC1EPKc+0x36>
   d6f0e:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d6f10:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d6f12:	42bb      	cmp	r3, r7
   d6f14:	d002      	beq.n	d6f1c <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d6f16:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d6f1a:	e7fa      	b.n	d6f12 <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6f1c:	2301      	movs	r3, #1
   d6f1e:	743b      	strb	r3, [r7, #16]
}
   d6f20:	4638      	mov	r0, r7
   d6f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6f26 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d6f26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6f28:	7c03      	ldrb	r3, [r0, #16]
   d6f2a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d6f2e:	4604      	mov	r4, r0
   d6f30:	d00a      	beq.n	d6f48 <_ZNK8particle7BleUuid7isValidEv+0x22>
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d6f32:	2210      	movs	r2, #16
   d6f34:	2100      	movs	r1, #0
   d6f36:	4668      	mov	r0, sp
   d6f38:	f001 ff0b 	bl	d8d52 <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d6f3c:	2210      	movs	r2, #16
   d6f3e:	4669      	mov	r1, sp
   d6f40:	4620      	mov	r0, r4
   d6f42:	f001 fed1 	bl	d8ce8 <memcmp>
   d6f46:	e000      	b.n	d6f4a <_ZNK8particle7BleUuid7isValidEv+0x24>
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
   d6f48:	8800      	ldrh	r0, [r0, #0]
   d6f4a:	3000      	adds	r0, #0
   d6f4c:	bf18      	it	ne
   d6f4e:	2001      	movne	r0, #1
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d6f50:	b004      	add	sp, #16
   d6f52:	bd10      	pop	{r4, pc}

000d6f54 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d6f54:	b510      	push	{r4, lr}
   d6f56:	7c04      	ldrb	r4, [r0, #16]
   d6f58:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d6f5c:	d006      	beq.n	d6f6c <_ZNK8particle7BleUuideqERKS0_+0x18>
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6f5e:	2210      	movs	r2, #16
   d6f60:	f001 fec2 	bl	d8ce8 <memcmp>
   d6f64:	fab0 f080 	clz	r0, r0
   d6f68:	0940      	lsrs	r0, r0, #5
   d6f6a:	bd10      	pop	{r4, pc}
    }
}

bool BleUuid::operator==(const BleUuid& uuid) const {
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d6f6c:	8803      	ldrh	r3, [r0, #0]
   d6f6e:	8808      	ldrh	r0, [r1, #0]
   d6f70:	1a1b      	subs	r3, r3, r0
   d6f72:	4258      	negs	r0, r3
   d6f74:	4158      	adcs	r0, r3
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d6f76:	bd10      	pop	{r4, pc}

000d6f78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6f7a:	b18b      	cbz	r3, d6fa0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6f7c:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6f7e:	1ce5      	adds	r5, r4, #3
   d6f80:	428d      	cmp	r5, r1
   d6f82:	d80f      	bhi.n	d6fa4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6f84:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d6f86:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6f88:	5d87      	ldrb	r7, [r0, r6]
   d6f8a:	4297      	cmp	r7, r2
   d6f8c:	d105      	bne.n	d6f9a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6f8e:	442e      	add	r6, r5
   d6f90:	42b1      	cmp	r1, r6
   d6f92:	d307      	bcc.n	d6fa4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d6f94:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d6f96:	1c68      	adds	r0, r5, #1
                return adsLen;
   d6f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d6f9a:	3501      	adds	r5, #1
   d6f9c:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6f9e:	e7ee      	b.n	d6f7e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d6fa0:	4618      	mov	r0, r3
   d6fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6fa4:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6fac:	4604      	mov	r4, r0
   d6fae:	460e      	mov	r6, r1
   d6fb0:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d6fb2:	4617      	mov	r7, r2
   d6fb4:	2a00      	cmp	r2, #0
   d6fb6:	d03a      	beq.n	d702e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d6fb8:	460a      	mov	r2, r1
   d6fba:	ab01      	add	r3, sp, #4
   d6fbc:	6a01      	ldr	r1, [r0, #32]
   d6fbe:	f7ff ffdb 	bl	d6f78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d6fc2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6fc6:	6a22      	ldr	r2, [r4, #32]
   d6fc8:	bb03      	cbnz	r3, d700c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d6fca:	b1f8      	cbz	r0, d700c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6fcc:	1c96      	adds	r6, r2, #2
   d6fce:	442e      	add	r6, r5
   d6fd0:	1a36      	subs	r6, r6, r0
   d6fd2:	2e1f      	cmp	r6, #31
   d6fd4:	d82b      	bhi.n	d702e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6fd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d6fda:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6fde:	ebc8 0202 	rsb	r2, r8, r2
   d6fe2:	1a12      	subs	r2, r2, r0
   d6fe4:	eb00 0108 	add.w	r1, r0, r8
   d6fe8:	eb05 0009 	add.w	r0, r5, r9
   d6fec:	b292      	uxth	r2, r2
   d6fee:	4421      	add	r1, r4
   d6ff0:	4420      	add	r0, r4
   d6ff2:	f001 fe93 	bl	d8d1c <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d6ff6:	1c6b      	adds	r3, r5, #1
   d6ff8:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d6ffc:	462a      	mov	r2, r5
   d6ffe:	4639      	mov	r1, r7
   d7000:	eb04 0009 	add.w	r0, r4, r9
   d7004:	f001 fe7f 	bl	d8d06 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d7008:	6226      	str	r6, [r4, #32]
   d700a:	e010      	b.n	d702e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d700c:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d700e:	182b      	adds	r3, r5, r0
   d7010:	2b1f      	cmp	r3, #31
   d7012:	d80c      	bhi.n	d702e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d7014:	1c6b      	adds	r3, r5, #1
   d7016:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7018:	4422      	add	r2, r4
   d701a:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d701c:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d701e:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d7020:	4420      	add	r0, r4
   d7022:	462a      	mov	r2, r5
   d7024:	f001 fe6f 	bl	d8d06 <memcpy>
        selfLen_ += len;
   d7028:	6a22      	ldr	r2, [r4, #32]
   d702a:	442a      	add	r2, r5
   d702c:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d702e:	6a20      	ldr	r0, [r4, #32]
}
   d7030:	b003      	add	sp, #12
   d7032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7036 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7036:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7038:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d703a:	4603      	mov	r3, r0
   d703c:	f100 021f 	add.w	r2, r0, #31
   d7040:	2000      	movs	r0, #0
   d7042:	f803 0b01 	strb.w	r0, [r3], #1
   d7046:	4293      	cmp	r3, r2
   d7048:	f04f 0100 	mov.w	r1, #0
   d704c:	d1f9      	bne.n	d7042 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d704e:	aa04      	add	r2, sp, #16
   d7050:	2306      	movs	r3, #6
   d7052:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7056:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7058:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d705a:	9100      	str	r1, [sp, #0]
   d705c:	4620      	mov	r0, r4
   d705e:	4619      	mov	r1, r3
   d7060:	f7ff ffa2 	bl	d6fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7064:	4620      	mov	r0, r4
   d7066:	b004      	add	sp, #16
   d7068:	bd10      	pop	{r4, pc}

000d706a <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d706a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d706c:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d706e:	4608      	mov	r0, r1
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d7070:	460c      	mov	r4, r1
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d7072:	f001 feb1 	bl	d8dd8 <strlen>
   d7076:	2300      	movs	r3, #0
   d7078:	9300      	str	r3, [sp, #0]
   d707a:	4622      	mov	r2, r4
   d707c:	4603      	mov	r3, r0
   d707e:	2109      	movs	r1, #9
   d7080:	4628      	mov	r0, r5
   d7082:	f7ff ff91 	bl	d6fa8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7086:	b003      	add	sp, #12
   d7088:	bd30      	pop	{r4, r5, pc}

000d708a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d708a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d708c:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d708e:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d7090:	ab01      	add	r3, sp, #4
   d7092:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d7094:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d7096:	f7ff ff6f 	bl	d6f78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d709a:	4605      	mov	r5, r0
   d709c:	b178      	cbz	r0, d70be <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d709e:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d70a0:	6a22      	ldr	r2, [r4, #32]
   d70a2:	1829      	adds	r1, r5, r0
   d70a4:	1a12      	subs	r2, r2, r0
   d70a6:	1b52      	subs	r2, r2, r5
   d70a8:	4421      	add	r1, r4
   d70aa:	4420      	add	r0, r4
   d70ac:	f001 fe2b 	bl	d8d06 <memcpy>
        selfLen_ -= len;
   d70b0:	6a23      	ldr	r3, [r4, #32]
   d70b2:	1b5d      	subs	r5, r3, r5
   d70b4:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d70b6:	4631      	mov	r1, r6
   d70b8:	4620      	mov	r0, r4
   d70ba:	f7ff ffe6 	bl	d708a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d70be:	b002      	add	sp, #8
   d70c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70c4 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d70c4:	b538      	push	{r3, r4, r5, lr}
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d70c6:	2500      	movs	r5, #0
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d70c8:	4604      	mov	r4, r0
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d70ca:	f800 5b02 	strb.w	r5, [r0], #2
   d70ce:	f7ff fe73 	bl	d6db8 <_ZN8particle7BleUuidC1Ev>
   d70d2:	f104 0016 	add.w	r0, r4, #22
   d70d6:	f7ff fe6f 	bl	d6db8 <_ZN8particle7BleUuidC1Ev>
   d70da:	4909      	ldr	r1, [pc, #36]	; (d7100 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d70dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d70e0:	f7ff fc70 	bl	d69c4 <_ZN6StringC1EPK19__FlashStringHelper>
   d70e4:	2301      	movs	r3, #1
   d70e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d70ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d70ee:	64e5      	str	r5, [r4, #76]	; 0x4c
   d70f0:	6525      	str	r5, [r4, #80]	; 0x50
   d70f2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   d70f6:	65a5      	str	r5, [r4, #88]	; 0x58
   d70f8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    }
   d70fc:	4620      	mov	r0, r4
   d70fe:	bd38      	pop	{r3, r4, r5, pc}
   d7100:	000d96a5 	.word	0x000d96a5

000d7104 <_ZN8particle17BleCharacteristic8setValueEPKhj>:
        return impl()->properties;
    }
    return BleCharacteristicProperty::NONE;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
   d7104:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7106:	6800      	ldr	r0, [r0, #0]
   d7108:	460c      	mov	r4, r1
    if (impl() != nullptr) {
   d710a:	b3b0      	cbz	r0, d717a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
   d710c:	b371      	cbz	r1, d716c <_ZN8particle17BleCharacteristic8setValueEPKhj+0x68>
   d710e:	b36a      	cbz	r2, d716c <_ZN8particle17BleCharacteristic8setValueEPKhj+0x68>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
        if (isLocal) {
   d7110:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
   d7114:	2af4      	cmp	r2, #244	; 0xf4
   d7116:	bf28      	it	cs
   d7118:	22f4      	movcs	r2, #244	; 0xf4
        if (isLocal) {
   d711a:	b13d      	cbz	r5, d712c <_ZN8particle17BleCharacteristic8setValueEPKhj+0x28>
            return hal_ble_gatt_server_set_characteristic_value(attrHandles.value_handle, buf, len, nullptr);
   d711c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
   d7120:	2300      	movs	r3, #0
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
    if (impl() != nullptr) {
        return impl()->setValue(buf, len);
    }
    return 0;
}
   d7122:	b003      	add	sp, #12
   d7124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        len = len > BLE_MAX_ATTR_VALUE_PACKET_SIZE ? BLE_MAX_ATTR_VALUE_PACKET_SIZE : len;
        if (isLocal) {
            return hal_ble_gatt_server_set_characteristic_value(attrHandles.value_handle, buf, len, nullptr);
   d7128:	f7fe bc88 	b.w	d5a3c <hal_ble_gatt_server_set_characteristic_value>
        } else if(valid_) {
   d712c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
   d7130:	b1f3      	cbz	r3, d7170 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x6c>
            if ((properties & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
   d7132:	7803      	ldrb	r3, [r0, #0]
   d7134:	f043 0108 	orr.w	r1, r3, #8
   d7138:	2908      	cmp	r1, #8
   d713a:	d109      	bne.n	d7150 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x4c>
                return hal_ble_gatt_client_write_with_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
   d713c:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   d7140:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
   d7144:	9500      	str	r5, [sp, #0]
   d7146:	4613      	mov	r3, r2
   d7148:	4622      	mov	r2, r4
   d714a:	f7fe fc81 	bl	d5a50 <hal_ble_gatt_client_write_with_response>
   d714e:	e014      	b.n	d717a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            } else if ((properties & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
   d7150:	f043 0304 	orr.w	r3, r3, #4
   d7154:	2b04      	cmp	r3, #4
   d7156:	d10e      	bne.n	d7176 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x72>
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
   d7158:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
   d715c:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
   d7160:	9500      	str	r5, [sp, #0]
   d7162:	4613      	mov	r3, r2
   d7164:	4622      	mov	r2, r4
   d7166:	f7fe fc7d 	bl	d5a64 <hal_ble_gatt_client_write_without_response>
   d716a:	e006      	b.n	d717a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
        }
    }

    ssize_t setValue(const uint8_t* buf, size_t len) {
        if (buf == nullptr || len == 0) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d716c:	4804      	ldr	r0, [pc, #16]	; (d7180 <_ZN8particle17BleCharacteristic8setValueEPKhj+0x7c>)
   d716e:	e004      	b.n	d717a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else {
                return SYSTEM_ERROR_NOT_SUPPORTED;
            }
        } else {
            return SYSTEM_ERROR_INVALID_STATE;
   d7170:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7174:	e001      	b.n	d717a <_ZN8particle17BleCharacteristic8setValueEPKhj+0x76>
            if ((properties & BleCharacteristicProperty::WRITE) == BleCharacteristicProperty::WRITE) {
                return hal_ble_gatt_client_write_with_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else if ((properties & BleCharacteristicProperty::WRITE_WO_RSP) == BleCharacteristicProperty::WRITE_WO_RSP) {
                return hal_ble_gatt_client_write_without_response(connHandle, attrHandles.value_handle, buf, len, nullptr);
            } else {
                return SYSTEM_ERROR_NOT_SUPPORTED;
   d7176:	f06f 0077 	mvn.w	r0, #119	; 0x77
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len) {
    if (impl() != nullptr) {
        return impl()->setValue(buf, len);
    }
    return 0;
}
   d717a:	b003      	add	sp, #12
   d717c:	bd30      	pop	{r4, r5, pc}
   d717e:	bf00      	nop
   d7180:	fffffef2 	.word	0xfffffef2

000d7184 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d7184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7188:	e890 0050 	ldmia.w	r0, {r4, r6}
   d718c:	460d      	mov	r5, r1
   d718e:	4617      	mov	r7, r2
   d7190:	4698      	mov	r8, r3
   d7192:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d7196:	42a6      	cmp	r6, r4
   d7198:	d033      	beq.n	d7202 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d719a:	6823      	ldr	r3, [r4, #0]
   d719c:	699a      	ldr	r2, [r3, #24]
   d719e:	69d9      	ldr	r1, [r3, #28]
   d71a0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d71a4:	4291      	cmp	r1, r2
   d71a6:	d01b      	beq.n	d71e0 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d71a8:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d71aa:	b19b      	cbz	r3, d71d4 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d71ac:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d71b0:	42a8      	cmp	r0, r5
   d71b2:	d011      	beq.n	d71d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d71b4:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d71b8:	42a8      	cmp	r0, r5
   d71ba:	d00d      	beq.n	d71d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d71bc:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d71c0:	42a8      	cmp	r0, r5
   d71c2:	d009      	beq.n	d71d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d71c4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d71c8:	42a8      	cmp	r0, r5
   d71ca:	d005      	beq.n	d71d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d71cc:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d71d0:	42a8      	cmp	r0, r5
   d71d2:	d001      	beq.n	d71d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d71d4:	3208      	adds	r2, #8
   d71d6:	e7e5      	b.n	d71a4 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d71d8:	b117      	cbz	r7, d71e0 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d71da:	f1b8 0f00 	cmp.w	r8, #0
   d71de:	d101      	bne.n	d71e4 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d71e0:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d71e2:	e7d8      	b.n	d7196 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d71e4:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d71e8:	f1b9 0f00 	cmp.w	r9, #0
   d71ec:	d0f8      	beq.n	d71e0 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d71ee:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d71f2:	42aa      	cmp	r2, r5
   d71f4:	d1f4      	bne.n	d71e0 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d71f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d71f8:	9a08      	ldr	r2, [sp, #32]
   d71fa:	4641      	mov	r1, r8
   d71fc:	4638      	mov	r0, r7
   d71fe:	47c8      	blx	r9
   d7200:	e7ee      	b.n	d71e0 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d7202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7206 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>:
            }
        }
    }

private:
    BleService* getService(const BleUuid& uuid) {
   d7206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7208:	e890 0050 	ldmia.w	r0, {r4, r6}
   d720c:	460f      	mov	r7, r1
   d720e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d7212:	42b4      	cmp	r4, r6
   d7214:	4625      	mov	r5, r4
   d7216:	d008      	beq.n	d722a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0x24>
            if (service.impl()->uuid == uuid) {
   d7218:	4639      	mov	r1, r7
   d721a:	f854 0b08 	ldr.w	r0, [r4], #8
   d721e:	f7ff fe99 	bl	d6f54 <_ZNK8particle7BleUuideqERKS0_>
   d7222:	2800      	cmp	r0, #0
   d7224:	d0f5      	beq.n	d7212 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0xc>
   d7226:	4628      	mov	r0, r5
   d7228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return &service;
            }
        }
        return nullptr;
   d722a:	2000      	movs	r0, #0
    }
   d722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d722e <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d722e:	b508      	push	{r3, lr}
   d7230:	6800      	ldr	r0, [r0, #0]
   d7232:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d7234:	8ac2      	ldrh	r2, [r0, #22]
   d7236:	8acb      	ldrh	r3, [r1, #22]
   d7238:	429a      	cmp	r2, r3
   d723a:	d104      	bne.n	d7246 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d723c:	3101      	adds	r1, #1
   d723e:	3001      	adds	r0, #1
   d7240:	f7ff fdac 	bl	d6d9c <_ZNK8particle10BleAddresseqERKS0_>
   d7244:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d7246:	2000      	movs	r0, #0
}
   d7248:	bd08      	pop	{r3, pc}

000d724a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d724a:	4608      	mov	r0, r1
   d724c:	b909      	cbnz	r1, d7252 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d724e:	460a      	mov	r2, r1
   d7250:	e001      	b.n	d7256 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d7252:	6a09      	ldr	r1, [r1, #32]
   d7254:	2200      	movs	r2, #0
   d7256:	f7fe bbc5 	b.w	d59e4 <hal_ble_gap_set_advertising_data>

000d725a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d725a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d725c:	460c      	mov	r4, r1
   d725e:	b911      	cbnz	r1, d7266 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d7260:	460a      	mov	r2, r1
   d7262:	4608      	mov	r0, r1
   d7264:	e006      	b.n	d7274 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d7266:	2101      	movs	r1, #1
   d7268:	4620      	mov	r0, r4
   d726a:	f7ff ff0e 	bl	d708a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d726e:	6a21      	ldr	r1, [r4, #32]
   d7270:	2200      	movs	r2, #0
   d7272:	4620      	mov	r0, r4
    }
}
   d7274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d7278:	f7fe bbbc 	b.w	d59f4 <hal_ble_gap_set_scan_response_data>

000d727c <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d727c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d727e:	a801      	add	r0, sp, #4
   d7280:	f7ff fda2 	bl	d6dc8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d7284:	2000      	movs	r0, #0
   d7286:	f7fe fbbd 	bl	d5a04 <hal_ble_gap_start_advertising>
   d728a:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d728c:	a801      	add	r0, sp, #4
   d728e:	f7ff fda9 	bl	d6de4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d7292:	4620      	mov	r0, r4
   d7294:	b002      	add	sp, #8
   d7296:	bd10      	pop	{r4, pc}

000d7298 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d7298:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d729a:	4605      	mov	r5, r0
   d729c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d729e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d72a0:	4616      	mov	r6, r2
    WiringBleLock lk;
   d72a2:	f7ff fd91 	bl	d6dc8 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d72a6:	4621      	mov	r1, r4
   d72a8:	4628      	mov	r0, r5
   d72aa:	f7ff ffce 	bl	d724a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d72ae:	2800      	cmp	r0, #0
   d72b0:	db08      	blt.n	d72c4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d72b2:	4631      	mov	r1, r6
   d72b4:	4628      	mov	r0, r5
   d72b6:	f7ff ffd0 	bl	d725a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d72ba:	2800      	cmp	r0, #0
   d72bc:	db02      	blt.n	d72c4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d72be:	4628      	mov	r0, r5
   d72c0:	f7ff ffdc 	bl	d727c <_ZNK8particle14BleLocalDevice9advertiseEv>
   d72c4:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d72c6:	a801      	add	r0, sp, #4
   d72c8:	f7ff fd8c 	bl	d6de4 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d72cc:	4620      	mov	r0, r4
   d72ce:	b002      	add	sp, #8
   d72d0:	bd70      	pop	{r4, r5, r6, pc}

000d72d2 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d72d2:	6983      	ldr	r3, [r0, #24]
    return (peripheralProxy_->connected() || centralProxy_->connected());
   d72d4:	685b      	ldr	r3, [r3, #4]
   d72d6:	2b00      	cmp	r3, #0
   d72d8:	dc06      	bgt.n	d72e8 <_ZNK8particle14BleLocalDevice9connectedEv+0x16>
   d72da:	69c3      	ldr	r3, [r0, #28]
   d72dc:	6858      	ldr	r0, [r3, #4]
   d72de:	2800      	cmp	r0, #0
   d72e0:	bfd4      	ite	le
   d72e2:	2000      	movle	r0, #0
   d72e4:	2001      	movgt	r0, #1
   d72e6:	4770      	bx	lr
   d72e8:	2001      	movs	r0, #1
}
   d72ea:	4770      	bx	lr

000d72ec <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d72ec:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d72ee:	6983      	ldr	r3, [r0, #24]
   d72f0:	e893 0014 	ldmia.w	r3, {r2, r4}
   d72f4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d72f8:	42a2      	cmp	r2, r4
   d72fa:	4613      	mov	r3, r2
   d72fc:	d007      	beq.n	d730e <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d72fe:	681d      	ldr	r5, [r3, #0]
   d7300:	8aed      	ldrh	r5, [r5, #22]
   d7302:	428d      	cmp	r5, r1
   d7304:	f102 0208 	add.w	r2, r2, #8
   d7308:	d1f6      	bne.n	d72f8 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d730a:	4618      	mov	r0, r3
   d730c:	bd30      	pop	{r4, r5, pc}
   d730e:	69c2      	ldr	r2, [r0, #28]
   d7310:	6813      	ldr	r3, [r2, #0]
   d7312:	6852      	ldr	r2, [r2, #4]
   d7314:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d7318:	429a      	cmp	r2, r3
   d731a:	4618      	mov	r0, r3
   d731c:	d006      	beq.n	d732c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d731e:	6804      	ldr	r4, [r0, #0]
   d7320:	8ae4      	ldrh	r4, [r4, #22]
   d7322:	428c      	cmp	r4, r1
   d7324:	f103 0308 	add.w	r3, r3, #8
   d7328:	d1f6      	bne.n	d7318 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d732a:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d732c:	2000      	movs	r0, #0
}
   d732e:	bd30      	pop	{r4, r5, pc}

000d7330 <_ZN8particle17BleCharacteristicD1Ev>:
    }
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d7330:	b510      	push	{r4, lr}
   d7332:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7334:	3004      	adds	r0, #4
   d7336:	f7fe fd25 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d733a:	4620      	mov	r0, r4
   d733c:	bd10      	pop	{r4, pc}

000d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d733e:	b510      	push	{r4, lr}
   d7340:	f851 3b04 	ldr.w	r3, [r1], #4
   d7344:	4604      	mov	r4, r0
   d7346:	f840 3b04 	str.w	r3, [r0], #4
   d734a:	f7ff f9cf 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d734e:	4620      	mov	r0, r4
   d7350:	bd10      	pop	{r4, pc}

000d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d7352:	b510      	push	{r4, lr}
   d7354:	f851 3b04 	ldr.w	r3, [r1], #4
   d7358:	4604      	mov	r4, r0
   d735a:	f840 3b04 	str.w	r3, [r0], #4
   d735e:	f7ff f9c5 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d7362:	4620      	mov	r0, r4
   d7364:	bd10      	pop	{r4, pc}

000d7366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7366:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7368:	6804      	ldr	r4, [r0, #0]
   d736a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d736c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d736e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7372:	42a6      	cmp	r6, r4
   d7374:	d004      	beq.n	d7380 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7376:	1d20      	adds	r0, r4, #4
   d7378:	f7fe fd04 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d737c:	3408      	adds	r4, #8
   d737e:	e7f8      	b.n	d7372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7380:	6828      	ldr	r0, [r5, #0]
   d7382:	f7fe fccf 	bl	d5d24 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7386:	4628      	mov	r0, r5
   d7388:	bd70      	pop	{r4, r5, r6, pc}

000d738a <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d738a:	b538      	push	{r3, r4, r5, lr}
   d738c:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d738e:	2010      	movs	r0, #16
   d7390:	780d      	ldrb	r5, [r1, #0]
   d7392:	f7fc fe80 	bl	d4096 <_Znwj>
   d7396:	b120      	cbz	r0, d73a2 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7398:	2300      	movs	r3, #0
   d739a:	6003      	str	r3, [r0, #0]
   d739c:	6043      	str	r3, [r0, #4]
   d739e:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d73a0:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d73a2:	6020      	str	r0, [r4, #0]
   d73a4:	4620      	mov	r0, r4
   d73a6:	bd38      	pop	{r3, r4, r5, pc}

000d73a8 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d73a8:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73aa:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d73ac:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73ae:	b134      	cbz	r4, d73be <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d73b0:	4620      	mov	r0, r4
   d73b2:	f7ff ffd8 	bl	d7366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d73b6:	2110      	movs	r1, #16
   d73b8:	4620      	mov	r0, r4
   d73ba:	f000 ff6a 	bl	d8292 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d73be:	4628      	mov	r0, r5
   d73c0:	bd38      	pop	{r3, r4, r5, pc}

000d73c2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d73c2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d73c4:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d73c6:	f104 001c 	add.w	r0, r4, #28
   d73ca:	f7ff ffed 	bl	d73a8 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d73ce:	4620      	mov	r0, r4
   d73d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d73d4:	f7fc be61 	b.w	d409a <_ZdlPv>

000d73d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d73d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d73da:	6804      	ldr	r4, [r0, #0]
   d73dc:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d73de:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d73e0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d73e4:	42a6      	cmp	r6, r4
   d73e6:	d004      	beq.n	d73f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73e8:	1d20      	adds	r0, r4, #4
   d73ea:	f7fe fccb 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73ee:	3408      	adds	r4, #8
   d73f0:	e7f8      	b.n	d73e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d73f2:	2300      	movs	r3, #0
   d73f4:	606b      	str	r3, [r5, #4]
   d73f6:	bd70      	pop	{r4, r5, r6, pc}

000d73f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d73f8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d73fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73fc:	4606      	mov	r6, r0
   d73fe:	460c      	mov	r4, r1
   d7400:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7402:	d914      	bls.n	d742e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7404:	4290      	cmp	r0, r2
   d7406:	d213      	bcs.n	d7430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7408:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d740c:	1a6c      	subs	r4, r5, r1
   d740e:	f1a1 0708 	sub.w	r7, r1, #8
   d7412:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7414:	42af      	cmp	r7, r5
   d7416:	d018      	beq.n	d744a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7418:	b11c      	cbz	r4, d7422 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d741a:	4629      	mov	r1, r5
   d741c:	4620      	mov	r0, r4
   d741e:	f7ff ff98 	bl	d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7422:	1d28      	adds	r0, r5, #4
   d7424:	f7fe fcae 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7428:	3d08      	subs	r5, #8
   d742a:	3c08      	subs	r4, #8
   d742c:	e7f2      	b.n	d7414 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d742e:	d00c      	beq.n	d744a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7430:	42ac      	cmp	r4, r5
   d7432:	d00a      	beq.n	d744a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7434:	b11e      	cbz	r6, d743e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7436:	4621      	mov	r1, r4
   d7438:	4630      	mov	r0, r6
   d743a:	f7ff ff8a 	bl	d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d743e:	1d20      	adds	r0, r4, #4
   d7440:	f7fe fca0 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7444:	3408      	adds	r4, #8
   d7446:	3608      	adds	r6, #8
   d7448:	e7f2      	b.n	d7430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d744c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d744e:	680b      	ldr	r3, [r1, #0]
   d7450:	69da      	ldr	r2, [r3, #28]
   d7452:	460e      	mov	r6, r1
   d7454:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7456:	6851      	ldr	r1, [r2, #4]
   d7458:	4605      	mov	r5, r0
   d745a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d745e:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d7460:	4299      	cmp	r1, r3
   d7462:	d00d      	beq.n	d7480 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d7464:	6818      	ldr	r0, [r3, #0]
   d7466:	6982      	ldr	r2, [r0, #24]
   d7468:	69c0      	ldr	r0, [r0, #28]
   d746a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d746e:	4290      	cmp	r0, r2
   d7470:	d004      	beq.n	d747c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d7472:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d7476:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d747a:	e7f8      	b.n	d746e <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d747c:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d747e:	e7ef      	b.n	d7460 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d7480:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d7482:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d7486:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d7488:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d748a:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d748c:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d748e:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d7490:	f8c3 200a 	str.w	r2, [r3, #10]
   d7494:	f8c3 200e 	str.w	r2, [r3, #14]
   d7498:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d749c:	682c      	ldr	r4, [r5, #0]
   d749e:	686b      	ldr	r3, [r5, #4]
   d74a0:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d74a4:	42bc      	cmp	r4, r7
   d74a6:	d016      	beq.n	d74d6 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d74a8:	4631      	mov	r1, r6
   d74aa:	4620      	mov	r0, r4
   d74ac:	f7ff febf 	bl	d722e <_ZN8particle13BlePeerDeviceeqERKS0_>
   d74b0:	b908      	cbnz	r0, d74b6 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d74b2:	3408      	adds	r4, #8
   d74b4:	e7f6      	b.n	d74a4 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d74b6:	b174      	cbz	r4, d74d6 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d74b8:	1d20      	adds	r0, r4, #4
   d74ba:	f7fe fc63 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d74be:	682b      	ldr	r3, [r5, #0]
   d74c0:	686a      	ldr	r2, [r5, #4]
   d74c2:	f104 0108 	add.w	r1, r4, #8
   d74c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d74ca:	4620      	mov	r0, r4
   d74cc:	f7ff ff94 	bl	d73f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d74d0:	686b      	ldr	r3, [r5, #4]
   d74d2:	3b01      	subs	r3, #1
   d74d4:	606b      	str	r3, [r5, #4]
   d74d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d74d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d74d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d74da:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d74dc:	6846      	ldr	r6, [r0, #4]
   d74de:	4668      	mov	r0, sp
   d74e0:	f7ff ff37 	bl	d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d74e4:	6867      	ldr	r7, [r4, #4]
   d74e6:	68a3      	ldr	r3, [r4, #8]
   d74e8:	429f      	cmp	r7, r3
   d74ea:	db14      	blt.n	d7516 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d74ec:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d74ee:	2f00      	cmp	r7, #0
   d74f0:	dd0b      	ble.n	d750a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d74f2:	00f8      	lsls	r0, r7, #3
   d74f4:	f7fe fc0e 	bl	d5d14 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d74f8:	4605      	mov	r5, r0
   d74fa:	b300      	cbz	r0, d753e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d74fc:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7500:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7504:	f7ff ff78 	bl	d73f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7508:	e000      	b.n	d750c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d750a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d750c:	6820      	ldr	r0, [r4, #0]
   d750e:	f7fe fc09 	bl	d5d24 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7512:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7514:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7516:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7518:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d751a:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d751e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7522:	4629      	mov	r1, r5
   d7524:	f105 0008 	add.w	r0, r5, #8
   d7528:	f7ff ff66 	bl	d73f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d752c:	b11d      	cbz	r5, d7536 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d752e:	4669      	mov	r1, sp
   d7530:	4628      	mov	r0, r5
   d7532:	f7ff ff0e 	bl	d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7536:	6863      	ldr	r3, [r4, #4]
   d7538:	3301      	adds	r3, #1
   d753a:	6063      	str	r3, [r4, #4]
   d753c:	2501      	movs	r5, #1
   d753e:	a801      	add	r0, sp, #4
   d7540:	f7fe fc20 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7544:	4628      	mov	r0, r5
   d7546:	b003      	add	sp, #12
   d7548:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d754a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d754a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d754c:	6804      	ldr	r4, [r0, #0]
   d754e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7550:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7552:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7556:	42a6      	cmp	r6, r4
   d7558:	d004      	beq.n	d7564 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d755a:	1d20      	adds	r0, r4, #4
   d755c:	f7fe fc12 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7560:	3408      	adds	r4, #8
   d7562:	e7f8      	b.n	d7556 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7564:	6828      	ldr	r0, [r5, #0]
   d7566:	f7fe fbdd 	bl	d5d24 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d756a:	4628      	mov	r0, r5
   d756c:	bd70      	pop	{r4, r5, r6, pc}

000d756e <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d756e:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7570:	4604      	mov	r4, r0
   d7572:	b138      	cbz	r0, d7584 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d7574:	f7ff ffe9 	bl	d754a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d7578:	4620      	mov	r0, r4
   d757a:	210c      	movs	r1, #12
      }
   d757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7580:	f000 be87 	b.w	d8292 <_ZdlPvj>
   d7584:	bd10      	pop	{r4, pc}

000d7586 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7586:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7588:	4604      	mov	r4, r0
   d758a:	b138      	cbz	r0, d759c <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d758c:	f7ff ffdd 	bl	d754a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d7590:	4620      	mov	r0, r4
   d7592:	210c      	movs	r1, #12
      }
   d7594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7598:	f000 be7b 	b.w	d8292 <_ZdlPvj>
   d759c:	bd10      	pop	{r4, pc}
	...

000d75a0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d75a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d75a2:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d75a4:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d75a6:	6005      	str	r5, [r0, #0]
   d75a8:	6045      	str	r5, [r0, #4]
   d75aa:	6085      	str	r5, [r0, #8]
   d75ac:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d75ae:	6105      	str	r5, [r0, #16]
   d75b0:	6145      	str	r5, [r0, #20]
   d75b2:	6185      	str	r5, [r0, #24]
   d75b4:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d75b6:	4628      	mov	r0, r5
   d75b8:	f7fe fa04 	bl	d59c4 <hal_ble_stack_init>
   d75bc:	b120      	cbz	r0, d75c8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d75be:	4a25      	ldr	r2, [pc, #148]	; (d7654 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d75c0:	4629      	mov	r1, r5
   d75c2:	200a      	movs	r0, #10
   d75c4:	f7fe fb08 	bl	d5bd8 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d75c8:	2301      	movs	r3, #1
   d75ca:	f10d 0103 	add.w	r1, sp, #3
   d75ce:	a801      	add	r0, sp, #4
   d75d0:	f88d 3003 	strb.w	r3, [sp, #3]
   d75d4:	f7ff fed9 	bl	d738a <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75d8:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d75da:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d75dc:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d75de:	2200      	movs	r2, #0
   d75e0:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d75e2:	b135      	cbz	r5, d75f2 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d75e4:	4628      	mov	r0, r5
   d75e6:	f7ff febe 	bl	d7366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d75ea:	2110      	movs	r1, #16
   d75ec:	4628      	mov	r0, r5
   d75ee:	f000 fe50 	bl	d8292 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d75f2:	a801      	add	r0, sp, #4
   d75f4:	f7ff fed8 	bl	d73a8 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d75f8:	2001      	movs	r0, #1
   d75fa:	f7fc fd4c 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d75fe:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7600:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7602:	b11b      	cbz	r3, d760c <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7604:	2101      	movs	r1, #1
   d7606:	4618      	mov	r0, r3
   d7608:	f000 fe43 	bl	d8292 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d760c:	200c      	movs	r0, #12
   d760e:	f7fc fd42 	bl	d4096 <_Znwj>
   d7612:	4603      	mov	r3, r0
   d7614:	b118      	cbz	r0, d761e <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d7616:	2200      	movs	r2, #0
   d7618:	6002      	str	r2, [r0, #0]
   d761a:	6042      	str	r2, [r0, #4]
   d761c:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d761e:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7620:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7622:	b108      	cbz	r0, d7628 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d7624:	f7ff ffa3 	bl	d756e <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7628:	200c      	movs	r0, #12
   d762a:	f7fc fd34 	bl	d4096 <_Znwj>
   d762e:	4603      	mov	r3, r0
   d7630:	b118      	cbz	r0, d763a <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d7632:	2200      	movs	r2, #0
   d7634:	6002      	str	r2, [r0, #0]
   d7636:	6042      	str	r2, [r0, #4]
   d7638:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d763a:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d763c:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d763e:	b108      	cbz	r0, d7644 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d7640:	f7ff ffa1 	bl	d7586 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d7644:	2200      	movs	r2, #0
   d7646:	4621      	mov	r1, r4
   d7648:	4803      	ldr	r0, [pc, #12]	; (d7658 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d764a:	f7fe f9c3 	bl	d59d4 <hal_ble_set_callback_on_events>
}
   d764e:	4620      	mov	r0, r4
   d7650:	b003      	add	sp, #12
   d7652:	bd30      	pop	{r4, r5, pc}
   d7654:	000d5a89 	.word	0x000d5a89
   d7658:	000d7a7d 	.word	0x000d7a7d

000d765c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d765c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d765e:	4c0a      	ldr	r4, [pc, #40]	; (d7688 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7660:	6823      	ldr	r3, [r4, #0]
   d7662:	07db      	lsls	r3, r3, #31
   d7664:	d40e      	bmi.n	d7684 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d7666:	4620      	mov	r0, r4
   d7668:	f7fc fd1b 	bl	d40a2 <__cxa_guard_acquire>
   d766c:	b150      	cbz	r0, d7684 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d766e:	4807      	ldr	r0, [pc, #28]	; (d768c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7670:	f7ff ff96 	bl	d75a0 <_ZN8particle14BleLocalDeviceC1Ev>
   d7674:	4620      	mov	r0, r4
   d7676:	f7fc fd19 	bl	d40ac <__cxa_guard_release>
   d767a:	4a05      	ldr	r2, [pc, #20]	; (d7690 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d767c:	4905      	ldr	r1, [pc, #20]	; (d7694 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d767e:	4803      	ldr	r0, [pc, #12]	; (d768c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7680:	f000 fe02 	bl	d8288 <__aeabi_atexit>
    return instance;
}
   d7684:	4801      	ldr	r0, [pc, #4]	; (d768c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d7686:	bd10      	pop	{r4, pc}
   d7688:	2003e5d8 	.word	0x2003e5d8
   d768c:	2003e5b8 	.word	0x2003e5b8
   d7690:	2003e1e0 	.word	0x2003e1e0
   d7694:	000d7699 	.word	0x000d7699

000d7698 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7698:	b510      	push	{r4, lr}
   d769a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d769c:	69c0      	ldr	r0, [r0, #28]
   d769e:	b108      	cbz	r0, d76a4 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d76a0:	f7ff ff71 	bl	d7586 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76a4:	69a0      	ldr	r0, [r4, #24]
   d76a6:	b108      	cbz	r0, d76ac <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d76a8:	f7ff ff61 	bl	d756e <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d76ac:	6960      	ldr	r0, [r4, #20]
   d76ae:	b110      	cbz	r0, d76b6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d76b0:	2101      	movs	r1, #1
   d76b2:	f000 fdee 	bl	d8292 <_ZdlPvj>
   d76b6:	f104 0010 	add.w	r0, r4, #16
   d76ba:	f7ff fe75 	bl	d73a8 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d76be:	4620      	mov	r0, r4
   d76c0:	bd10      	pop	{r4, pc}

000d76c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d76c2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d76c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76c6:	4606      	mov	r6, r0
   d76c8:	460c      	mov	r4, r1
   d76ca:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d76cc:	d914      	bls.n	d76f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d76ce:	4290      	cmp	r0, r2
   d76d0:	d213      	bcs.n	d76fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d76d2:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d76d6:	1a6c      	subs	r4, r5, r1
   d76d8:	f1a1 0708 	sub.w	r7, r1, #8
   d76dc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d76de:	42af      	cmp	r7, r5
   d76e0:	d018      	beq.n	d7714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d76e2:	b11c      	cbz	r4, d76ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d76e4:	4629      	mov	r1, r5
   d76e6:	4620      	mov	r0, r4
   d76e8:	f7ff fe29 	bl	d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d76ec:	1d28      	adds	r0, r5, #4
   d76ee:	f7fe fb49 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d76f2:	3d08      	subs	r5, #8
   d76f4:	3c08      	subs	r4, #8
   d76f6:	e7f2      	b.n	d76de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d76f8:	d00c      	beq.n	d7714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d76fa:	42ac      	cmp	r4, r5
   d76fc:	d00a      	beq.n	d7714 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d76fe:	b11e      	cbz	r6, d7708 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7700:	4621      	mov	r1, r4
   d7702:	4630      	mov	r0, r6
   d7704:	f7ff fe1b 	bl	d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7708:	1d20      	adds	r0, r4, #4
   d770a:	f7fe fb3b 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d770e:	3408      	adds	r4, #8
   d7710:	3608      	adds	r6, #8
   d7712:	e7f2      	b.n	d76fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7716 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7718:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d771a:	6846      	ldr	r6, [r0, #4]
   d771c:	4668      	mov	r0, sp
   d771e:	f7ff fe0e 	bl	d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7722:	6867      	ldr	r7, [r4, #4]
   d7724:	68a3      	ldr	r3, [r4, #8]
   d7726:	429f      	cmp	r7, r3
   d7728:	db14      	blt.n	d7754 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d772a:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d772c:	2f00      	cmp	r7, #0
   d772e:	dd0b      	ble.n	d7748 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7730:	00f8      	lsls	r0, r7, #3
   d7732:	f7fe faef 	bl	d5d14 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7736:	4605      	mov	r5, r0
   d7738:	b300      	cbz	r0, d777c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d773a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d773e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7742:	f7ff ffbe 	bl	d76c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7746:	e000      	b.n	d774a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7748:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d774a:	6820      	ldr	r0, [r4, #0]
   d774c:	f7fe faea 	bl	d5d24 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7750:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7752:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7754:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7756:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7758:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d775c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7760:	4629      	mov	r1, r5
   d7762:	f105 0008 	add.w	r0, r5, #8
   d7766:	f7ff ffac 	bl	d76c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d776a:	b11d      	cbz	r5, d7774 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d776c:	4669      	mov	r1, sp
   d776e:	4628      	mov	r0, r5
   d7770:	f7ff fde5 	bl	d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7774:	6863      	ldr	r3, [r4, #4]
   d7776:	3301      	adds	r3, #1
   d7778:	6063      	str	r3, [r4, #4]
   d777a:	2501      	movs	r5, #1
   d777c:	a801      	add	r0, sp, #4
   d777e:	f7fe fb01 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7782:	4628      	mov	r0, r5
   d7784:	b003      	add	sp, #12
   d7786:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7788 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>:
            }
        }
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d7788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d778c:	680c      	ldr	r4, [r1, #0]
   d778e:	b08b      	sub	sp, #44	; 0x2c
   d7790:	4606      	mov	r6, r0
   d7792:	460f      	mov	r7, r1
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d7794:	b314      	cbz	r4, d77dc <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
   d7796:	6985      	ldr	r5, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7798:	69c3      	ldr	r3, [r0, #28]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d779a:	f104 0a02 	add.w	sl, r4, #2
   d779e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
                && svcUuid == impl.svcUuid
   d77a2:	f104 0b16 	add.w	fp, r4, #22
    BleAttributeHandle endHandle;

private:
    bool contains(const BleCharacteristic& characteristic) {
        if (characteristic.impl() != nullptr) {
            for (const auto& stubChar : characteristics_) {
   d77a6:	45a8      	cmp	r8, r5
   d77a8:	d016      	beq.n	d77d8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x50>
   d77aa:	f8d5 9000 	ldr.w	r9, [r5]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d77ae:	4650      	mov	r0, sl
   d77b0:	f109 0102 	add.w	r1, r9, #2
   d77b4:	f7ff fbce 	bl	d6f54 <_ZNK8particle7BleUuideqERKS0_>
                && svcUuid == impl.svcUuid
                && isLocal == impl.isLocal) {
   d77b8:	2800      	cmp	r0, #0
   d77ba:	d06b      	beq.n	d7894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
                && svcUuid == impl.svcUuid
   d77bc:	f109 0116 	add.w	r1, r9, #22
   d77c0:	4658      	mov	r0, fp
   d77c2:	f7ff fbc7 	bl	d6f54 <_ZNK8particle7BleUuideqERKS0_>
   d77c6:	2800      	cmp	r0, #0
   d77c8:	d064      	beq.n	d7894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
                && isLocal == impl.isLocal) {
   d77ca:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d77ce:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
   d77d2:	429a      	cmp	r2, r3
   d77d4:	d15e      	bne.n	d7894 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
   d77d6:	e001      	b.n	d77dc <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d77d8:	7823      	ldrb	r3, [r4, #0]
   d77da:	b90b      	cbnz	r3, d77e0 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x58>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d77dc:	4830      	ldr	r0, [pc, #192]	; (d78a0 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x118>)
   d77de:	e05b      	b.n	d7898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
        }
        if (characteristic.impl()->isLocal) {
   d77e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d77e4:	2b00      	cmp	r3, #0
   d77e6:	d041      	beq.n	d786c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xe4>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
   d77e8:	3402      	adds	r4, #2
   d77ea:	4620      	mov	r0, r4
   d77ec:	f7ff fb9b 	bl	d6f26 <_ZNK8particle7BleUuid7isValidEv>
   d77f0:	b9b0      	cbnz	r0, d7820 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x98>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d77f2:	4b2c      	ldr	r3, [pc, #176]	; (d78a4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x11c>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d77f4:	492c      	ldr	r1, [pc, #176]	; (d78a8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x120>)
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d77f6:	881a      	ldrh	r2, [r3, #0]
   d77f8:	3201      	adds	r2, #1
   d77fa:	b292      	uxth	r2, r2
   d77fc:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d77fe:	a801      	add	r0, sp, #4
   d7800:	2301      	movs	r3, #1
   d7802:	f7ff fb21 	bl	d6e48 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            uuid = newUuid;
   d7806:	ad05      	add	r5, sp, #20
   d7808:	aa01      	add	r2, sp, #4
   d780a:	4613      	mov	r3, r2
   d780c:	cb03      	ldmia	r3!, {r0, r1}
   d780e:	42ab      	cmp	r3, r5
   d7810:	6020      	str	r0, [r4, #0]
   d7812:	6061      	str	r1, [r4, #4]
   d7814:	461a      	mov	r2, r3
   d7816:	f104 0408 	add.w	r4, r4, #8
   d781a:	d1f6      	bne.n	d780a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x82>
   d781c:	6818      	ldr	r0, [r3, #0]
   d781e:	6020      	str	r0, [r4, #0]
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (characteristic.impl()->isLocal) {
            characteristic.impl()->assignUuidIfNeeded();
            hal_ble_char_init_t char_init = {};
   d7820:	2424      	movs	r4, #36	; 0x24
   d7822:	4622      	mov	r2, r4
   d7824:	2100      	movs	r1, #0
   d7826:	a801      	add	r0, sp, #4
   d7828:	f001 fa93 	bl	d8d52 <memset>
            char_init.size = sizeof(hal_ble_char_init_t);
   d782c:	f8ad 4006 	strh.w	r4, [sp, #6]
   d7830:	683c      	ldr	r4, [r7, #0]
            char_init.uuid = characteristic.impl()->uuid.UUID();
   d7832:	aa04      	add	r2, sp, #16
   d7834:	1ca3      	adds	r3, r4, #2
   d7836:	f104 0e12 	add.w	lr, r4, #18
   d783a:	6818      	ldr	r0, [r3, #0]
   d783c:	6859      	ldr	r1, [r3, #4]
   d783e:	4615      	mov	r5, r2
   d7840:	c503      	stmia	r5!, {r0, r1}
   d7842:	3308      	adds	r3, #8
   d7844:	4573      	cmp	r3, lr
   d7846:	462a      	mov	r2, r5
   d7848:	d1f7      	bne.n	d783a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xb2>
   d784a:	6818      	ldr	r0, [r3, #0]
   d784c:	6028      	str	r0, [r5, #0]
            char_init.properties = static_cast<uint8_t>(characteristic.impl()->properties);
   d784e:	7823      	ldrb	r3, [r4, #0]
   d7850:	f88d 3008 	strb.w	r3, [sp, #8]
            char_init.service_handle = startHandle;
   d7854:	8ab3      	ldrh	r3, [r6, #20]
   d7856:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            char_init.description = characteristic.impl()->description.c_str();
   d785a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d785c:	9303      	str	r3, [sp, #12]
            int ret = hal_ble_gatt_server_add_characteristic(&char_init, &characteristic.impl()->attrHandles, nullptr);
   d785e:	2200      	movs	r2, #0
   d7860:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   d7864:	a801      	add	r0, sp, #4
   d7866:	f7fe f8df 	bl	d5a28 <hal_ble_gatt_server_add_characteristic>
            if (ret != SYSTEM_ERROR_NONE) {
   d786a:	b9a8      	cbnz	r0, d7898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d786c:	683b      	ldr	r3, [r7, #0]
                return ret;
            }
        }
        characteristic.impl()->svcImpl = this;
   d786e:	659e      	str	r6, [r3, #88]	; 0x58
   d7870:	683b      	ldr	r3, [r7, #0]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d7872:	2201      	movs	r2, #1
   d7874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   d7878:	4639      	mov	r1, r7
   d787a:	a801      	add	r0, sp, #4
   d787c:	f7ff fd5f 	bl	d733e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            }
        }
        characteristic.impl()->svcImpl = this;
        characteristic.impl()->setValid(true);
        LOG_DEBUG(TRACE, "characteristics.append(characteristic)");
        characteristics_.append(characteristic);
   d7880:	a901      	add	r1, sp, #4
   d7882:	f106 0018 	add.w	r0, r6, #24
   d7886:	f7ff ff46 	bl	d7716 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d788a:	a802      	add	r0, sp, #8
   d788c:	f7fe fa7a 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return SYSTEM_ERROR_NONE;
   d7890:	2000      	movs	r0, #0
   d7892:	e001      	b.n	d7898 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d7894:	3508      	adds	r5, #8
   d7896:	e786      	b.n	d77a6 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x1e>
    }
   d7898:	b00b      	add	sp, #44	; 0x2c
   d789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d789e:	bf00      	nop
   d78a0:	fffffef2 	.word	0xfffffef2
   d78a4:	2003e5dc 	.word	0x2003e5dc
   d78a8:	000d97c0 	.word	0x000d97c0

000d78ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d78ac:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d78ae:	b570      	push	{r4, r5, r6, lr}
   d78b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d78b2:	d91a      	bls.n	d78ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d78b4:	4290      	cmp	r0, r2
   d78b6:	d219      	bcs.n	d78ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d78b8:	f1a1 0608 	sub.w	r6, r1, #8
   d78bc:	1a51      	subs	r1, r2, r1
   d78be:	3904      	subs	r1, #4
   d78c0:	1f15      	subs	r5, r2, #4
   d78c2:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d78c4:	1f2b      	subs	r3, r5, #4
   d78c6:	429e      	cmp	r6, r3
   d78c8:	d025      	beq.n	d7916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d78ca:	2c04      	cmp	r4, #4
   d78cc:	d007      	beq.n	d78de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d78ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d78d2:	f844 3c04 	str.w	r3, [r4, #-4]
   d78d6:	4629      	mov	r1, r5
   d78d8:	4620      	mov	r0, r4
   d78da:	f7fe ff07 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d78de:	4628      	mov	r0, r5
   d78e0:	f7fe fa50 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78e4:	3d08      	subs	r5, #8
   d78e6:	3c08      	subs	r4, #8
   d78e8:	e7ec      	b.n	d78c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d78ea:	d014      	beq.n	d7916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d78ec:	1d0c      	adds	r4, r1, #4
   d78ee:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d78f0:	1f23      	subs	r3, r4, #4
   d78f2:	429d      	cmp	r5, r3
   d78f4:	d00f      	beq.n	d7916 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d78f6:	2e04      	cmp	r6, #4
   d78f8:	d007      	beq.n	d790a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d78fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d78fe:	f846 3c04 	str.w	r3, [r6, #-4]
   d7902:	4621      	mov	r1, r4
   d7904:	4630      	mov	r0, r6
   d7906:	f7fe fef1 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d790a:	4620      	mov	r0, r4
   d790c:	f7fe fa3a 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7910:	3408      	adds	r4, #8
   d7912:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7914:	e7ec      	b.n	d78f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7916:	bd70      	pop	{r4, r5, r6, pc}

000d7918 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>:

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d7918:	b5f0      	push	{r4, r5, r6, r7, lr}
   d791a:	680f      	ldr	r7, [r1, #0]
   d791c:	b089      	sub	sp, #36	; 0x24
   d791e:	460d      	mov	r5, r1
        if (getService(svc.impl()->uuid) != nullptr) {
   d7920:	4639      	mov	r1, r7

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d7922:	4604      	mov	r4, r0
        if (getService(svc.impl()->uuid) != nullptr) {
   d7924:	f7ff fc6f 	bl	d7206 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
   d7928:	2800      	cmp	r0, #0
   d792a:	d15e      	bne.n	d79ea <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd2>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (local_) {
   d792c:	7b23      	ldrb	r3, [r4, #12]
   d792e:	b1bb      	cbz	r3, d7960 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x48>
            hal_ble_uuid_t halUuid = svc.impl()->uuid.UUID();
   d7930:	ae03      	add	r6, sp, #12
   d7932:	463b      	mov	r3, r7
   d7934:	f107 0c10 	add.w	ip, r7, #16
   d7938:	46b6      	mov	lr, r6
   d793a:	6818      	ldr	r0, [r3, #0]
   d793c:	6859      	ldr	r1, [r3, #4]
   d793e:	4632      	mov	r2, r6
   d7940:	c203      	stmia	r2!, {r0, r1}
   d7942:	3308      	adds	r3, #8
   d7944:	4563      	cmp	r3, ip
   d7946:	4616      	mov	r6, r2
   d7948:	d1f7      	bne.n	d793a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x22>
   d794a:	6818      	ldr	r0, [r3, #0]
   d794c:	6010      	str	r0, [r2, #0]
            int ret = hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle, nullptr);
   d794e:	2300      	movs	r3, #0
   d7950:	f107 0214 	add.w	r2, r7, #20
   d7954:	4671      	mov	r1, lr
   d7956:	2001      	movs	r0, #1
   d7958:	f7fe f85c 	bl	d5a14 <hal_ble_gatt_server_add_service>
            if (ret != SYSTEM_ERROR_NONE) {
   d795c:	2800      	cmp	r0, #0
   d795e:	d145      	bne.n	d79ec <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7960:	4629      	mov	r1, r5
   d7962:	a802      	add	r0, sp, #8
   d7964:	f851 3b04 	ldr.w	r3, [r1], #4
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	f7fe febf 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d796e:	9b01      	ldr	r3, [sp, #4]
   d7970:	9303      	str	r3, [sp, #12]
   d7972:	a902      	add	r1, sp, #8
   d7974:	a804      	add	r0, sp, #16
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7976:	6867      	ldr	r7, [r4, #4]
   d7978:	f7fe feb8 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d797c:	6865      	ldr	r5, [r4, #4]
   d797e:	68a3      	ldr	r3, [r4, #8]
   d7980:	429d      	cmp	r5, r3
   d7982:	db14      	blt.n	d79ae <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x96>
   d7984:	3501      	adds	r5, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7986:	2d00      	cmp	r5, #0
   d7988:	dd0b      	ble.n	d79a2 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8a>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d798a:	00e8      	lsls	r0, r5, #3
   d798c:	f7fe f9c2 	bl	d5d14 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7990:	4606      	mov	r6, r0
   d7992:	b310      	cbz	r0, d79da <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xc2>
                return false;
            }
            move(d, data_, data_ + size_);
   d7994:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7998:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d799c:	f7ff ff86 	bl	d78ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d79a0:	e000      	b.n	d79a4 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8c>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d79a2:	2600      	movs	r6, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d79a4:	6820      	ldr	r0, [r4, #0]
   d79a6:	f7fe f9bd 	bl	d5d24 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d79aa:	6026      	str	r6, [r4, #0]
        capacity_ = n;
   d79ac:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d79ae:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d79b0:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d79b2:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d79b6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d79ba:	4629      	mov	r1, r5
   d79bc:	f105 0008 	add.w	r0, r5, #8
   d79c0:	f7ff ff74 	bl	d78ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d79c4:	b135      	cbz	r5, d79d4 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xbc>
   d79c6:	9b03      	ldr	r3, [sp, #12]
   d79c8:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d79cc:	a904      	add	r1, sp, #16
   d79ce:	1d28      	adds	r0, r5, #4
   d79d0:	f7fe fe8c 	bl	d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d79d4:	6863      	ldr	r3, [r4, #4]
   d79d6:	3301      	adds	r3, #1
   d79d8:	6063      	str	r3, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79da:	a804      	add	r0, sp, #16
   d79dc:	f7fe f9d2 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79e0:	a802      	add	r0, sp, #8
   d79e2:	f7fe f9cf 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                return ret;
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
   d79e6:	2000      	movs	r0, #0
   d79e8:	e000      	b.n	d79ec <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
        return services_;
    }

    int addService(BleService& svc) {
        if (getService(svc.impl()->uuid) != nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d79ea:	4801      	ldr	r0, [pc, #4]	; (d79f0 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd8>)
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }
   d79ec:	b009      	add	sp, #36	; 0x24
   d79ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d79f0:	fffffef2 	.word	0xfffffef2

000d79f4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d79f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d79f6:	2500      	movs	r5, #0
   d79f8:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d79fa:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d79fc:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d79fe:	2020      	movs	r0, #32
   d7a00:	f7fc fb49 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7a04:	4604      	mov	r4, r0
   d7a06:	b1b0      	cbz	r0, d7a36 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d7a08:	4603      	mov	r3, r0
   d7a0a:	a901      	add	r1, sp, #4
   d7a0c:	f803 5b01 	strb.w	r5, [r3], #1
   d7a10:	f8c0 5001 	str.w	r5, [r0, #1]
   d7a14:	605d      	str	r5, [r3, #4]
   d7a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7a1a:	82c3      	strh	r3, [r0, #22]
   d7a1c:	237f      	movs	r3, #127	; 0x7f
   d7a1e:	f8c0 500a 	str.w	r5, [r0, #10]
   d7a22:	f8c0 500e 	str.w	r5, [r0, #14]
   d7a26:	f8c0 5012 	str.w	r5, [r0, #18]
   d7a2a:	7603      	strb	r3, [r0, #24]
   d7a2c:	301c      	adds	r0, #28
   d7a2e:	f88d 5004 	strb.w	r5, [sp, #4]
   d7a32:	f7ff fcaa 	bl	d738a <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7a36:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7a38:	2014      	movs	r0, #20
   d7a3a:	9301      	str	r3, [sp, #4]
   d7a3c:	f7fc fb2b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7a40:	b128      	cbz	r0, d7a4e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7a42:	2301      	movs	r3, #1
   d7a44:	6043      	str	r3, [r0, #4]
   d7a46:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7a48:	4b06      	ldr	r3, [pc, #24]	; (d7a64 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d7a4a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7a4c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7a4e:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7a50:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7a52:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7a54:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7a56:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7a58:	f7fe f994 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d7a5c:	4630      	mov	r0, r6
   d7a5e:	b002      	add	sp, #8
   d7a60:	bd70      	pop	{r4, r5, r6, pc}
   d7a62:	bf00      	nop
   d7a64:	000d97ac 	.word	0x000d97ac

000d7a68 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7a68:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d7a6a:	f04f 0100 	mov.w	r1, #0
   d7a6e:	aa01      	add	r2, sp, #4
   d7a70:	4604      	mov	r4, r0
   d7a72:	f7ff ffbf 	bl	d79f4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d7a76:	4620      	mov	r0, r4
   d7a78:	b002      	add	sp, #8
   d7a7a:	bd10      	pop	{r4, pc}

000d7a7c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d7a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7a7e:	4604      	mov	r4, r0
   d7a80:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d7a82:	460d      	mov	r5, r1
   d7a84:	2900      	cmp	r1, #0
   d7a86:	f000 80a5 	beq.w	d7bd4 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d7a8a:	a803      	add	r0, sp, #12
   d7a8c:	f7ff f99c 	bl	d6dc8 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d7a90:	6863      	ldr	r3, [r4, #4]
   d7a92:	3b03      	subs	r3, #3
   d7a94:	2b07      	cmp	r3, #7
   d7a96:	f200 809a 	bhi.w	d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d7a9a:	e8df f003 	tbb	[pc, r3]
   d7a9e:	4404      	.short	0x4404
   d7aa0:	98989898 	.word	0x98989898
   d7aa4:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d7aa6:	a806      	add	r0, sp, #24
   d7aa8:	f7ff ffde 	bl	d7a68 <_ZN8particle13BlePeerDeviceC1Ev>
   d7aac:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d7aae:	89a2      	ldrh	r2, [r4, #12]
   d7ab0:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d7ab2:	8962      	ldrh	r2, [r4, #10]
   d7ab4:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d7ab6:	8922      	ldrh	r2, [r4, #8]
   d7ab8:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d7aba:	8922      	ldrh	r2, [r4, #8]
   d7abc:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d7abe:	8b22      	ldrh	r2, [r4, #24]
   d7ac0:	82da      	strh	r2, [r3, #22]
   d7ac2:	4622      	mov	r2, r4
   d7ac4:	7da1      	ldrb	r1, [r4, #22]
   d7ac6:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7aca:	9004      	str	r0, [sp, #16]
   d7acc:	8892      	ldrh	r2, [r2, #4]
   d7ace:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d7ad2:	9804      	ldr	r0, [sp, #16]
   d7ad4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d7ad8:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d7ada:	f8c3 0001 	str.w	r0, [r3, #1]
   d7ade:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d7ae2:	682b      	ldr	r3, [r5, #0]
   d7ae4:	b113      	cbz	r3, d7aec <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d7ae6:	68a9      	ldr	r1, [r5, #8]
   d7ae8:	a806      	add	r0, sp, #24
   d7aea:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d7aec:	7ba3      	ldrb	r3, [r4, #14]
   d7aee:	2b01      	cmp	r3, #1
   d7af0:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d7af2:	bf0b      	itete	eq
   d7af4:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d7af6:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d7af8:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d7afa:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7afc:	bf0c      	ite	eq
   d7afe:	69ac      	ldreq	r4, [r5, #24]
   d7b00:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d7b02:	6863      	ldr	r3, [r4, #4]
   d7b04:	2b00      	cmp	r3, #0
   d7b06:	dc0a      	bgt.n	d7b1e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7b08:	a906      	add	r1, sp, #24
   d7b0a:	a808      	add	r0, sp, #32
   d7b0c:	f7ff fc21 	bl	d7352 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d7b10:	a908      	add	r1, sp, #32
   d7b12:	4620      	mov	r0, r4
   d7b14:	f7ff fce0 	bl	d74d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b18:	a809      	add	r0, sp, #36	; 0x24
   d7b1a:	f7fe f933 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b1e:	a807      	add	r0, sp, #28
   d7b20:	f7fe f930 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b24:	e053      	b.n	d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d7b26:	89a1      	ldrh	r1, [r4, #12]
   d7b28:	4628      	mov	r0, r5
   d7b2a:	f7ff fbdf 	bl	d72ec <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d7b2e:	4604      	mov	r4, r0
   d7b30:	2800      	cmp	r0, #0
   d7b32:	d04c      	beq.n	d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d7b34:	686b      	ldr	r3, [r5, #4]
   d7b36:	b10b      	cbz	r3, d7b3c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d7b38:	68e9      	ldr	r1, [r5, #12]
   d7b3a:	4798      	blx	r3
   d7b3c:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d7b3e:	781a      	ldrb	r2, [r3, #0]
   d7b40:	2a01      	cmp	r2, #1
   d7b42:	d104      	bne.n	d7b4e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d7b44:	4621      	mov	r1, r4
   d7b46:	69e8      	ldr	r0, [r5, #28]
   d7b48:	f7ff fc80 	bl	d744c <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d7b4c:	e03f      	b.n	d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d7b4e:	69da      	ldr	r2, [r3, #28]
   d7b50:	69a8      	ldr	r0, [r5, #24]
   d7b52:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7b54:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d7b56:	2600      	movs	r6, #0
   d7b58:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d7b5c:	4299      	cmp	r1, r3
   d7b5e:	d00d      	beq.n	d7b7c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d7b60:	681d      	ldr	r5, [r3, #0]
   d7b62:	69aa      	ldr	r2, [r5, #24]
   d7b64:	69ed      	ldr	r5, [r5, #28]
   d7b66:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d7b6a:	4295      	cmp	r5, r2
   d7b6c:	d004      	beq.n	d7b78 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d7b6e:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d7b72:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d7b76:	e7f8      	b.n	d7b6a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d7b78:	3308      	adds	r3, #8
   d7b7a:	e7ef      	b.n	d7b5c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d7b7c:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d7b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d7b82:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d7b84:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d7b86:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d7b88:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d7b8a:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d7b8c:	f8c3 200a 	str.w	r2, [r3, #10]
   d7b90:	f8c3 200e 	str.w	r2, [r3, #14]
   d7b94:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d7b98:	f7ff fc1e 	bl	d73d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d7b9c:	e017      	b.n	d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d7b9e:	8aa1      	ldrh	r1, [r4, #20]
   d7ba0:	4628      	mov	r0, r5
   d7ba2:	f7ff fba3 	bl	d72ec <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d7ba6:	b190      	cbz	r0, d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d7ba8:	8ae1      	ldrh	r1, [r4, #22]
   d7baa:	9000      	str	r0, [sp, #0]
   d7bac:	68e3      	ldr	r3, [r4, #12]
   d7bae:	6922      	ldr	r2, [r4, #16]
   d7bb0:	6928      	ldr	r0, [r5, #16]
   d7bb2:	e00a      	b.n	d7bca <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d7bb4:	8aa1      	ldrh	r1, [r4, #20]
   d7bb6:	4628      	mov	r0, r5
   d7bb8:	f7ff fb98 	bl	d72ec <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d7bbc:	b138      	cbz	r0, d7bce <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d7bbe:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d7bc0:	8ae1      	ldrh	r1, [r4, #22]
   d7bc2:	9000      	str	r0, [sp, #0]
   d7bc4:	68e3      	ldr	r3, [r4, #12]
   d7bc6:	6922      	ldr	r2, [r4, #16]
   d7bc8:	69e8      	ldr	r0, [r5, #28]
   d7bca:	f7ff fadb 	bl	d7184 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d7bce:	a803      	add	r0, sp, #12
   d7bd0:	f7ff f908 	bl	d6de4 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d7bd4:	b00b      	add	sp, #44	; 0x2c
   d7bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7bd8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d7bd8:	b510      	push	{r4, lr}
   d7bda:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d7bdc:	6840      	ldr	r0, [r0, #4]
   d7bde:	b108      	cbz	r0, d7be4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7be0:	f7fc fa5b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d7be4:	4620      	mov	r0, r4
   d7be6:	bd10      	pop	{r4, pc}

000d7be8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7be8:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7bea:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7bec:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d7bee:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
        this->svcUuid = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d7bf2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   d7bf6:	f7fe fe9e 	bl	d6936 <_ZN6StringD1Ev>
   d7bfa:	4668      	mov	r0, sp
   d7bfc:	f7ff ffec 	bl	d7bd8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7c00:	b003      	add	sp, #12
   d7c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7c08:	b538      	push	{r3, r4, r5, lr}
   d7c0a:	2300      	movs	r3, #0
   d7c0c:	4604      	mov	r4, r0
   d7c0e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7c10:	2014      	movs	r0, #20
   d7c12:	460d      	mov	r5, r1
   d7c14:	f7fc fa3f 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7c18:	b128      	cbz	r0, d7c26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7c1a:	2301      	movs	r3, #1
   d7c1c:	6043      	str	r3, [r0, #4]
   d7c1e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7c20:	4b02      	ldr	r3, [pc, #8]	; (d7c2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d7c22:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7c24:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d7c26:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d7c28:	4620      	mov	r0, r4
   d7c2a:	bd38      	pop	{r3, r4, r5, pc}
   d7c2c:	000d9774 	.word	0x000d9774

000d7c30 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
BleCharacteristic::BleCharacteristic(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
        : impl_(std::make_shared<BleCharacteristicImpl>(desc, properties, callback, context)) {
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c34:	b088      	sub	sp, #32
   d7c36:	4606      	mov	r6, r0
   d7c38:	461d      	mov	r5, r3
   d7c3a:	2060      	movs	r0, #96	; 0x60
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7c3c:	2300      	movs	r3, #0
   d7c3e:	4688      	mov	r8, r1
   d7c40:	4617      	mov	r7, r2
   d7c42:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7c44:	9305      	str	r3, [sp, #20]
   d7c46:	f7fc fa26 	bl	d4096 <_Znwj>
   d7c4a:	f8cd d018 	str.w	sp, [sp, #24]
   d7c4e:	4604      	mov	r4, r0
   d7c50:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7c52:	b300      	cbz	r0, d7c96 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x66>
              svcImpl(nullptr),
              valid_(false) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d7c54:	f7ff fa36 	bl	d70c4 <_ZN8particle21BleCharacteristicImplC1Ev>
        this->description = desc;
   d7c58:	4641      	mov	r1, r8
   d7c5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d7c5e:	f7fe fec4 	bl	d69ea <_ZN6StringaSEPKc>
        this->properties = properties;
        this->dataCb = callback;
   d7c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7c64:	64e3      	str	r3, [r4, #76]	; 0x4c
        this->context = context;
   d7c66:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7c68:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        this->description = desc;
        this->properties = properties;
   d7c6a:	7027      	strb	r7, [r4, #0]
        this->context = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
   d7c6c:	462b      	mov	r3, r5
   d7c6e:	1ca2      	adds	r2, r4, #2
   d7c70:	f105 0114 	add.w	r1, r5, #20
   d7c74:	f853 0b04 	ldr.w	r0, [r3], #4
   d7c78:	f842 0b04 	str.w	r0, [r2], #4
   d7c7c:	428b      	cmp	r3, r1
   d7c7e:	d1f9      	bne.n	d7c74 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x44>
        this->svcUuid = svcUuid;
   d7c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7c82:	f104 0216 	add.w	r2, r4, #22
   d7c86:	f103 0114 	add.w	r1, r3, #20
   d7c8a:	f853 0b04 	ldr.w	r0, [r3], #4
   d7c8e:	f842 0b04 	str.w	r0, [r2], #4
   d7c92:	428b      	cmp	r3, r1
   d7c94:	d1f9      	bne.n	d7c8a <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x5a>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7c96:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d7c98:	2500      	movs	r5, #0
   d7c9a:	ab01      	add	r3, sp, #4
   d7c9c:	aa02      	add	r2, sp, #8
   d7c9e:	a803      	add	r0, sp, #12
   d7ca0:	9507      	str	r5, [sp, #28]
   d7ca2:	f7ff ffb1 	bl	d7c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7ca6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7ca8:	9a05      	ldr	r2, [sp, #20]
   d7caa:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7cac:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7cae:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7cb0:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7cb2:	f7fe f867 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d7cb6:	a806      	add	r0, sp, #24
   d7cb8:	f7ff ff8e 	bl	d7bd8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7cbc:	9b04      	ldr	r3, [sp, #16]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7cbe:	9a05      	ldr	r2, [sp, #20]
   d7cc0:	6831      	ldr	r1, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7cc2:	6033      	str	r3, [r6, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7cc4:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7cc6:	6873      	ldr	r3, [r6, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7cc8:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d7cca:	6072      	str	r2, [r6, #4]
	_M_pi = __tmp;
   d7ccc:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7cd0:	9505      	str	r5, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7cd2:	9504      	str	r5, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7cd4:	f7fe f856 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7cd8:	a805      	add	r0, sp, #20
   d7cda:	f7fe f853 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d7cde:	b008      	add	sp, #32
   d7ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ce4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d7ce4:	b510      	push	{r4, lr}
   d7ce6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d7ce8:	6840      	ldr	r0, [r0, #4]
   d7cea:	b108      	cbz	r0, d7cf0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7cec:	f7fc f9d5 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d7cf0:	4620      	mov	r0, r4
   d7cf2:	bd10      	pop	{r4, pc}

000d7cf4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7cf6:	6905      	ldr	r5, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7cf8:	300c      	adds	r0, #12
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7cfa:	69ac      	ldr	r4, [r5, #24]
   d7cfc:	69eb      	ldr	r3, [r5, #28]
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d7cfe:	e88d 0021 	stmia.w	sp, {r0, r5}
   d7d02:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7d06:	42a6      	cmp	r6, r4
   d7d08:	d004      	beq.n	d7d14 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x20>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7d0a:	1d20      	adds	r0, r4, #4
   d7d0c:	f7fe f83a 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7d10:	3408      	adds	r4, #8
   d7d12:	e7f8      	b.n	d7d06 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7d14:	69a8      	ldr	r0, [r5, #24]
   d7d16:	f7fe f805 	bl	d5d24 <free>
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7d1a:	4668      	mov	r0, sp
   d7d1c:	f7ff ffe2 	bl	d7ce4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7d20:	b002      	add	sp, #8
   d7d22:	bd70      	pop	{r4, r5, r6, pc}

000d7d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7d24:	b538      	push	{r3, r4, r5, lr}
   d7d26:	2300      	movs	r3, #0
   d7d28:	4604      	mov	r4, r0
   d7d2a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7d2c:	2014      	movs	r0, #20
   d7d2e:	460d      	mov	r5, r1
   d7d30:	f7fc f9b1 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7d34:	b128      	cbz	r0, d7d42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7d36:	2301      	movs	r3, #1
   d7d38:	6043      	str	r3, [r0, #4]
   d7d3a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7d3c:	4b02      	ldr	r3, [pc, #8]	; (d7d48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d7d3e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7d40:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d7d42:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d7d44:	4620      	mov	r0, r4
   d7d46:	bd38      	pop	{r3, r4, r5, pc}
   d7d48:	000d9790 	.word	0x000d9790

000d7d4c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
   d7d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7d4e:	2600      	movs	r6, #0
   d7d50:	b087      	sub	sp, #28
   d7d52:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7d54:	6046      	str	r6, [r0, #4]
   d7d56:	4607      	mov	r7, r0
   d7d58:	2024      	movs	r0, #36	; 0x24
   d7d5a:	460d      	mov	r5, r1
   d7d5c:	f7fc f99b 	bl	d4096 <_Znwj>
   d7d60:	f8cd d010 	str.w	sp, [sp, #16]
   d7d64:	4604      	mov	r4, r0
   d7d66:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7d68:	b1a0      	cbz	r0, d7d94 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x48>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid(),
              startHandle(BLE_INVALID_ATTR_HANDLE),
              endHandle(BLE_INVALID_ATTR_HANDLE) {
   d7d6a:	f7ff f825 	bl	d6db8 <_ZN8particle7BleUuidC1Ev>
   d7d6e:	82a6      	strh	r6, [r4, #20]
   d7d70:	82e6      	strh	r6, [r4, #22]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7d72:	61a6      	str	r6, [r4, #24]
   d7d74:	61e6      	str	r6, [r4, #28]
   d7d76:	6226      	str	r6, [r4, #32]
    }
    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid = svcUuid;
   d7d78:	462b      	mov	r3, r5
   d7d7a:	4622      	mov	r2, r4
   d7d7c:	f105 0610 	add.w	r6, r5, #16
   d7d80:	6818      	ldr	r0, [r3, #0]
   d7d82:	6859      	ldr	r1, [r3, #4]
   d7d84:	4615      	mov	r5, r2
   d7d86:	c503      	stmia	r5!, {r0, r1}
   d7d88:	3308      	adds	r3, #8
   d7d8a:	42b3      	cmp	r3, r6
   d7d8c:	462a      	mov	r2, r5
   d7d8e:	d1f7      	bne.n	d7d80 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x34>
   d7d90:	6818      	ldr	r0, [r3, #0]
   d7d92:	6028      	str	r0, [r5, #0]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d7d94:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7d96:	4621      	mov	r1, r4
   d7d98:	9305      	str	r3, [sp, #20]
   d7d9a:	aa02      	add	r2, sp, #8
   d7d9c:	ab01      	add	r3, sp, #4
   d7d9e:	a803      	add	r0, sp, #12
   d7da0:	f7ff ffc0 	bl	d7d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7da4:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7da6:	687a      	ldr	r2, [r7, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7da8:	603c      	str	r4, [r7, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7daa:	607b      	str	r3, [r7, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7dac:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7dae:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7db0:	f7fd ffe8 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d7db4:	a804      	add	r0, sp, #16
   d7db6:	f7ff ff95 	bl	d7ce4 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
}
   d7dba:	4638      	mov	r0, r7
   d7dbc:	b007      	add	sp, #28
   d7dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7dc0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>:
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d7dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7dc2:	680b      	ldr	r3, [r1, #0]
   d7dc4:	b087      	sub	sp, #28
   d7dc6:	4605      	mov	r5, r0
   d7dc8:	460c      	mov	r4, r1
        if (characteristic.impl() == nullptr) {
   d7dca:	2b00      	cmp	r3, #0
   d7dcc:	d046      	beq.n	d7e5c <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x9c>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        characteristic.impl()->isLocal = local_;
   d7dce:	7b02      	ldrb	r2, [r0, #12]
   d7dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        if (local_) {
   d7dd4:	7b03      	ldrb	r3, [r0, #12]
   d7dd6:	b1c3      	cbz	r3, d7e0a <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
            LOG_DEBUG(TRACE, "< LOCAL CHARACTERISTIC >");
            if (!characteristic.impl()->svcUuid.isValid()) {
   d7dd8:	6808      	ldr	r0, [r1, #0]
   d7dda:	3016      	adds	r0, #22
   d7ddc:	f7ff f8a3 	bl	d6f26 <_ZNK8particle7BleUuid7isValidEv>
   d7de0:	b998      	cbnz	r0, d7e0a <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
                BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID);
   d7de2:	2201      	movs	r2, #1
   d7de4:	4921      	ldr	r1, [pc, #132]	; (d7e6c <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xac>)
   d7de6:	a801      	add	r0, sp, #4
   d7de8:	f7ff f808 	bl	d6dfc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7dec:	6823      	ldr	r3, [r4, #0]
                LOG_DEBUG(TRACE, "Assign default service UUID.");
                characteristic.impl()->svcUuid = newUuid;
   d7dee:	aa01      	add	r2, sp, #4
   d7df0:	3316      	adds	r3, #22
   d7df2:	af05      	add	r7, sp, #20
   d7df4:	4616      	mov	r6, r2
   d7df6:	ce03      	ldmia	r6!, {r0, r1}
   d7df8:	42be      	cmp	r6, r7
   d7dfa:	6018      	str	r0, [r3, #0]
   d7dfc:	6059      	str	r1, [r3, #4]
   d7dfe:	4632      	mov	r2, r6
   d7e00:	f103 0308 	add.w	r3, r3, #8
   d7e04:	d1f6      	bne.n	d7df4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x34>
   d7e06:	6830      	ldr	r0, [r6, #0]
   d7e08:	6018      	str	r0, [r3, #0]
            }
        }
        BleService* service = getService(characteristic.impl()->svcUuid);
   d7e0a:	6826      	ldr	r6, [r4, #0]
   d7e0c:	3616      	adds	r6, #22
   d7e0e:	4631      	mov	r1, r6
   d7e10:	4628      	mov	r0, r5
   d7e12:	f7ff f9f8 	bl	d7206 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
        if (service != nullptr) {
   d7e16:	b130      	cbz	r0, d7e26 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x66>
   d7e18:	6800      	ldr	r0, [r0, #0]
            if (service->impl() != nullptr) {
   d7e1a:	b308      	cbz	r0, d7e60 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa0>
                return service->impl()->addCharacteristic(characteristic);
   d7e1c:	4621      	mov	r1, r4
   d7e1e:	f7ff fcb3 	bl	d7788 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d7e22:	4604      	mov	r4, r0
   d7e24:	e01e      	b.n	d7e64 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
            }
            return SYSTEM_ERROR_INTERNAL;
        } else {
            BleService service(characteristic.impl()->svcUuid);
   d7e26:	4631      	mov	r1, r6
   d7e28:	a801      	add	r0, sp, #4
   d7e2a:	f7ff ff8f 	bl	d7d4c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
            if (addService(service) == SYSTEM_ERROR_NONE) {
   d7e2e:	a901      	add	r1, sp, #4
   d7e30:	4628      	mov	r0, r5
   d7e32:	f7ff fd71 	bl	d7918 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>
   d7e36:	b958      	cbnz	r0, d7e50 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x90>
   d7e38:	686b      	ldr	r3, [r5, #4]
   d7e3a:	682a      	ldr	r2, [r5, #0]
   d7e3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7e40:	3b01      	subs	r3, #1
                return services_.last().impl()->addCharacteristic(characteristic);
   d7e42:	4621      	mov	r1, r4
   d7e44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   d7e48:	f7ff fc9e 	bl	d7788 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d7e4c:	4604      	mov	r4, r0
   d7e4e:	e001      	b.n	d7e54 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x94>
            }
            return SYSTEM_ERROR_INTERNAL;
   d7e50:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7e54:	a802      	add	r0, sp, #8
   d7e56:	f7fd ff95 	bl	d5d84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e5a:	e003      	b.n	d7e64 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        if (characteristic.impl() == nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7e5c:	4c04      	ldr	r4, [pc, #16]	; (d7e70 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xb0>)
   d7e5e:	e001      	b.n	d7e64 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        BleService* service = getService(characteristic.impl()->svcUuid);
        if (service != nullptr) {
            if (service->impl() != nullptr) {
                return service->impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
   d7e60:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
            if (addService(service) == SYSTEM_ERROR_NONE) {
                return services_.last().impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
        }
    }
   d7e64:	4620      	mov	r0, r4
   d7e66:	b007      	add	sp, #28
   d7e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e6a:	bf00      	nop
   d7e6c:	000d97c0 	.word	0x000d97c0
   d7e70:	fffffef2 	.word	0xfffffef2

000d7e74 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>:
int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
   d7e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7e76:	4604      	mov	r4, r0
   d7e78:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7e7a:	a801      	add	r0, sp, #4
   d7e7c:	f7fe ffa4 	bl	d6dc8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
   d7e80:	4629      	mov	r1, r5
   d7e82:	6920      	ldr	r0, [r4, #16]
   d7e84:	f7ff ff9c 	bl	d7dc0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>
   d7e88:	4604      	mov	r4, r0
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
    WiringBleLock lk;
   d7e8a:	a801      	add	r0, sp, #4
   d7e8c:	f7fe ffaa 	bl	d6de4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
}
   d7e90:	4620      	mov	r0, r4
   d7e92:	b003      	add	sp, #12
   d7e94:	bd30      	pop	{r4, r5, pc}
	...

000d7e98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e98:	4802      	ldr	r0, [pc, #8]	; (d7ea4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7e9a:	2300      	movs	r3, #0
   d7e9c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7e9e:	f7fd bd79 	b.w	d5994 <os_mutex_recursive_create>
   d7ea2:	bf00      	nop
   d7ea4:	2003e5e0 	.word	0x2003e5e0

000d7ea8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7ea8:	4770      	bx	lr

000d7eaa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7eaa:	7441      	strb	r1, [r0, #17]
   d7eac:	4770      	bx	lr

000d7eae <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7eae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7eb0:	7c00      	ldrb	r0, [r0, #16]
   d7eb2:	f7fd fd27 	bl	d5904 <HAL_USART_Available_Data_For_Write>
}
   d7eb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7eba:	bd08      	pop	{r3, pc}

000d7ebc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7ebc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7ebe:	7c00      	ldrb	r0, [r0, #16]
   d7ec0:	f7fd fcf8 	bl	d58b4 <HAL_USART_Available_Data>
}
   d7ec4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ec8:	bd08      	pop	{r3, pc}

000d7eca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7eca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7ecc:	7c00      	ldrb	r0, [r0, #16]
   d7ece:	f7fd fd01 	bl	d58d4 <HAL_USART_Peek_Data>
}
   d7ed2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7ed6:	bf28      	it	cs
   d7ed8:	f04f 30ff 	movcs.w	r0, #4294967295
   d7edc:	bd08      	pop	{r3, pc}

000d7ede <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7ede:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7ee0:	7c00      	ldrb	r0, [r0, #16]
   d7ee2:	f7fd fcef 	bl	d58c4 <HAL_USART_Read_Data>
}
   d7ee6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7eea:	bf28      	it	cs
   d7eec:	f04f 30ff 	movcs.w	r0, #4294967295
   d7ef0:	bd08      	pop	{r3, pc}

000d7ef2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7ef2:	7c00      	ldrb	r0, [r0, #16]
   d7ef4:	f7fd bcf6 	b.w	d58e4 <HAL_USART_Flush_Data>

000d7ef8 <_ZN11USARTSerialD0Ev>:
   d7ef8:	b510      	push	{r4, lr}
   d7efa:	2114      	movs	r1, #20
   d7efc:	4604      	mov	r4, r0
   d7efe:	f000 f9c8 	bl	d8292 <_ZdlPvj>
   d7f02:	4620      	mov	r0, r4
   d7f04:	bd10      	pop	{r4, pc}

000d7f06 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7f06:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f08:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7f0a:	4604      	mov	r4, r0
   d7f0c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f0e:	b925      	cbnz	r5, d7f1a <_ZN11USARTSerial5writeEh+0x14>
   d7f10:	7c00      	ldrb	r0, [r0, #16]
   d7f12:	f7fd fcf7 	bl	d5904 <HAL_USART_Available_Data_For_Write>
   d7f16:	2800      	cmp	r0, #0
   d7f18:	dd05      	ble.n	d7f26 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7f1a:	4631      	mov	r1, r6
   d7f1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7f22:	f7fd bcbf 	b.w	d58a4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7f26:	4628      	mov	r0, r5
   d7f28:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7f2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7f2c:	b510      	push	{r4, lr}
   d7f2e:	4604      	mov	r4, r0
   d7f30:	4608      	mov	r0, r1
   d7f32:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7f34:	2200      	movs	r2, #0
   d7f36:	6062      	str	r2, [r4, #4]
   d7f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7f3c:	60a2      	str	r2, [r4, #8]
   d7f3e:	4a05      	ldr	r2, [pc, #20]	; (d7f54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7f40:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7f42:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7f44:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7f46:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7f48:	461a      	mov	r2, r3
   d7f4a:	f7fd fca3 	bl	d5894 <HAL_USART_Init>
}
   d7f4e:	4620      	mov	r0, r4
   d7f50:	bd10      	pop	{r4, pc}
   d7f52:	bf00      	nop
   d7f54:	000d9874 	.word	0x000d9874

000d7f58 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7f58:	2300      	movs	r3, #0
   d7f5a:	7c00      	ldrb	r0, [r0, #16]
   d7f5c:	f7fd bcda 	b.w	d5914 <HAL_USART_BeginConfig>

000d7f60 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7f60:	2200      	movs	r2, #0
   d7f62:	f7ff bff9 	b.w	d7f58 <_ZN11USARTSerial5beginEmm>

000d7f66 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7f66:	7c00      	ldrb	r0, [r0, #16]
   d7f68:	f7fd bcc4 	b.w	d58f4 <HAL_USART_Is_Enabled>

000d7f6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7f6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7f6e:	4d0c      	ldr	r5, [pc, #48]	; (d7fa0 <_Z22__fetch_global_Serial1v+0x34>)
   d7f70:	6829      	ldr	r1, [r5, #0]
   d7f72:	f011 0401 	ands.w	r4, r1, #1
   d7f76:	d111      	bne.n	d7f9c <_Z22__fetch_global_Serial1v+0x30>
   d7f78:	4628      	mov	r0, r5
   d7f7a:	f7fc f892 	bl	d40a2 <__cxa_guard_acquire>
   d7f7e:	b168      	cbz	r0, d7f9c <_Z22__fetch_global_Serial1v+0x30>
   d7f80:	4a08      	ldr	r2, [pc, #32]	; (d7fa4 <_Z22__fetch_global_Serial1v+0x38>)
   d7f82:	4b09      	ldr	r3, [pc, #36]	; (d7fa8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7f84:	4809      	ldr	r0, [pc, #36]	; (d7fac <_Z22__fetch_global_Serial1v+0x40>)
   d7f86:	4621      	mov	r1, r4
   d7f88:	f7ff ffd0 	bl	d7f2c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7f8c:	4628      	mov	r0, r5
   d7f8e:	f7fc f88d 	bl	d40ac <__cxa_guard_release>
   d7f92:	4a07      	ldr	r2, [pc, #28]	; (d7fb0 <_Z22__fetch_global_Serial1v+0x44>)
   d7f94:	4907      	ldr	r1, [pc, #28]	; (d7fb4 <_Z22__fetch_global_Serial1v+0x48>)
   d7f96:	4805      	ldr	r0, [pc, #20]	; (d7fac <_Z22__fetch_global_Serial1v+0x40>)
   d7f98:	f000 f976 	bl	d8288 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7f9c:	4803      	ldr	r0, [pc, #12]	; (d7fac <_Z22__fetch_global_Serial1v+0x40>)
   d7f9e:	bd38      	pop	{r3, r4, r5, pc}
   d7fa0:	2003e67c 	.word	0x2003e67c
   d7fa4:	2003e680 	.word	0x2003e680
   d7fa8:	2003e5f8 	.word	0x2003e5f8
   d7fac:	2003e5e4 	.word	0x2003e5e4
   d7fb0:	2003e1e0 	.word	0x2003e1e0
   d7fb4:	000d7ea9 	.word	0x000d7ea9

000d7fb8 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7fb8:	b510      	push	{r4, lr}
   d7fba:	2400      	movs	r4, #0
   d7fbc:	7004      	strb	r4, [r0, #0]
   d7fbe:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d7fc0:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d7fc2:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d7fc6:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d7fc8:	dd07      	ble.n	d7fda <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d7fca:	3901      	subs	r1, #1
   d7fcc:	4299      	cmp	r1, r3
   d7fce:	d209      	bcs.n	d7fe4 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d7fd0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d7fd4:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d7fd6:	2301      	movs	r3, #1
   d7fd8:	e001      	b.n	d7fde <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d7fda:	d102      	bne.n	d7fe2 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d7fdc:	2302      	movs	r3, #2
   d7fde:	7003      	strb	r3, [r0, #0]
   d7fe0:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d7fe2:	8041      	strh	r1, [r0, #2]
    }
}
   d7fe4:	bd10      	pop	{r4, pc}
	...

000d7fe8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7fe8:	b570      	push	{r4, r5, r6, lr}
   d7fea:	b086      	sub	sp, #24
   d7fec:	4616      	mov	r6, r2
   d7fee:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7ff0:	2300      	movs	r3, #0
   d7ff2:	9302      	str	r3, [sp, #8]
   d7ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d7ff6:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7ff8:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d7ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7ffc:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d7ffe:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d8000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8002:	4631      	mov	r1, r6
   d8004:	4628      	mov	r0, r5
   d8006:	f7fd fe7b 	bl	d5d00 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d800a:	4633      	mov	r3, r6
   d800c:	462a      	mov	r2, r5
   d800e:	4601      	mov	r1, r0
   d8010:	a804      	add	r0, sp, #16
   d8012:	f7ff ffd1 	bl	d7fb8 <_ZN11SleepResultC1EiPKtj>
   d8016:	4b06      	ldr	r3, [pc, #24]	; (d8030 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d8018:	9804      	ldr	r0, [sp, #16]
   d801a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d801e:	6018      	str	r0, [r3, #0]
   d8020:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d8022:	681a      	ldr	r2, [r3, #0]
   d8024:	889b      	ldrh	r3, [r3, #4]
   d8026:	6022      	str	r2, [r4, #0]
}
   d8028:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d802a:	80a3      	strh	r3, [r4, #4]
}
   d802c:	b006      	add	sp, #24
   d802e:	bd70      	pop	{r4, r5, r6, pc}
   d8030:	2003e704 	.word	0x2003e704

000d8034 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d8034:	4b04      	ldr	r3, [pc, #16]	; (d8048 <_GLOBAL__sub_I_System+0x14>)
   d8036:	2000      	movs	r0, #0
   d8038:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d803c:	7018      	strb	r0, [r3, #0]
   d803e:	8058      	strh	r0, [r3, #2]
   d8040:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8042:	f7fd be39 	b.w	d5cb8 <set_system_mode>
   d8046:	bf00      	nop
   d8048:	2003e704 	.word	0x2003e704

000d804c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d804c:	2200      	movs	r2, #0
   d804e:	4611      	mov	r1, r2
   d8050:	6840      	ldr	r0, [r0, #4]
   d8052:	f7fd be19 	b.w	d5c88 <network_listening>

000d8056 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8056:	2200      	movs	r2, #0
   d8058:	4611      	mov	r1, r2
   d805a:	6840      	ldr	r0, [r0, #4]
   d805c:	f7fd be24 	b.w	d5ca8 <network_get_listen_timeout>

000d8060 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8060:	2200      	movs	r2, #0
   d8062:	6840      	ldr	r0, [r0, #4]
   d8064:	f7fd be18 	b.w	d5c98 <network_set_listen_timeout>

000d8068 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8068:	2200      	movs	r2, #0
   d806a:	f081 0101 	eor.w	r1, r1, #1
   d806e:	6840      	ldr	r0, [r0, #4]
   d8070:	f7fd be02 	b.w	d5c78 <network_listen>

000d8074 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8074:	2300      	movs	r3, #0
   d8076:	461a      	mov	r2, r3
   d8078:	4619      	mov	r1, r3
   d807a:	6840      	ldr	r0, [r0, #4]
   d807c:	f7fd bdf4 	b.w	d5c68 <network_off>

000d8080 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8080:	2300      	movs	r3, #0
   d8082:	461a      	mov	r2, r3
   d8084:	4619      	mov	r1, r3
   d8086:	6840      	ldr	r0, [r0, #4]
   d8088:	f7fd bde6 	b.w	d5c58 <network_on>

000d808c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d808c:	2200      	movs	r2, #0
   d808e:	4611      	mov	r1, r2
   d8090:	6840      	ldr	r0, [r0, #4]
   d8092:	f7fd bdd9 	b.w	d5c48 <network_ready>

000d8096 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8096:	2200      	movs	r2, #0
   d8098:	4611      	mov	r1, r2
   d809a:	6840      	ldr	r0, [r0, #4]
   d809c:	f7fd bdc4 	b.w	d5c28 <network_connecting>

000d80a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d80a0:	2200      	movs	r2, #0
   d80a2:	2102      	movs	r1, #2
   d80a4:	6840      	ldr	r0, [r0, #4]
   d80a6:	f7fd bdc7 	b.w	d5c38 <network_disconnect>

000d80aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d80aa:	2300      	movs	r3, #0
   d80ac:	461a      	mov	r2, r3
   d80ae:	6840      	ldr	r0, [r0, #4]
   d80b0:	f7fd bdb2 	b.w	d5c18 <network_connect>

000d80b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d80b4:	4b02      	ldr	r3, [pc, #8]	; (d80c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d80b6:	2203      	movs	r2, #3
   d80b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d80ba:	4a02      	ldr	r2, [pc, #8]	; (d80c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d80bc:	601a      	str	r2, [r3, #0]
   d80be:	4770      	bx	lr
   d80c0:	2003e70c 	.word	0x2003e70c
   d80c4:	000d98a4 	.word	0x000d98a4

000d80c8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d80c8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d80ca:	4d0b      	ldr	r5, [pc, #44]	; (d80f8 <_Z19__fetch_global_Wirev+0x30>)
   d80cc:	6829      	ldr	r1, [r5, #0]
   d80ce:	f011 0401 	ands.w	r4, r1, #1
   d80d2:	d10f      	bne.n	d80f4 <_Z19__fetch_global_Wirev+0x2c>
   d80d4:	4628      	mov	r0, r5
   d80d6:	f7fb ffe4 	bl	d40a2 <__cxa_guard_acquire>
   d80da:	b158      	cbz	r0, d80f4 <_Z19__fetch_global_Wirev+0x2c>
   d80dc:	4621      	mov	r1, r4
   d80de:	4807      	ldr	r0, [pc, #28]	; (d80fc <_Z19__fetch_global_Wirev+0x34>)
   d80e0:	f7fe facc 	bl	d667c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d80e4:	4628      	mov	r0, r5
   d80e6:	f7fb ffe1 	bl	d40ac <__cxa_guard_release>
   d80ea:	4a05      	ldr	r2, [pc, #20]	; (d8100 <_Z19__fetch_global_Wirev+0x38>)
   d80ec:	4905      	ldr	r1, [pc, #20]	; (d8104 <_Z19__fetch_global_Wirev+0x3c>)
   d80ee:	4803      	ldr	r0, [pc, #12]	; (d80fc <_Z19__fetch_global_Wirev+0x34>)
   d80f0:	f000 f8ca 	bl	d8288 <__aeabi_atexit>
	return wire;
}
   d80f4:	4801      	ldr	r0, [pc, #4]	; (d80fc <_Z19__fetch_global_Wirev+0x34>)
   d80f6:	bd38      	pop	{r3, r4, r5, pc}
   d80f8:	2003e714 	.word	0x2003e714
   d80fc:	2003e718 	.word	0x2003e718
   d8100:	2003e1e0 	.word	0x2003e1e0
   d8104:	000d6623 	.word	0x000d6623

000d8108 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8108:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d810a:	4c0c      	ldr	r4, [pc, #48]	; (d813c <_GLOBAL__sub_I_SPI+0x34>)
   d810c:	4e0c      	ldr	r6, [pc, #48]	; (d8140 <_GLOBAL__sub_I_SPI+0x38>)
   d810e:	4d0d      	ldr	r5, [pc, #52]	; (d8144 <_GLOBAL__sub_I_SPI+0x3c>)
   d8110:	2100      	movs	r1, #0
   d8112:	4620      	mov	r0, r4
   d8114:	f7fe fa6e 	bl	d65f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8118:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d811a:	4c0b      	ldr	r4, [pc, #44]	; (d8148 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d811c:	4632      	mov	r2, r6
   d811e:	4629      	mov	r1, r5
   d8120:	f000 f8b2 	bl	d8288 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8124:	2101      	movs	r1, #1
   d8126:	4620      	mov	r0, r4
   d8128:	f7fe fa64 	bl	d65f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d812c:	4632      	mov	r2, r6
   d812e:	4629      	mov	r1, r5
   d8130:	4620      	mov	r0, r4
   d8132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8136:	f000 b8a7 	b.w	d8288 <__aeabi_atexit>
   d813a:	bf00      	nop
   d813c:	2003e730 	.word	0x2003e730
   d8140:	2003e1e0 	.word	0x2003e1e0
   d8144:	000d65e5 	.word	0x000d65e5
   d8148:	2003e740 	.word	0x2003e740

000d814c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d814c:	b510      	push	{r4, lr}
   d814e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8150:	480f      	ldr	r0, [pc, #60]	; (d8190 <pinAvailable+0x44>)
   d8152:	f7fe fa63 	bl	d661c <_ZN8SPIClass9isEnabledEv>
   d8156:	b128      	cbz	r0, d8164 <pinAvailable+0x18>
   d8158:	f1a4 030b 	sub.w	r3, r4, #11
   d815c:	2b02      	cmp	r3, #2
   d815e:	d801      	bhi.n	d8164 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8160:	2000      	movs	r0, #0
   d8162:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8164:	f7ff ffb0 	bl	d80c8 <_Z19__fetch_global_Wirev>
   d8168:	f7fe fabc 	bl	d66e4 <_ZN7TwoWire9isEnabledEv>
   d816c:	b108      	cbz	r0, d8172 <pinAvailable+0x26>
   d816e:	2c01      	cmp	r4, #1
   d8170:	d9f6      	bls.n	d8160 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8172:	f7ff fefb 	bl	d7f6c <_Z22__fetch_global_Serial1v>
   d8176:	f7ff fef6 	bl	d7f66 <_ZN11USARTSerial9isEnabledEv>
   d817a:	b118      	cbz	r0, d8184 <pinAvailable+0x38>
   d817c:	f1a4 0309 	sub.w	r3, r4, #9
   d8180:	2b01      	cmp	r3, #1
   d8182:	d9ed      	bls.n	d8160 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8184:	2c23      	cmp	r4, #35	; 0x23
   d8186:	bf8c      	ite	hi
   d8188:	2000      	movhi	r0, #0
   d818a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d818c:	bd10      	pop	{r4, pc}
   d818e:	bf00      	nop
   d8190:	2003e730 	.word	0x2003e730

000d8194 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8194:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8196:	b538      	push	{r3, r4, r5, lr}
   d8198:	4604      	mov	r4, r0
   d819a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d819c:	d80a      	bhi.n	d81b4 <pinMode+0x20>
   d819e:	29ff      	cmp	r1, #255	; 0xff
   d81a0:	d008      	beq.n	d81b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d81a2:	f7ff ffd3 	bl	d814c <pinAvailable>
   d81a6:	b128      	cbz	r0, d81b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d81a8:	4629      	mov	r1, r5
   d81aa:	4620      	mov	r0, r4
}
   d81ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d81b0:	f7fd bca2 	b.w	d5af8 <HAL_Pin_Mode>
   d81b4:	bd38      	pop	{r3, r4, r5, pc}

000d81b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d81b6:	b538      	push	{r3, r4, r5, lr}
   d81b8:	4604      	mov	r4, r0
   d81ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81bc:	f7fd fca4 	bl	d5b08 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d81c0:	28ff      	cmp	r0, #255	; 0xff
   d81c2:	d010      	beq.n	d81e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d81c4:	2806      	cmp	r0, #6
   d81c6:	d804      	bhi.n	d81d2 <digitalWrite+0x1c>
   d81c8:	234d      	movs	r3, #77	; 0x4d
   d81ca:	fa23 f000 	lsr.w	r0, r3, r0
   d81ce:	07c3      	lsls	r3, r0, #31
   d81d0:	d409      	bmi.n	d81e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d81d2:	4620      	mov	r0, r4
   d81d4:	f7ff ffba 	bl	d814c <pinAvailable>
   d81d8:	b128      	cbz	r0, d81e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81da:	4629      	mov	r1, r5
   d81dc:	4620      	mov	r0, r4
}
   d81de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81e2:	f7fd bc99 	b.w	d5b18 <HAL_GPIO_Write>
   d81e6:	bd38      	pop	{r3, r4, r5, pc}

000d81e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d81e8:	b510      	push	{r4, lr}
   d81ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81ec:	f7fd fc8c 	bl	d5b08 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d81f0:	3804      	subs	r0, #4
   d81f2:	b2c0      	uxtb	r0, r0
   d81f4:	2801      	cmp	r0, #1
   d81f6:	d908      	bls.n	d820a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d81f8:	4620      	mov	r0, r4
   d81fa:	f7ff ffa7 	bl	d814c <pinAvailable>
   d81fe:	b120      	cbz	r0, d820a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8200:	4620      	mov	r0, r4
}
   d8202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8206:	f7fd bc8f 	b.w	d5b28 <HAL_GPIO_Read>
}
   d820a:	2000      	movs	r0, #0
   d820c:	bd10      	pop	{r4, pc}

000d820e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d820e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8210:	b510      	push	{r4, lr}
   d8212:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8214:	bf9c      	itt	ls
   d8216:	340e      	addls	r4, #14
   d8218:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d821a:	4620      	mov	r0, r4
   d821c:	f7ff ff96 	bl	d814c <pinAvailable>
   d8220:	b150      	cbz	r0, d8238 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8222:	2103      	movs	r1, #3
   d8224:	4620      	mov	r0, r4
   d8226:	f7fd fc5f 	bl	d5ae8 <HAL_Validate_Pin_Function>
   d822a:	2803      	cmp	r0, #3
   d822c:	d104      	bne.n	d8238 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d822e:	4620      	mov	r0, r4
}
   d8230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8234:	f7fd bc88 	b.w	d5b48 <HAL_ADC_Read>
}
   d8238:	2000      	movs	r0, #0
   d823a:	bd10      	pop	{r4, pc}

000d823c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d823c:	b538      	push	{r3, r4, r5, lr}
   d823e:	4604      	mov	r4, r0
   d8240:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d8242:	f7ff ff83 	bl	d814c <pinAvailable>
   d8246:	b1f0      	cbz	r0, d8286 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d8248:	2104      	movs	r1, #4
   d824a:	4620      	mov	r0, r4
   d824c:	f7fd fc4c 	bl	d5ae8 <HAL_Validate_Pin_Function>
   d8250:	2804      	cmp	r0, #4
   d8252:	d105      	bne.n	d8260 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d8254:	b2a9      	uxth	r1, r5
   d8256:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d8258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d825c:	f7fd bc6c 	b.w	d5b38 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d8260:	2102      	movs	r1, #2
   d8262:	4620      	mov	r0, r4
   d8264:	f7fd fc40 	bl	d5ae8 <HAL_Validate_Pin_Function>
   d8268:	2802      	cmp	r0, #2
   d826a:	d10c      	bne.n	d8286 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d826c:	4620      	mov	r0, r4
   d826e:	f7fd fc4b 	bl	d5b08 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d8272:	2801      	cmp	r0, #1
   d8274:	d001      	beq.n	d827a <_Z11analogWritetm+0x3e>
   d8276:	2804      	cmp	r0, #4
   d8278:	d105      	bne.n	d8286 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d827a:	4629      	mov	r1, r5
   d827c:	4620      	mov	r0, r4
    }
}
   d827e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d8282:	f7fd bc69 	b.w	d5b58 <HAL_PWM_Write_Ext>
   d8286:	bd38      	pop	{r3, r4, r5, pc}

000d8288 <__aeabi_atexit>:
   d8288:	460b      	mov	r3, r1
   d828a:	4601      	mov	r1, r0
   d828c:	4618      	mov	r0, r3
   d828e:	f000 bd1d 	b.w	d8ccc <__cxa_atexit>

000d8292 <_ZdlPvj>:
   d8292:	f7fb bf02 	b.w	d409a <_ZdlPv>
	...

000d8298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8298:	4b18      	ldr	r3, [pc, #96]	; (d82fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d829a:	681a      	ldr	r2, [r3, #0]
   d829c:	07d1      	lsls	r1, r2, #31
   d829e:	bf5c      	itt	pl
   d82a0:	2201      	movpl	r2, #1
   d82a2:	601a      	strpl	r2, [r3, #0]
   d82a4:	4b16      	ldr	r3, [pc, #88]	; (d8300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d82a6:	681a      	ldr	r2, [r3, #0]
   d82a8:	07d2      	lsls	r2, r2, #31
   d82aa:	bf5c      	itt	pl
   d82ac:	2201      	movpl	r2, #1
   d82ae:	601a      	strpl	r2, [r3, #0]
   d82b0:	4b14      	ldr	r3, [pc, #80]	; (d8304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d82b2:	681a      	ldr	r2, [r3, #0]
   d82b4:	07d0      	lsls	r0, r2, #31
   d82b6:	bf5c      	itt	pl
   d82b8:	2201      	movpl	r2, #1
   d82ba:	601a      	strpl	r2, [r3, #0]
   d82bc:	4b12      	ldr	r3, [pc, #72]	; (d8308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d82be:	681a      	ldr	r2, [r3, #0]
   d82c0:	07d1      	lsls	r1, r2, #31
   d82c2:	bf5c      	itt	pl
   d82c4:	2201      	movpl	r2, #1
   d82c6:	601a      	strpl	r2, [r3, #0]
   d82c8:	4b10      	ldr	r3, [pc, #64]	; (d830c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d82ca:	681a      	ldr	r2, [r3, #0]
   d82cc:	07d2      	lsls	r2, r2, #31
   d82ce:	bf5c      	itt	pl
   d82d0:	2201      	movpl	r2, #1
   d82d2:	601a      	strpl	r2, [r3, #0]
   d82d4:	4b0e      	ldr	r3, [pc, #56]	; (d8310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d82d6:	681a      	ldr	r2, [r3, #0]
   d82d8:	07d0      	lsls	r0, r2, #31
   d82da:	bf5c      	itt	pl
   d82dc:	2201      	movpl	r2, #1
   d82de:	601a      	strpl	r2, [r3, #0]
   d82e0:	4b0c      	ldr	r3, [pc, #48]	; (d8314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d82e2:	681a      	ldr	r2, [r3, #0]
   d82e4:	07d1      	lsls	r1, r2, #31
   d82e6:	bf5c      	itt	pl
   d82e8:	2201      	movpl	r2, #1
   d82ea:	601a      	strpl	r2, [r3, #0]
   d82ec:	4b0a      	ldr	r3, [pc, #40]	; (d8318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d82ee:	681a      	ldr	r2, [r3, #0]
   d82f0:	07d2      	lsls	r2, r2, #31
   d82f2:	bf5c      	itt	pl
   d82f4:	2201      	movpl	r2, #1
   d82f6:	601a      	strpl	r2, [r3, #0]
   d82f8:	4770      	bx	lr
   d82fa:	bf00      	nop
   d82fc:	2003e76c 	.word	0x2003e76c
   d8300:	2003e768 	.word	0x2003e768
   d8304:	2003e764 	.word	0x2003e764
   d8308:	2003e760 	.word	0x2003e760
   d830c:	2003e75c 	.word	0x2003e75c
   d8310:	2003e758 	.word	0x2003e758
   d8314:	2003e754 	.word	0x2003e754
   d8318:	2003e750 	.word	0x2003e750

000d831c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d831c:	4b24      	ldr	r3, [pc, #144]	; (d83b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d831e:	681a      	ldr	r2, [r3, #0]
   d8320:	07d0      	lsls	r0, r2, #31
   d8322:	bf5c      	itt	pl
   d8324:	2201      	movpl	r2, #1
   d8326:	601a      	strpl	r2, [r3, #0]
   d8328:	4b22      	ldr	r3, [pc, #136]	; (d83b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d832a:	681a      	ldr	r2, [r3, #0]
   d832c:	07d1      	lsls	r1, r2, #31
   d832e:	bf5c      	itt	pl
   d8330:	2201      	movpl	r2, #1
   d8332:	601a      	strpl	r2, [r3, #0]
   d8334:	4b20      	ldr	r3, [pc, #128]	; (d83b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8336:	681a      	ldr	r2, [r3, #0]
   d8338:	07d2      	lsls	r2, r2, #31
   d833a:	bf5c      	itt	pl
   d833c:	2201      	movpl	r2, #1
   d833e:	601a      	strpl	r2, [r3, #0]
   d8340:	4b1e      	ldr	r3, [pc, #120]	; (d83bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8342:	681a      	ldr	r2, [r3, #0]
   d8344:	07d0      	lsls	r0, r2, #31
   d8346:	bf5c      	itt	pl
   d8348:	2201      	movpl	r2, #1
   d834a:	601a      	strpl	r2, [r3, #0]
   d834c:	4b1c      	ldr	r3, [pc, #112]	; (d83c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d834e:	681a      	ldr	r2, [r3, #0]
   d8350:	07d1      	lsls	r1, r2, #31
   d8352:	bf5c      	itt	pl
   d8354:	2201      	movpl	r2, #1
   d8356:	601a      	strpl	r2, [r3, #0]
   d8358:	4b1a      	ldr	r3, [pc, #104]	; (d83c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d835a:	681a      	ldr	r2, [r3, #0]
   d835c:	07d2      	lsls	r2, r2, #31
   d835e:	bf5c      	itt	pl
   d8360:	2201      	movpl	r2, #1
   d8362:	601a      	strpl	r2, [r3, #0]
   d8364:	4b18      	ldr	r3, [pc, #96]	; (d83c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8366:	681a      	ldr	r2, [r3, #0]
   d8368:	07d0      	lsls	r0, r2, #31
   d836a:	bf5c      	itt	pl
   d836c:	2201      	movpl	r2, #1
   d836e:	601a      	strpl	r2, [r3, #0]
   d8370:	4b16      	ldr	r3, [pc, #88]	; (d83cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8372:	681a      	ldr	r2, [r3, #0]
   d8374:	07d1      	lsls	r1, r2, #31
   d8376:	bf5c      	itt	pl
   d8378:	2201      	movpl	r2, #1
   d837a:	601a      	strpl	r2, [r3, #0]
   d837c:	4b14      	ldr	r3, [pc, #80]	; (d83d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d837e:	681a      	ldr	r2, [r3, #0]
   d8380:	07d2      	lsls	r2, r2, #31
   d8382:	bf5c      	itt	pl
   d8384:	2201      	movpl	r2, #1
   d8386:	601a      	strpl	r2, [r3, #0]
   d8388:	4b12      	ldr	r3, [pc, #72]	; (d83d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d838a:	681a      	ldr	r2, [r3, #0]
   d838c:	07d0      	lsls	r0, r2, #31
   d838e:	bf5c      	itt	pl
   d8390:	2201      	movpl	r2, #1
   d8392:	601a      	strpl	r2, [r3, #0]
   d8394:	4b10      	ldr	r3, [pc, #64]	; (d83d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8396:	681a      	ldr	r2, [r3, #0]
   d8398:	07d1      	lsls	r1, r2, #31
   d839a:	bf5c      	itt	pl
   d839c:	2201      	movpl	r2, #1
   d839e:	601a      	strpl	r2, [r3, #0]
   d83a0:	4b0e      	ldr	r3, [pc, #56]	; (d83dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d83a2:	681a      	ldr	r2, [r3, #0]
   d83a4:	07d2      	lsls	r2, r2, #31
   d83a6:	bf5c      	itt	pl
   d83a8:	2201      	movpl	r2, #1
   d83aa:	601a      	strpl	r2, [r3, #0]
   d83ac:	4770      	bx	lr
   d83ae:	bf00      	nop
   d83b0:	2003e79c 	.word	0x2003e79c
   d83b4:	2003e798 	.word	0x2003e798
   d83b8:	2003e794 	.word	0x2003e794
   d83bc:	2003e790 	.word	0x2003e790
   d83c0:	2003e78c 	.word	0x2003e78c
   d83c4:	2003e788 	.word	0x2003e788
   d83c8:	2003e784 	.word	0x2003e784
   d83cc:	2003e780 	.word	0x2003e780
   d83d0:	2003e77c 	.word	0x2003e77c
   d83d4:	2003e778 	.word	0x2003e778
   d83d8:	2003e774 	.word	0x2003e774
   d83dc:	2003e770 	.word	0x2003e770

000d83e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d83e0:	4b24      	ldr	r3, [pc, #144]	; (d8474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d83e2:	681a      	ldr	r2, [r3, #0]
   d83e4:	07d0      	lsls	r0, r2, #31
   d83e6:	bf5c      	itt	pl
   d83e8:	2201      	movpl	r2, #1
   d83ea:	601a      	strpl	r2, [r3, #0]
   d83ec:	4b22      	ldr	r3, [pc, #136]	; (d8478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d83ee:	681a      	ldr	r2, [r3, #0]
   d83f0:	07d1      	lsls	r1, r2, #31
   d83f2:	bf5c      	itt	pl
   d83f4:	2201      	movpl	r2, #1
   d83f6:	601a      	strpl	r2, [r3, #0]
   d83f8:	4b20      	ldr	r3, [pc, #128]	; (d847c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d83fa:	681a      	ldr	r2, [r3, #0]
   d83fc:	07d2      	lsls	r2, r2, #31
   d83fe:	bf5c      	itt	pl
   d8400:	2201      	movpl	r2, #1
   d8402:	601a      	strpl	r2, [r3, #0]
   d8404:	4b1e      	ldr	r3, [pc, #120]	; (d8480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8406:	681a      	ldr	r2, [r3, #0]
   d8408:	07d0      	lsls	r0, r2, #31
   d840a:	bf5c      	itt	pl
   d840c:	2201      	movpl	r2, #1
   d840e:	601a      	strpl	r2, [r3, #0]
   d8410:	4b1c      	ldr	r3, [pc, #112]	; (d8484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8412:	681a      	ldr	r2, [r3, #0]
   d8414:	07d1      	lsls	r1, r2, #31
   d8416:	bf5c      	itt	pl
   d8418:	2201      	movpl	r2, #1
   d841a:	601a      	strpl	r2, [r3, #0]
   d841c:	4b1a      	ldr	r3, [pc, #104]	; (d8488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d841e:	681a      	ldr	r2, [r3, #0]
   d8420:	07d2      	lsls	r2, r2, #31
   d8422:	bf5c      	itt	pl
   d8424:	2201      	movpl	r2, #1
   d8426:	601a      	strpl	r2, [r3, #0]
   d8428:	4b18      	ldr	r3, [pc, #96]	; (d848c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d842a:	681a      	ldr	r2, [r3, #0]
   d842c:	07d0      	lsls	r0, r2, #31
   d842e:	bf5c      	itt	pl
   d8430:	2201      	movpl	r2, #1
   d8432:	601a      	strpl	r2, [r3, #0]
   d8434:	4b16      	ldr	r3, [pc, #88]	; (d8490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8436:	681a      	ldr	r2, [r3, #0]
   d8438:	07d1      	lsls	r1, r2, #31
   d843a:	bf5c      	itt	pl
   d843c:	2201      	movpl	r2, #1
   d843e:	601a      	strpl	r2, [r3, #0]
   d8440:	4b14      	ldr	r3, [pc, #80]	; (d8494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8442:	681a      	ldr	r2, [r3, #0]
   d8444:	07d2      	lsls	r2, r2, #31
   d8446:	bf5c      	itt	pl
   d8448:	2201      	movpl	r2, #1
   d844a:	601a      	strpl	r2, [r3, #0]
   d844c:	4b12      	ldr	r3, [pc, #72]	; (d8498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d844e:	681a      	ldr	r2, [r3, #0]
   d8450:	07d0      	lsls	r0, r2, #31
   d8452:	bf5c      	itt	pl
   d8454:	2201      	movpl	r2, #1
   d8456:	601a      	strpl	r2, [r3, #0]
   d8458:	4b10      	ldr	r3, [pc, #64]	; (d849c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d845a:	681a      	ldr	r2, [r3, #0]
   d845c:	07d1      	lsls	r1, r2, #31
   d845e:	bf5c      	itt	pl
   d8460:	2201      	movpl	r2, #1
   d8462:	601a      	strpl	r2, [r3, #0]
   d8464:	4b0e      	ldr	r3, [pc, #56]	; (d84a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8466:	681a      	ldr	r2, [r3, #0]
   d8468:	07d2      	lsls	r2, r2, #31
   d846a:	bf5c      	itt	pl
   d846c:	2201      	movpl	r2, #1
   d846e:	601a      	strpl	r2, [r3, #0]
   d8470:	4770      	bx	lr
   d8472:	bf00      	nop
   d8474:	2003e7cc 	.word	0x2003e7cc
   d8478:	2003e7c8 	.word	0x2003e7c8
   d847c:	2003e7c4 	.word	0x2003e7c4
   d8480:	2003e7c0 	.word	0x2003e7c0
   d8484:	2003e7bc 	.word	0x2003e7bc
   d8488:	2003e7b8 	.word	0x2003e7b8
   d848c:	2003e7b4 	.word	0x2003e7b4
   d8490:	2003e7b0 	.word	0x2003e7b0
   d8494:	2003e7ac 	.word	0x2003e7ac
   d8498:	2003e7a8 	.word	0x2003e7a8
   d849c:	2003e7a4 	.word	0x2003e7a4
   d84a0:	2003e7a0 	.word	0x2003e7a0

000d84a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d84a4:	4b18      	ldr	r3, [pc, #96]	; (d8508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d84a6:	681a      	ldr	r2, [r3, #0]
   d84a8:	07d1      	lsls	r1, r2, #31
   d84aa:	bf5c      	itt	pl
   d84ac:	2201      	movpl	r2, #1
   d84ae:	601a      	strpl	r2, [r3, #0]
   d84b0:	4b16      	ldr	r3, [pc, #88]	; (d850c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d84b2:	681a      	ldr	r2, [r3, #0]
   d84b4:	07d2      	lsls	r2, r2, #31
   d84b6:	bf5c      	itt	pl
   d84b8:	2201      	movpl	r2, #1
   d84ba:	601a      	strpl	r2, [r3, #0]
   d84bc:	4b14      	ldr	r3, [pc, #80]	; (d8510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d84be:	681a      	ldr	r2, [r3, #0]
   d84c0:	07d0      	lsls	r0, r2, #31
   d84c2:	bf5c      	itt	pl
   d84c4:	2201      	movpl	r2, #1
   d84c6:	601a      	strpl	r2, [r3, #0]
   d84c8:	4b12      	ldr	r3, [pc, #72]	; (d8514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d84ca:	681a      	ldr	r2, [r3, #0]
   d84cc:	07d1      	lsls	r1, r2, #31
   d84ce:	bf5c      	itt	pl
   d84d0:	2201      	movpl	r2, #1
   d84d2:	601a      	strpl	r2, [r3, #0]
   d84d4:	4b10      	ldr	r3, [pc, #64]	; (d8518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d84d6:	681a      	ldr	r2, [r3, #0]
   d84d8:	07d2      	lsls	r2, r2, #31
   d84da:	bf5c      	itt	pl
   d84dc:	2201      	movpl	r2, #1
   d84de:	601a      	strpl	r2, [r3, #0]
   d84e0:	4b0e      	ldr	r3, [pc, #56]	; (d851c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d84e2:	681a      	ldr	r2, [r3, #0]
   d84e4:	07d0      	lsls	r0, r2, #31
   d84e6:	bf5c      	itt	pl
   d84e8:	2201      	movpl	r2, #1
   d84ea:	601a      	strpl	r2, [r3, #0]
   d84ec:	4b0c      	ldr	r3, [pc, #48]	; (d8520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d84ee:	681a      	ldr	r2, [r3, #0]
   d84f0:	07d1      	lsls	r1, r2, #31
   d84f2:	bf5c      	itt	pl
   d84f4:	2201      	movpl	r2, #1
   d84f6:	601a      	strpl	r2, [r3, #0]
   d84f8:	4b0a      	ldr	r3, [pc, #40]	; (d8524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d84fa:	681a      	ldr	r2, [r3, #0]
   d84fc:	07d2      	lsls	r2, r2, #31
   d84fe:	bf5c      	itt	pl
   d8500:	2201      	movpl	r2, #1
   d8502:	601a      	strpl	r2, [r3, #0]
   d8504:	4770      	bx	lr
   d8506:	bf00      	nop
   d8508:	2003e7ec 	.word	0x2003e7ec
   d850c:	2003e7e8 	.word	0x2003e7e8
   d8510:	2003e7e4 	.word	0x2003e7e4
   d8514:	2003e7e0 	.word	0x2003e7e0
   d8518:	2003e7dc 	.word	0x2003e7dc
   d851c:	2003e7d8 	.word	0x2003e7d8
   d8520:	2003e7d4 	.word	0x2003e7d4
   d8524:	2003e7d0 	.word	0x2003e7d0

000d8528 <__aeabi_drsub>:
   d8528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d852c:	e002      	b.n	d8534 <__adddf3>
   d852e:	bf00      	nop

000d8530 <__aeabi_dsub>:
   d8530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8534 <__adddf3>:
   d8534:	b530      	push	{r4, r5, lr}
   d8536:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d853a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d853e:	ea94 0f05 	teq	r4, r5
   d8542:	bf08      	it	eq
   d8544:	ea90 0f02 	teqeq	r0, r2
   d8548:	bf1f      	itttt	ne
   d854a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d854e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d855a:	f000 80e2 	beq.w	d8722 <__adddf3+0x1ee>
   d855e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8566:	bfb8      	it	lt
   d8568:	426d      	neglt	r5, r5
   d856a:	dd0c      	ble.n	d8586 <__adddf3+0x52>
   d856c:	442c      	add	r4, r5
   d856e:	ea80 0202 	eor.w	r2, r0, r2
   d8572:	ea81 0303 	eor.w	r3, r1, r3
   d8576:	ea82 0000 	eor.w	r0, r2, r0
   d857a:	ea83 0101 	eor.w	r1, r3, r1
   d857e:	ea80 0202 	eor.w	r2, r0, r2
   d8582:	ea81 0303 	eor.w	r3, r1, r3
   d8586:	2d36      	cmp	r5, #54	; 0x36
   d8588:	bf88      	it	hi
   d858a:	bd30      	pophi	{r4, r5, pc}
   d858c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8590:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d859c:	d002      	beq.n	d85a4 <__adddf3+0x70>
   d859e:	4240      	negs	r0, r0
   d85a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d85a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d85a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d85ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d85b0:	d002      	beq.n	d85b8 <__adddf3+0x84>
   d85b2:	4252      	negs	r2, r2
   d85b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d85b8:	ea94 0f05 	teq	r4, r5
   d85bc:	f000 80a7 	beq.w	d870e <__adddf3+0x1da>
   d85c0:	f1a4 0401 	sub.w	r4, r4, #1
   d85c4:	f1d5 0e20 	rsbs	lr, r5, #32
   d85c8:	db0d      	blt.n	d85e6 <__adddf3+0xb2>
   d85ca:	fa02 fc0e 	lsl.w	ip, r2, lr
   d85ce:	fa22 f205 	lsr.w	r2, r2, r5
   d85d2:	1880      	adds	r0, r0, r2
   d85d4:	f141 0100 	adc.w	r1, r1, #0
   d85d8:	fa03 f20e 	lsl.w	r2, r3, lr
   d85dc:	1880      	adds	r0, r0, r2
   d85de:	fa43 f305 	asr.w	r3, r3, r5
   d85e2:	4159      	adcs	r1, r3
   d85e4:	e00e      	b.n	d8604 <__adddf3+0xd0>
   d85e6:	f1a5 0520 	sub.w	r5, r5, #32
   d85ea:	f10e 0e20 	add.w	lr, lr, #32
   d85ee:	2a01      	cmp	r2, #1
   d85f0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d85f4:	bf28      	it	cs
   d85f6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d85fa:	fa43 f305 	asr.w	r3, r3, r5
   d85fe:	18c0      	adds	r0, r0, r3
   d8600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8608:	d507      	bpl.n	d861a <__adddf3+0xe6>
   d860a:	f04f 0e00 	mov.w	lr, #0
   d860e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8612:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8616:	eb6e 0101 	sbc.w	r1, lr, r1
   d861a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d861e:	d31b      	bcc.n	d8658 <__adddf3+0x124>
   d8620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8624:	d30c      	bcc.n	d8640 <__adddf3+0x10c>
   d8626:	0849      	lsrs	r1, r1, #1
   d8628:	ea5f 0030 	movs.w	r0, r0, rrx
   d862c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8630:	f104 0401 	add.w	r4, r4, #1
   d8634:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d863c:	f080 809a 	bcs.w	d8774 <__adddf3+0x240>
   d8640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8644:	bf08      	it	eq
   d8646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d864a:	f150 0000 	adcs.w	r0, r0, #0
   d864e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8652:	ea41 0105 	orr.w	r1, r1, r5
   d8656:	bd30      	pop	{r4, r5, pc}
   d8658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d865c:	4140      	adcs	r0, r0
   d865e:	eb41 0101 	adc.w	r1, r1, r1
   d8662:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8666:	f1a4 0401 	sub.w	r4, r4, #1
   d866a:	d1e9      	bne.n	d8640 <__adddf3+0x10c>
   d866c:	f091 0f00 	teq	r1, #0
   d8670:	bf04      	itt	eq
   d8672:	4601      	moveq	r1, r0
   d8674:	2000      	moveq	r0, #0
   d8676:	fab1 f381 	clz	r3, r1
   d867a:	bf08      	it	eq
   d867c:	3320      	addeq	r3, #32
   d867e:	f1a3 030b 	sub.w	r3, r3, #11
   d8682:	f1b3 0220 	subs.w	r2, r3, #32
   d8686:	da0c      	bge.n	d86a2 <__adddf3+0x16e>
   d8688:	320c      	adds	r2, #12
   d868a:	dd08      	ble.n	d869e <__adddf3+0x16a>
   d868c:	f102 0c14 	add.w	ip, r2, #20
   d8690:	f1c2 020c 	rsb	r2, r2, #12
   d8694:	fa01 f00c 	lsl.w	r0, r1, ip
   d8698:	fa21 f102 	lsr.w	r1, r1, r2
   d869c:	e00c      	b.n	d86b8 <__adddf3+0x184>
   d869e:	f102 0214 	add.w	r2, r2, #20
   d86a2:	bfd8      	it	le
   d86a4:	f1c2 0c20 	rsble	ip, r2, #32
   d86a8:	fa01 f102 	lsl.w	r1, r1, r2
   d86ac:	fa20 fc0c 	lsr.w	ip, r0, ip
   d86b0:	bfdc      	itt	le
   d86b2:	ea41 010c 	orrle.w	r1, r1, ip
   d86b6:	4090      	lslle	r0, r2
   d86b8:	1ae4      	subs	r4, r4, r3
   d86ba:	bfa2      	ittt	ge
   d86bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d86c0:	4329      	orrge	r1, r5
   d86c2:	bd30      	popge	{r4, r5, pc}
   d86c4:	ea6f 0404 	mvn.w	r4, r4
   d86c8:	3c1f      	subs	r4, #31
   d86ca:	da1c      	bge.n	d8706 <__adddf3+0x1d2>
   d86cc:	340c      	adds	r4, #12
   d86ce:	dc0e      	bgt.n	d86ee <__adddf3+0x1ba>
   d86d0:	f104 0414 	add.w	r4, r4, #20
   d86d4:	f1c4 0220 	rsb	r2, r4, #32
   d86d8:	fa20 f004 	lsr.w	r0, r0, r4
   d86dc:	fa01 f302 	lsl.w	r3, r1, r2
   d86e0:	ea40 0003 	orr.w	r0, r0, r3
   d86e4:	fa21 f304 	lsr.w	r3, r1, r4
   d86e8:	ea45 0103 	orr.w	r1, r5, r3
   d86ec:	bd30      	pop	{r4, r5, pc}
   d86ee:	f1c4 040c 	rsb	r4, r4, #12
   d86f2:	f1c4 0220 	rsb	r2, r4, #32
   d86f6:	fa20 f002 	lsr.w	r0, r0, r2
   d86fa:	fa01 f304 	lsl.w	r3, r1, r4
   d86fe:	ea40 0003 	orr.w	r0, r0, r3
   d8702:	4629      	mov	r1, r5
   d8704:	bd30      	pop	{r4, r5, pc}
   d8706:	fa21 f004 	lsr.w	r0, r1, r4
   d870a:	4629      	mov	r1, r5
   d870c:	bd30      	pop	{r4, r5, pc}
   d870e:	f094 0f00 	teq	r4, #0
   d8712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8716:	bf06      	itte	eq
   d8718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d871c:	3401      	addeq	r4, #1
   d871e:	3d01      	subne	r5, #1
   d8720:	e74e      	b.n	d85c0 <__adddf3+0x8c>
   d8722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8726:	bf18      	it	ne
   d8728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d872c:	d029      	beq.n	d8782 <__adddf3+0x24e>
   d872e:	ea94 0f05 	teq	r4, r5
   d8732:	bf08      	it	eq
   d8734:	ea90 0f02 	teqeq	r0, r2
   d8738:	d005      	beq.n	d8746 <__adddf3+0x212>
   d873a:	ea54 0c00 	orrs.w	ip, r4, r0
   d873e:	bf04      	itt	eq
   d8740:	4619      	moveq	r1, r3
   d8742:	4610      	moveq	r0, r2
   d8744:	bd30      	pop	{r4, r5, pc}
   d8746:	ea91 0f03 	teq	r1, r3
   d874a:	bf1e      	ittt	ne
   d874c:	2100      	movne	r1, #0
   d874e:	2000      	movne	r0, #0
   d8750:	bd30      	popne	{r4, r5, pc}
   d8752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8756:	d105      	bne.n	d8764 <__adddf3+0x230>
   d8758:	0040      	lsls	r0, r0, #1
   d875a:	4149      	adcs	r1, r1
   d875c:	bf28      	it	cs
   d875e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8762:	bd30      	pop	{r4, r5, pc}
   d8764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8768:	bf3c      	itt	cc
   d876a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d876e:	bd30      	popcc	{r4, r5, pc}
   d8770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d877c:	f04f 0000 	mov.w	r0, #0
   d8780:	bd30      	pop	{r4, r5, pc}
   d8782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8786:	bf1a      	itte	ne
   d8788:	4619      	movne	r1, r3
   d878a:	4610      	movne	r0, r2
   d878c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8790:	bf1c      	itt	ne
   d8792:	460b      	movne	r3, r1
   d8794:	4602      	movne	r2, r0
   d8796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d879a:	bf06      	itte	eq
   d879c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d87a0:	ea91 0f03 	teqeq	r1, r3
   d87a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d87a8:	bd30      	pop	{r4, r5, pc}
   d87aa:	bf00      	nop

000d87ac <__aeabi_ui2d>:
   d87ac:	f090 0f00 	teq	r0, #0
   d87b0:	bf04      	itt	eq
   d87b2:	2100      	moveq	r1, #0
   d87b4:	4770      	bxeq	lr
   d87b6:	b530      	push	{r4, r5, lr}
   d87b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d87bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d87c0:	f04f 0500 	mov.w	r5, #0
   d87c4:	f04f 0100 	mov.w	r1, #0
   d87c8:	e750      	b.n	d866c <__adddf3+0x138>
   d87ca:	bf00      	nop

000d87cc <__aeabi_i2d>:
   d87cc:	f090 0f00 	teq	r0, #0
   d87d0:	bf04      	itt	eq
   d87d2:	2100      	moveq	r1, #0
   d87d4:	4770      	bxeq	lr
   d87d6:	b530      	push	{r4, r5, lr}
   d87d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d87dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d87e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d87e4:	bf48      	it	mi
   d87e6:	4240      	negmi	r0, r0
   d87e8:	f04f 0100 	mov.w	r1, #0
   d87ec:	e73e      	b.n	d866c <__adddf3+0x138>
   d87ee:	bf00      	nop

000d87f0 <__aeabi_f2d>:
   d87f0:	0042      	lsls	r2, r0, #1
   d87f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d87f6:	ea4f 0131 	mov.w	r1, r1, rrx
   d87fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d87fe:	bf1f      	itttt	ne
   d8800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d880c:	4770      	bxne	lr
   d880e:	f092 0f00 	teq	r2, #0
   d8812:	bf14      	ite	ne
   d8814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8818:	4770      	bxeq	lr
   d881a:	b530      	push	{r4, r5, lr}
   d881c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8828:	e720      	b.n	d866c <__adddf3+0x138>
   d882a:	bf00      	nop

000d882c <__aeabi_ul2d>:
   d882c:	ea50 0201 	orrs.w	r2, r0, r1
   d8830:	bf08      	it	eq
   d8832:	4770      	bxeq	lr
   d8834:	b530      	push	{r4, r5, lr}
   d8836:	f04f 0500 	mov.w	r5, #0
   d883a:	e00a      	b.n	d8852 <__aeabi_l2d+0x16>

000d883c <__aeabi_l2d>:
   d883c:	ea50 0201 	orrs.w	r2, r0, r1
   d8840:	bf08      	it	eq
   d8842:	4770      	bxeq	lr
   d8844:	b530      	push	{r4, r5, lr}
   d8846:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d884a:	d502      	bpl.n	d8852 <__aeabi_l2d+0x16>
   d884c:	4240      	negs	r0, r0
   d884e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8852:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8856:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d885a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d885e:	f43f aedc 	beq.w	d861a <__adddf3+0xe6>
   d8862:	f04f 0203 	mov.w	r2, #3
   d8866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d886a:	bf18      	it	ne
   d886c:	3203      	addne	r2, #3
   d886e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8872:	bf18      	it	ne
   d8874:	3203      	addne	r2, #3
   d8876:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d887a:	f1c2 0320 	rsb	r3, r2, #32
   d887e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8882:	fa20 f002 	lsr.w	r0, r0, r2
   d8886:	fa01 fe03 	lsl.w	lr, r1, r3
   d888a:	ea40 000e 	orr.w	r0, r0, lr
   d888e:	fa21 f102 	lsr.w	r1, r1, r2
   d8892:	4414      	add	r4, r2
   d8894:	e6c1      	b.n	d861a <__adddf3+0xe6>
   d8896:	bf00      	nop

000d8898 <__aeabi_dmul>:
   d8898:	b570      	push	{r4, r5, r6, lr}
   d889a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d889e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d88a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d88a6:	bf1d      	ittte	ne
   d88a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d88ac:	ea94 0f0c 	teqne	r4, ip
   d88b0:	ea95 0f0c 	teqne	r5, ip
   d88b4:	f000 f8de 	bleq	d8a74 <__aeabi_dmul+0x1dc>
   d88b8:	442c      	add	r4, r5
   d88ba:	ea81 0603 	eor.w	r6, r1, r3
   d88be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d88c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d88c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d88ca:	bf18      	it	ne
   d88cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d88d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d88d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d88d8:	d038      	beq.n	d894c <__aeabi_dmul+0xb4>
   d88da:	fba0 ce02 	umull	ip, lr, r0, r2
   d88de:	f04f 0500 	mov.w	r5, #0
   d88e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d88e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d88ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d88ee:	f04f 0600 	mov.w	r6, #0
   d88f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d88f6:	f09c 0f00 	teq	ip, #0
   d88fa:	bf18      	it	ne
   d88fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d890c:	d204      	bcs.n	d8918 <__aeabi_dmul+0x80>
   d890e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8912:	416d      	adcs	r5, r5
   d8914:	eb46 0606 	adc.w	r6, r6, r6
   d8918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d891c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d892c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8930:	bf88      	it	hi
   d8932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8936:	d81e      	bhi.n	d8976 <__aeabi_dmul+0xde>
   d8938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d893c:	bf08      	it	eq
   d893e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8942:	f150 0000 	adcs.w	r0, r0, #0
   d8946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d894a:	bd70      	pop	{r4, r5, r6, pc}
   d894c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8950:	ea46 0101 	orr.w	r1, r6, r1
   d8954:	ea40 0002 	orr.w	r0, r0, r2
   d8958:	ea81 0103 	eor.w	r1, r1, r3
   d895c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8960:	bfc2      	ittt	gt
   d8962:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d896a:	bd70      	popgt	{r4, r5, r6, pc}
   d896c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8970:	f04f 0e00 	mov.w	lr, #0
   d8974:	3c01      	subs	r4, #1
   d8976:	f300 80ab 	bgt.w	d8ad0 <__aeabi_dmul+0x238>
   d897a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d897e:	bfde      	ittt	le
   d8980:	2000      	movle	r0, #0
   d8982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8986:	bd70      	pople	{r4, r5, r6, pc}
   d8988:	f1c4 0400 	rsb	r4, r4, #0
   d898c:	3c20      	subs	r4, #32
   d898e:	da35      	bge.n	d89fc <__aeabi_dmul+0x164>
   d8990:	340c      	adds	r4, #12
   d8992:	dc1b      	bgt.n	d89cc <__aeabi_dmul+0x134>
   d8994:	f104 0414 	add.w	r4, r4, #20
   d8998:	f1c4 0520 	rsb	r5, r4, #32
   d899c:	fa00 f305 	lsl.w	r3, r0, r5
   d89a0:	fa20 f004 	lsr.w	r0, r0, r4
   d89a4:	fa01 f205 	lsl.w	r2, r1, r5
   d89a8:	ea40 0002 	orr.w	r0, r0, r2
   d89ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d89b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d89b8:	fa21 f604 	lsr.w	r6, r1, r4
   d89bc:	eb42 0106 	adc.w	r1, r2, r6
   d89c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d89c4:	bf08      	it	eq
   d89c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d89ca:	bd70      	pop	{r4, r5, r6, pc}
   d89cc:	f1c4 040c 	rsb	r4, r4, #12
   d89d0:	f1c4 0520 	rsb	r5, r4, #32
   d89d4:	fa00 f304 	lsl.w	r3, r0, r4
   d89d8:	fa20 f005 	lsr.w	r0, r0, r5
   d89dc:	fa01 f204 	lsl.w	r2, r1, r4
   d89e0:	ea40 0002 	orr.w	r0, r0, r2
   d89e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d89ec:	f141 0100 	adc.w	r1, r1, #0
   d89f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d89f4:	bf08      	it	eq
   d89f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d89fa:	bd70      	pop	{r4, r5, r6, pc}
   d89fc:	f1c4 0520 	rsb	r5, r4, #32
   d8a00:	fa00 f205 	lsl.w	r2, r0, r5
   d8a04:	ea4e 0e02 	orr.w	lr, lr, r2
   d8a08:	fa20 f304 	lsr.w	r3, r0, r4
   d8a0c:	fa01 f205 	lsl.w	r2, r1, r5
   d8a10:	ea43 0302 	orr.w	r3, r3, r2
   d8a14:	fa21 f004 	lsr.w	r0, r1, r4
   d8a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a1c:	fa21 f204 	lsr.w	r2, r1, r4
   d8a20:	ea20 0002 	bic.w	r0, r0, r2
   d8a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a2c:	bf08      	it	eq
   d8a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8a32:	bd70      	pop	{r4, r5, r6, pc}
   d8a34:	f094 0f00 	teq	r4, #0
   d8a38:	d10f      	bne.n	d8a5a <__aeabi_dmul+0x1c2>
   d8a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8a3e:	0040      	lsls	r0, r0, #1
   d8a40:	eb41 0101 	adc.w	r1, r1, r1
   d8a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a48:	bf08      	it	eq
   d8a4a:	3c01      	subeq	r4, #1
   d8a4c:	d0f7      	beq.n	d8a3e <__aeabi_dmul+0x1a6>
   d8a4e:	ea41 0106 	orr.w	r1, r1, r6
   d8a52:	f095 0f00 	teq	r5, #0
   d8a56:	bf18      	it	ne
   d8a58:	4770      	bxne	lr
   d8a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8a5e:	0052      	lsls	r2, r2, #1
   d8a60:	eb43 0303 	adc.w	r3, r3, r3
   d8a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8a68:	bf08      	it	eq
   d8a6a:	3d01      	subeq	r5, #1
   d8a6c:	d0f7      	beq.n	d8a5e <__aeabi_dmul+0x1c6>
   d8a6e:	ea43 0306 	orr.w	r3, r3, r6
   d8a72:	4770      	bx	lr
   d8a74:	ea94 0f0c 	teq	r4, ip
   d8a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8a7c:	bf18      	it	ne
   d8a7e:	ea95 0f0c 	teqne	r5, ip
   d8a82:	d00c      	beq.n	d8a9e <__aeabi_dmul+0x206>
   d8a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a88:	bf18      	it	ne
   d8a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a8e:	d1d1      	bne.n	d8a34 <__aeabi_dmul+0x19c>
   d8a90:	ea81 0103 	eor.w	r1, r1, r3
   d8a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a98:	f04f 0000 	mov.w	r0, #0
   d8a9c:	bd70      	pop	{r4, r5, r6, pc}
   d8a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8aa2:	bf06      	itte	eq
   d8aa4:	4610      	moveq	r0, r2
   d8aa6:	4619      	moveq	r1, r3
   d8aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8aac:	d019      	beq.n	d8ae2 <__aeabi_dmul+0x24a>
   d8aae:	ea94 0f0c 	teq	r4, ip
   d8ab2:	d102      	bne.n	d8aba <__aeabi_dmul+0x222>
   d8ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8ab8:	d113      	bne.n	d8ae2 <__aeabi_dmul+0x24a>
   d8aba:	ea95 0f0c 	teq	r5, ip
   d8abe:	d105      	bne.n	d8acc <__aeabi_dmul+0x234>
   d8ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ac4:	bf1c      	itt	ne
   d8ac6:	4610      	movne	r0, r2
   d8ac8:	4619      	movne	r1, r3
   d8aca:	d10a      	bne.n	d8ae2 <__aeabi_dmul+0x24a>
   d8acc:	ea81 0103 	eor.w	r1, r1, r3
   d8ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8adc:	f04f 0000 	mov.w	r0, #0
   d8ae0:	bd70      	pop	{r4, r5, r6, pc}
   d8ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8aea:	bd70      	pop	{r4, r5, r6, pc}

000d8aec <__aeabi_ddiv>:
   d8aec:	b570      	push	{r4, r5, r6, lr}
   d8aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8afa:	bf1d      	ittte	ne
   d8afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b00:	ea94 0f0c 	teqne	r4, ip
   d8b04:	ea95 0f0c 	teqne	r5, ip
   d8b08:	f000 f8a7 	bleq	d8c5a <__aeabi_ddiv+0x16e>
   d8b0c:	eba4 0405 	sub.w	r4, r4, r5
   d8b10:	ea81 0e03 	eor.w	lr, r1, r3
   d8b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b1c:	f000 8088 	beq.w	d8c30 <__aeabi_ddiv+0x144>
   d8b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8b44:	429d      	cmp	r5, r3
   d8b46:	bf08      	it	eq
   d8b48:	4296      	cmpeq	r6, r2
   d8b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8b52:	d202      	bcs.n	d8b5a <__aeabi_ddiv+0x6e>
   d8b54:	085b      	lsrs	r3, r3, #1
   d8b56:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b5a:	1ab6      	subs	r6, r6, r2
   d8b5c:	eb65 0503 	sbc.w	r5, r5, r3
   d8b60:	085b      	lsrs	r3, r3, #1
   d8b62:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8b6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b76:	bf22      	ittt	cs
   d8b78:	1ab6      	subcs	r6, r6, r2
   d8b7a:	4675      	movcs	r5, lr
   d8b7c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8b80:	085b      	lsrs	r3, r3, #1
   d8b82:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b86:	ebb6 0e02 	subs.w	lr, r6, r2
   d8b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8b8e:	bf22      	ittt	cs
   d8b90:	1ab6      	subcs	r6, r6, r2
   d8b92:	4675      	movcs	r5, lr
   d8b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8b98:	085b      	lsrs	r3, r3, #1
   d8b9a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8b9e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ba6:	bf22      	ittt	cs
   d8ba8:	1ab6      	subcs	r6, r6, r2
   d8baa:	4675      	movcs	r5, lr
   d8bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8bb0:	085b      	lsrs	r3, r3, #1
   d8bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8bb6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8bba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8bbe:	bf22      	ittt	cs
   d8bc0:	1ab6      	subcs	r6, r6, r2
   d8bc2:	4675      	movcs	r5, lr
   d8bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8bc8:	ea55 0e06 	orrs.w	lr, r5, r6
   d8bcc:	d018      	beq.n	d8c00 <__aeabi_ddiv+0x114>
   d8bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8bea:	d1c0      	bne.n	d8b6e <__aeabi_ddiv+0x82>
   d8bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8bf0:	d10b      	bne.n	d8c0a <__aeabi_ddiv+0x11e>
   d8bf2:	ea41 0100 	orr.w	r1, r1, r0
   d8bf6:	f04f 0000 	mov.w	r0, #0
   d8bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8bfe:	e7b6      	b.n	d8b6e <__aeabi_ddiv+0x82>
   d8c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c04:	bf04      	itt	eq
   d8c06:	4301      	orreq	r1, r0
   d8c08:	2000      	moveq	r0, #0
   d8c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c0e:	bf88      	it	hi
   d8c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c14:	f63f aeaf 	bhi.w	d8976 <__aeabi_dmul+0xde>
   d8c18:	ebb5 0c03 	subs.w	ip, r5, r3
   d8c1c:	bf04      	itt	eq
   d8c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c26:	f150 0000 	adcs.w	r0, r0, #0
   d8c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c2e:	bd70      	pop	{r4, r5, r6, pc}
   d8c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8c3c:	bfc2      	ittt	gt
   d8c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c46:	bd70      	popgt	{r4, r5, r6, pc}
   d8c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c4c:	f04f 0e00 	mov.w	lr, #0
   d8c50:	3c01      	subs	r4, #1
   d8c52:	e690      	b.n	d8976 <__aeabi_dmul+0xde>
   d8c54:	ea45 0e06 	orr.w	lr, r5, r6
   d8c58:	e68d      	b.n	d8976 <__aeabi_dmul+0xde>
   d8c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c5e:	ea94 0f0c 	teq	r4, ip
   d8c62:	bf08      	it	eq
   d8c64:	ea95 0f0c 	teqeq	r5, ip
   d8c68:	f43f af3b 	beq.w	d8ae2 <__aeabi_dmul+0x24a>
   d8c6c:	ea94 0f0c 	teq	r4, ip
   d8c70:	d10a      	bne.n	d8c88 <__aeabi_ddiv+0x19c>
   d8c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8c76:	f47f af34 	bne.w	d8ae2 <__aeabi_dmul+0x24a>
   d8c7a:	ea95 0f0c 	teq	r5, ip
   d8c7e:	f47f af25 	bne.w	d8acc <__aeabi_dmul+0x234>
   d8c82:	4610      	mov	r0, r2
   d8c84:	4619      	mov	r1, r3
   d8c86:	e72c      	b.n	d8ae2 <__aeabi_dmul+0x24a>
   d8c88:	ea95 0f0c 	teq	r5, ip
   d8c8c:	d106      	bne.n	d8c9c <__aeabi_ddiv+0x1b0>
   d8c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8c92:	f43f aefd 	beq.w	d8a90 <__aeabi_dmul+0x1f8>
   d8c96:	4610      	mov	r0, r2
   d8c98:	4619      	mov	r1, r3
   d8c9a:	e722      	b.n	d8ae2 <__aeabi_dmul+0x24a>
   d8c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ca0:	bf18      	it	ne
   d8ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ca6:	f47f aec5 	bne.w	d8a34 <__aeabi_dmul+0x19c>
   d8caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8cae:	f47f af0d 	bne.w	d8acc <__aeabi_dmul+0x234>
   d8cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8cb6:	f47f aeeb 	bne.w	d8a90 <__aeabi_dmul+0x1f8>
   d8cba:	e712      	b.n	d8ae2 <__aeabi_dmul+0x24a>

000d8cbc <atoi>:
   d8cbc:	220a      	movs	r2, #10
   d8cbe:	2100      	movs	r1, #0
   d8cc0:	f000 b92c 	b.w	d8f1c <strtol>

000d8cc4 <atol>:
   d8cc4:	220a      	movs	r2, #10
   d8cc6:	2100      	movs	r1, #0
   d8cc8:	f000 b928 	b.w	d8f1c <strtol>

000d8ccc <__cxa_atexit>:
   d8ccc:	b510      	push	{r4, lr}
   d8cce:	4c05      	ldr	r4, [pc, #20]	; (d8ce4 <__cxa_atexit+0x18>)
   d8cd0:	4613      	mov	r3, r2
   d8cd2:	b12c      	cbz	r4, d8ce0 <__cxa_atexit+0x14>
   d8cd4:	460a      	mov	r2, r1
   d8cd6:	4601      	mov	r1, r0
   d8cd8:	2002      	movs	r0, #2
   d8cda:	f3af 8000 	nop.w
   d8cde:	bd10      	pop	{r4, pc}
   d8ce0:	4620      	mov	r0, r4
   d8ce2:	bd10      	pop	{r4, pc}
   d8ce4:	00000000 	.word	0x00000000

000d8ce8 <memcmp>:
   d8ce8:	b510      	push	{r4, lr}
   d8cea:	3901      	subs	r1, #1
   d8cec:	4402      	add	r2, r0
   d8cee:	4290      	cmp	r0, r2
   d8cf0:	d007      	beq.n	d8d02 <memcmp+0x1a>
   d8cf2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8cf6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8cfa:	42a3      	cmp	r3, r4
   d8cfc:	d0f7      	beq.n	d8cee <memcmp+0x6>
   d8cfe:	1b18      	subs	r0, r3, r4
   d8d00:	bd10      	pop	{r4, pc}
   d8d02:	2000      	movs	r0, #0
   d8d04:	bd10      	pop	{r4, pc}

000d8d06 <memcpy>:
   d8d06:	b510      	push	{r4, lr}
   d8d08:	1e43      	subs	r3, r0, #1
   d8d0a:	440a      	add	r2, r1
   d8d0c:	4291      	cmp	r1, r2
   d8d0e:	d004      	beq.n	d8d1a <memcpy+0x14>
   d8d10:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d14:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d18:	e7f8      	b.n	d8d0c <memcpy+0x6>
   d8d1a:	bd10      	pop	{r4, pc}

000d8d1c <memmove>:
   d8d1c:	4288      	cmp	r0, r1
   d8d1e:	b510      	push	{r4, lr}
   d8d20:	eb01 0302 	add.w	r3, r1, r2
   d8d24:	d801      	bhi.n	d8d2a <memmove+0xe>
   d8d26:	1e42      	subs	r2, r0, #1
   d8d28:	e00b      	b.n	d8d42 <memmove+0x26>
   d8d2a:	4298      	cmp	r0, r3
   d8d2c:	d2fb      	bcs.n	d8d26 <memmove+0xa>
   d8d2e:	1881      	adds	r1, r0, r2
   d8d30:	1ad2      	subs	r2, r2, r3
   d8d32:	42d3      	cmn	r3, r2
   d8d34:	d004      	beq.n	d8d40 <memmove+0x24>
   d8d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8d3a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8d3e:	e7f8      	b.n	d8d32 <memmove+0x16>
   d8d40:	bd10      	pop	{r4, pc}
   d8d42:	4299      	cmp	r1, r3
   d8d44:	d004      	beq.n	d8d50 <memmove+0x34>
   d8d46:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d4a:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8d4e:	e7f8      	b.n	d8d42 <memmove+0x26>
   d8d50:	bd10      	pop	{r4, pc}

000d8d52 <memset>:
   d8d52:	4402      	add	r2, r0
   d8d54:	4603      	mov	r3, r0
   d8d56:	4293      	cmp	r3, r2
   d8d58:	d002      	beq.n	d8d60 <memset+0xe>
   d8d5a:	f803 1b01 	strb.w	r1, [r3], #1
   d8d5e:	e7fa      	b.n	d8d56 <memset+0x4>
   d8d60:	4770      	bx	lr
	...

000d8d64 <srand>:
   d8d64:	b538      	push	{r3, r4, r5, lr}
   d8d66:	4b12      	ldr	r3, [pc, #72]	; (d8db0 <srand+0x4c>)
   d8d68:	681c      	ldr	r4, [r3, #0]
   d8d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d6c:	4605      	mov	r5, r0
   d8d6e:	b9d3      	cbnz	r3, d8da6 <srand+0x42>
   d8d70:	2018      	movs	r0, #24
   d8d72:	f7fc ffcf 	bl	d5d14 <malloc>
   d8d76:	f243 330e 	movw	r3, #13070	; 0x330e
   d8d7a:	63a0      	str	r0, [r4, #56]	; 0x38
   d8d7c:	8003      	strh	r3, [r0, #0]
   d8d7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8d82:	8043      	strh	r3, [r0, #2]
   d8d84:	f241 2334 	movw	r3, #4660	; 0x1234
   d8d88:	8083      	strh	r3, [r0, #4]
   d8d8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8d8e:	80c3      	strh	r3, [r0, #6]
   d8d90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8d94:	8103      	strh	r3, [r0, #8]
   d8d96:	2305      	movs	r3, #5
   d8d98:	8143      	strh	r3, [r0, #10]
   d8d9a:	230b      	movs	r3, #11
   d8d9c:	8183      	strh	r3, [r0, #12]
   d8d9e:	2201      	movs	r2, #1
   d8da0:	2300      	movs	r3, #0
   d8da2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8da6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8da8:	2200      	movs	r2, #0
   d8daa:	611d      	str	r5, [r3, #16]
   d8dac:	615a      	str	r2, [r3, #20]
   d8dae:	bd38      	pop	{r3, r4, r5, pc}
   d8db0:	2003e1dc 	.word	0x2003e1dc

000d8db4 <strcmp>:
   d8db4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8db8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8dbc:	2a01      	cmp	r2, #1
   d8dbe:	bf28      	it	cs
   d8dc0:	429a      	cmpcs	r2, r3
   d8dc2:	d0f7      	beq.n	d8db4 <strcmp>
   d8dc4:	1ad0      	subs	r0, r2, r3
   d8dc6:	4770      	bx	lr

000d8dc8 <strcpy>:
   d8dc8:	4603      	mov	r3, r0
   d8dca:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8dce:	f803 2b01 	strb.w	r2, [r3], #1
   d8dd2:	2a00      	cmp	r2, #0
   d8dd4:	d1f9      	bne.n	d8dca <strcpy+0x2>
   d8dd6:	4770      	bx	lr

000d8dd8 <strlen>:
   d8dd8:	4603      	mov	r3, r0
   d8dda:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8dde:	2a00      	cmp	r2, #0
   d8de0:	d1fb      	bne.n	d8dda <strlen+0x2>
   d8de2:	1a18      	subs	r0, r3, r0
   d8de4:	3801      	subs	r0, #1
   d8de6:	4770      	bx	lr

000d8de8 <strncpy>:
   d8de8:	b510      	push	{r4, lr}
   d8dea:	4603      	mov	r3, r0
   d8dec:	b142      	cbz	r2, d8e00 <strncpy+0x18>
   d8dee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8df2:	f803 4b01 	strb.w	r4, [r3], #1
   d8df6:	3a01      	subs	r2, #1
   d8df8:	2c00      	cmp	r4, #0
   d8dfa:	d1f7      	bne.n	d8dec <strncpy+0x4>
   d8dfc:	441a      	add	r2, r3
   d8dfe:	e000      	b.n	d8e02 <strncpy+0x1a>
   d8e00:	bd10      	pop	{r4, pc}
   d8e02:	4293      	cmp	r3, r2
   d8e04:	d002      	beq.n	d8e0c <strncpy+0x24>
   d8e06:	f803 4b01 	strb.w	r4, [r3], #1
   d8e0a:	e7fa      	b.n	d8e02 <strncpy+0x1a>
   d8e0c:	bd10      	pop	{r4, pc}
	...

000d8e10 <_strtol_r>:
   d8e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8e14:	4680      	mov	r8, r0
   d8e16:	4840      	ldr	r0, [pc, #256]	; (d8f18 <_strtol_r+0x108>)
   d8e18:	f8d0 9000 	ldr.w	r9, [r0]
   d8e1c:	460f      	mov	r7, r1
   d8e1e:	463d      	mov	r5, r7
   d8e20:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e24:	eb09 0004 	add.w	r0, r9, r4
   d8e28:	7840      	ldrb	r0, [r0, #1]
   d8e2a:	f000 0008 	and.w	r0, r0, #8
   d8e2e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8e32:	b108      	cbz	r0, d8e38 <_strtol_r+0x28>
   d8e34:	462f      	mov	r7, r5
   d8e36:	e7f2      	b.n	d8e1e <_strtol_r+0xe>
   d8e38:	2c2d      	cmp	r4, #45	; 0x2d
   d8e3a:	d103      	bne.n	d8e44 <_strtol_r+0x34>
   d8e3c:	1cbd      	adds	r5, r7, #2
   d8e3e:	787c      	ldrb	r4, [r7, #1]
   d8e40:	2601      	movs	r6, #1
   d8e42:	e003      	b.n	d8e4c <_strtol_r+0x3c>
   d8e44:	2c2b      	cmp	r4, #43	; 0x2b
   d8e46:	bf04      	itt	eq
   d8e48:	787c      	ldrbeq	r4, [r7, #1]
   d8e4a:	1cbd      	addeq	r5, r7, #2
   d8e4c:	b113      	cbz	r3, d8e54 <_strtol_r+0x44>
   d8e4e:	2b10      	cmp	r3, #16
   d8e50:	d10a      	bne.n	d8e68 <_strtol_r+0x58>
   d8e52:	e05b      	b.n	d8f0c <_strtol_r+0xfc>
   d8e54:	2c30      	cmp	r4, #48	; 0x30
   d8e56:	d157      	bne.n	d8f08 <_strtol_r+0xf8>
   d8e58:	7828      	ldrb	r0, [r5, #0]
   d8e5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e5e:	2858      	cmp	r0, #88	; 0x58
   d8e60:	d14d      	bne.n	d8efe <_strtol_r+0xee>
   d8e62:	786c      	ldrb	r4, [r5, #1]
   d8e64:	2310      	movs	r3, #16
   d8e66:	3502      	adds	r5, #2
   d8e68:	2e00      	cmp	r6, #0
   d8e6a:	bf14      	ite	ne
   d8e6c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8e70:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8e74:	2700      	movs	r7, #0
   d8e76:	fbbc faf3 	udiv	sl, ip, r3
   d8e7a:	4638      	mov	r0, r7
   d8e7c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8e80:	eb09 0e04 	add.w	lr, r9, r4
   d8e84:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8e88:	f01e 0f04 	tst.w	lr, #4
   d8e8c:	d001      	beq.n	d8e92 <_strtol_r+0x82>
   d8e8e:	3c30      	subs	r4, #48	; 0x30
   d8e90:	e00b      	b.n	d8eaa <_strtol_r+0x9a>
   d8e92:	f01e 0e03 	ands.w	lr, lr, #3
   d8e96:	d01b      	beq.n	d8ed0 <_strtol_r+0xc0>
   d8e98:	f1be 0f01 	cmp.w	lr, #1
   d8e9c:	bf0c      	ite	eq
   d8e9e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8ea2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8ea6:	ebce 0404 	rsb	r4, lr, r4
   d8eaa:	42a3      	cmp	r3, r4
   d8eac:	dd10      	ble.n	d8ed0 <_strtol_r+0xc0>
   d8eae:	f1b7 3fff 	cmp.w	r7, #4294967295
   d8eb2:	d00a      	beq.n	d8eca <_strtol_r+0xba>
   d8eb4:	4550      	cmp	r0, sl
   d8eb6:	d806      	bhi.n	d8ec6 <_strtol_r+0xb6>
   d8eb8:	d101      	bne.n	d8ebe <_strtol_r+0xae>
   d8eba:	4564      	cmp	r4, ip
   d8ebc:	dc03      	bgt.n	d8ec6 <_strtol_r+0xb6>
   d8ebe:	fb03 4000 	mla	r0, r3, r0, r4
   d8ec2:	2701      	movs	r7, #1
   d8ec4:	e001      	b.n	d8eca <_strtol_r+0xba>
   d8ec6:	f04f 37ff 	mov.w	r7, #4294967295
   d8eca:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8ece:	e7d7      	b.n	d8e80 <_strtol_r+0x70>
   d8ed0:	1c7b      	adds	r3, r7, #1
   d8ed2:	d10c      	bne.n	d8eee <_strtol_r+0xde>
   d8ed4:	2e00      	cmp	r6, #0
   d8ed6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8eda:	bf14      	ite	ne
   d8edc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8ee0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8ee4:	f8c8 3000 	str.w	r3, [r8]
   d8ee8:	b92a      	cbnz	r2, d8ef6 <_strtol_r+0xe6>
   d8eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eee:	b106      	cbz	r6, d8ef2 <_strtol_r+0xe2>
   d8ef0:	4240      	negs	r0, r0
   d8ef2:	b172      	cbz	r2, d8f12 <_strtol_r+0x102>
   d8ef4:	b107      	cbz	r7, d8ef8 <_strtol_r+0xe8>
   d8ef6:	1e69      	subs	r1, r5, #1
   d8ef8:	6011      	str	r1, [r2, #0]
   d8efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8efe:	2430      	movs	r4, #48	; 0x30
   d8f00:	2b00      	cmp	r3, #0
   d8f02:	d1b1      	bne.n	d8e68 <_strtol_r+0x58>
   d8f04:	2308      	movs	r3, #8
   d8f06:	e7af      	b.n	d8e68 <_strtol_r+0x58>
   d8f08:	230a      	movs	r3, #10
   d8f0a:	e7ad      	b.n	d8e68 <_strtol_r+0x58>
   d8f0c:	2c30      	cmp	r4, #48	; 0x30
   d8f0e:	d0a3      	beq.n	d8e58 <_strtol_r+0x48>
   d8f10:	e7aa      	b.n	d8e68 <_strtol_r+0x58>
   d8f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f16:	bf00      	nop
   d8f18:	2003e178 	.word	0x2003e178

000d8f1c <strtol>:
   d8f1c:	4613      	mov	r3, r2
   d8f1e:	460a      	mov	r2, r1
   d8f20:	4601      	mov	r1, r0
   d8f22:	4802      	ldr	r0, [pc, #8]	; (d8f2c <strtol+0x10>)
   d8f24:	6800      	ldr	r0, [r0, #0]
   d8f26:	f7ff bf73 	b.w	d8e10 <_strtol_r>
   d8f2a:	bf00      	nop
   d8f2c:	2003e1dc 	.word	0x2003e1dc

000d8f30 <dynalib_user>:
   d8f30:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8f40:	00000000                                ....

000d8f44 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d8f44:	6b6e6c62 00666e69 00726576 2e352e30     blnkinf.ver.0.5.
   d8f54:	2d680034 74616562 00303100 66667562     4.h-beat.10.buff
   d8f64:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8f74:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8f84:	32203731 20393130 333a3931 38313a31     17 2019 19:31:18
   d8f94:	25000000 6c250069 32250069 0066372e     ...%i.%li.%2.7f.
   d8fa4:	6f006e69 70007475 64006d77 77610077     in.out.pwm.dw.aw
   d8fb4:	00777600 65323563 61373965 34373838     .vw.c52ee97a8874
   d8fc4:	33323034 36323862 66626138 34303565     4023b8268abfe504
   d8fd4:	66663361 53494400 454d5241 6e490044     a3ff.DISARMED.In
   d8fe4:	61697469 657a696c 69620064 6854656b     itialized.bikeTh
   d8ff4:	00676e69 46454854 4e492054 4f525020     ing.THEFT IN PRO
   d9004:	53455247 69420053 5900656b 2072756f     GRESS.Bike.Your 
   d9014:	656b6962 20736920 6e696562 74732067     bike is being st
   d9024:	6e656c6f 78740021 00787200 30344536     olen!.tx.rx.6E40
   d9034:	33303030 4135422d 33462d33 452d3339     0003-B5A3-F393-E
   d9044:	2d394130 45303545 43443432 45394143     0A9-E50E24DCCA9E
   d9054:	34453600 30303030 35422d32 462d3341     .6E400002-B5A3-F
   d9064:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   d9074:	39414343 45360045 30303034 422d3130     CCA9E.6E400001-B
   d9084:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   d9094:	34324530 41434344 00004539              0E24DCCA9E..

000d90a0 <_ZL23BlynkWriteHandlerVector>:
   d90a0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d90b0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d90c0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d90d0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d90e0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d90f0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9100:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9110:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9120:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9130:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9140:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9150:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9160:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9170:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9180:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9190:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91a0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91b0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91c0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91d0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91e0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d91f0:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9200:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9210:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9220:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9230:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9240:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9250:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9260:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9270:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9280:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..
   d9290:	000d5049 000d5049 000d5049 000d5049     IP..IP..IP..IP..

000d92a0 <_ZL22BlynkReadHandlerVector>:
   d92a0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d92b0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d92c0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d92d0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d92e0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d92f0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9300:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9310:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9320:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9330:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9340:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9350:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9360:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9370:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9380:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9390:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93a0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93b0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93c0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93d0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93e0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d93f0:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9400:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9410:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9420:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9430:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9440:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9450:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9460:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9470:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9480:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d9490:	000d5047 000d5047 000d5047 000d5047     GP..GP..GP..GP..
   d94a0:	4d525047 50470043 00414747 4e4e004e     GPRMC.GPGGA.N.NN
   d94b0:	4e450045 53450045 53530045 53530045     E.ENE.ESE.SSE.SS
   d94c0:	53570057 4e570057 4e4e0057 00000057     W.WSW.WNW.NNW...

000d94d0 <_ZTVN5spark12NetworkClassE>:
	...
   d94d8:	000d5daf 000d5db9 000d5dc3 000d5dcd     .]...]...]...]..
   d94e8:	000d5dd7 000d5de3 000d5def 000d5dfb     .]...]...]...]..
   d94f8:	000d5e03 000d5e0d 000d5e17              .^...^...^..

000d9504 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d950c:	000d5f81 000d5f87 000d646f 000d5f95     ._..._..od..._..
   d951c:	000d5f83                                ._..

000d9520 <_ZTV9TCPClient>:
	...
   d9528:	000d40cd 000d410d 000d5ef9 000d5f13     .@...A...^..._..
   d9538:	000d6315 000d6157 000d6129 000d5f3d     .c..Wa..)a..=_..
   d9548:	000d61ed 000d5f99 000d618b 000d62e7     .a..._...a...b..
   d9558:	000d5f3f 000d5f77 000d5f25 000d6089     ?_..w_..%_...`..
   d9568:	000d6109 69726977 7200676e 20766365     .a..wiring.recv 
   d9578:	6f727265 203d2072 00006425              error = %d..

000d9584 <_ZTVN5spark9MeshClassE>:
	...
   d958c:	000d64e5 000d64db 000d64d1 000d64c7     .d...d...d...d..
   d959c:	000d64bb 000d64af 000d64a3 000d649b     .d...d...d...d..
   d95ac:	000d6491 000d6487 000d5e17              .d...d...^..

000d95b8 <_ZTV8SPIClass>:
	...
   d95c0:	000d65e5 000d65e7                       .e...e..

000d95c8 <_ZTV7TwoWire>:
	...
   d95d0:	000d6623 000d666d 000d6645 000d6625     #f..mf..Ef..%f..
   d95e0:	000d664d 000d6655 000d665d 000d6665     Mf..Uf..]f..ef..

000d95f0 <_ZTV9USBSerial>:
	...
   d95f8:	000d66ff 000d674f 000d675d 000d6c79     .f..Og..]g..yl..
   d9608:	000d673b 000d6701 000d6717 000d6749     ;g...g...g..Ig..
   d9618:	000d672d 000d66fb                       -g...f..

000d9620 <_ZTV9IPAddress>:
	...
   d9628:	000d681d 000d680d 000d680f              .h...h...h..

000d9634 <_ZTVN5spark13CellularClassE>:
	...
   d963c:	000d6b3f 000d6b35 000d6b2b 000d6ae1     ?k..5k..+k...j..
   d964c:	000d6b1f 000d6b13 000d6b07 000d6aff     .k...k...k...j..
   d965c:	000d6af5 000d6aeb 000d5e17 2b25005a     .j...j...^..Z.%+
   d966c:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d967c:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d968c:	656d6974 006e6c00 63006e66 0065646f     time.ln.fn.code.
   d969c:	61746564 0d006c69 3025000a 20753031     detail....%010u 
   d96ac:	00205d00 2800202c 00203a29 63005b20     .] ., .(): . [.c
   d96bc:	2065646f 6400203d 69617465 3d20736c     ode = .details =
   d96cc:	61620020 53006475 61697265 6553006c      .baud.Serial.Se
   d96dc:	6c616972 79740031 70006570 6d617261     rial1.type.param
   d96ec:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
   d96fc:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
   d970c:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
   d971c:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
   d972c:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d973c:	72656c64 70706100 6e6f6e00 72740065     dler.app.none.tr
   d974c:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
   d975c:	00726f72 696e6170 6c610063 0000006c     ror.panic.all...

000d976c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9774:	000d6d61 000d6d67 000d7be9 000d6d91     am..gm...{...m..
   d9784:	000d6d63                                cm..

000d9788 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9790:	000d6d5b 000d6d75 000d7cf5 000d6d95     [m..um...|...m..
   d97a0:	000d6d5d                                ]m..

000d97a4 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d97ac:	000d6d55 000d6d83 000d73c3 000d6d99     Um...m...s...m..
   d97bc:	000d6d57                                Wm..

000d97c0 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d97c0:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d97d0:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d97e0:	73696420 65766f63 676e6972 72657320      discovering ser
   d97f0:	65636976 53002e73 74726174 73696420     vices..Start dis
   d9800:	65766f63 676e6972 61686320 74636172     covering charact
   d9810:	73697265 73636974 6168002e 6c625f6c     eristics..hal_bl
   d9820:	61675f65 635f7474 6e65696c 69645f74     e_gatt_client_di
   d9830:	766f6373 615f7265 735f6c6c 69767265     scover_all_servi
   d9840:	28736563 61662029 64656c69 6425203b     ces() failed; %d
   d9850:	77654e00 72657020 65687069 206c6172     .New peripheral 
   d9860:	6e6e6f63 65746365 00002e64              connected...

000d986c <_ZTV11USARTSerial>:
	...
   d9874:	000d7ea9 000d7ef9 000d7f07 000d6c79     .~...~......yl..
   d9884:	000d7ebd 000d7edf 000d7ecb 000d7ef3     .~...~...~...~..
   d9894:	000d7eab 000d7eaf                       .~...~..

000d989c <_ZTVN5spark13EthernetClassE>:
	...
   d98a4:	000d80ab 000d80a1 000d8097 000d808d     ................
   d98b4:	000d8081 000d8075 000d8069 000d8061     ....u...i...a...
   d98c4:	000d8057 000d804d 000d5e17              W...M....^..

000d98d0 <_ctype_>:
   d98d0:	20202000 20202020 28282020 20282828     .         ((((( 
   d98e0:	20202020 20202020 20202020 20202020                     
   d98f0:	10108820 10101010 10101010 10101010      ...............
   d9900:	04040410 04040404 10040404 10101010     ................
   d9910:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9920:	01010101 01010101 01010101 10101010     ................
   d9930:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9940:	02020202 02020202 02020202 10101010     ................
   d9950:	00000020 00000000 00000000 00000000      ...............
	...

000d99d4 <__sf_fake_stdin>:
	...

000d99f4 <__sf_fake_stdout>:
	...

000d9a14 <__sf_fake_stderr>:
	...

000d9a34 <link_const_variable_data_end>:
   d9a34:	000d4ead 	.word	0x000d4ead
   d9a38:	000d5043 	.word	0x000d5043
   d9a3c:	000d5075 	.word	0x000d5075
   d9a40:	000d5081 	.word	0x000d5081
   d9a44:	000d5085 	.word	0x000d5085
   d9a48:	000d567d 	.word	0x000d567d
   d9a4c:	000d570f 	.word	0x000d570f
   d9a50:	000d5ee5 	.word	0x000d5ee5
   d9a54:	000d6599 	.word	0x000d6599
   d9a58:	000d6b49 	.word	0x000d6b49
   d9a5c:	000d6bdd 	.word	0x000d6bdd
   d9a60:	000d6c01 	.word	0x000d6c01
   d9a64:	000d6c15 	.word	0x000d6c15
   d9a68:	000d7e99 	.word	0x000d7e99
   d9a6c:	000d8035 	.word	0x000d8035
   d9a70:	000d80b5 	.word	0x000d80b5
   d9a74:	000d8109 	.word	0x000d8109
   d9a78:	000d8299 	.word	0x000d8299
   d9a7c:	000d831d 	.word	0x000d831d
   d9a80:	000d83e1 	.word	0x000d83e1
   d9a84:	000d84a5 	.word	0x000d84a5

000d9a88 <link_constructors_end>:
	...
